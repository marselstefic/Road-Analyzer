
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800e868  0800e868  0001e868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eca4  0800eca4  00020344  2**0
                  CONTENTS
  4 .ARM          00000000  0800eca4  0800eca4  00020344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eca4  0800eca4  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eca4  0800eca4  0001eca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eca8  0800eca8  0001eca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800ecac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020344  2**0
                  CONTENTS
 10 .bss          00001484  20000344  20000344  00020344  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200017c8  200017c8  00020344  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001702b  00000000  00000000  000203b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000386e  00000000  00000000  000373e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001278  00000000  00000000  0003ac50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e1e  00000000  00000000  0003bec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021666  00000000  00000000  0003cce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a23a  00000000  00000000  0005e34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b7384  00000000  00000000  00078586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005d68  00000000  00000000  0012f90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00135674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000344 	.word	0x20000344
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e850 	.word	0x0800e850

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000348 	.word	0x20000348
 80001cc:	0800e850 	.word	0x0800e850

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <pavza>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void pavza(){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  for(counter=0; counter<600; counter++){
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	e003      	b.n	8000bc0 <pavza+0x18>
    asm("nop");
 8000bb8:	bf00      	nop
  for(counter=0; counter<600; counter++){
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000bc6:	d3f7      	bcc.n	8000bb8 <pavza+0x10>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <spi1_pisiRegister>:
  pavza();
  return buf_in >> 8; // little endian...
}

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	71bb      	strb	r3, [r7, #6]
  uint16_t buf_out;
  buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	021b      	lsls	r3, r3, #8
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	81fb      	strh	r3, [r7, #14]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	4810      	ldr	r0, [pc, #64]	; (8000c40 <spi1_pisiRegister+0x68>)
 8000c00:	f001 f8f2 	bl	8001de8 <HAL_GPIO_WritePin>
  pavza();
 8000c04:	f7ff ffd0 	bl	8000ba8 <pavza>
  //HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8000c08:	f107 010e 	add.w	r1, r7, #14
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	2201      	movs	r2, #1
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <spi1_pisiRegister+0x6c>)
 8000c12:	f005 f8d0 	bl	8005db6 <HAL_SPI_Transmit>
  pavza();
 8000c16:	f7ff ffc7 	bl	8000ba8 <pavza>
  HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8000c1a:	f107 010e 	add.w	r1, r7, #14
 8000c1e:	3101      	adds	r1, #1
 8000c20:	2302      	movs	r3, #2
 8000c22:	2201      	movs	r2, #1
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <spi1_pisiRegister+0x6c>)
 8000c26:	f005 f8c6 	bl	8005db6 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <spi1_pisiRegister+0x68>)
 8000c30:	f001 f8da 	bl	8001de8 <HAL_GPIO_WritePin>
  pavza();
 8000c34:	f7ff ffb8 	bl	8000ba8 <pavza>
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	48001000 	.word	0x48001000
 8000c44:	200003b4 	.word	0x200003b4

08000c48 <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
  reg |= 0xC0; // najpomembnejsa bita na 1
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2108      	movs	r1, #8
 8000c66:	480f      	ldr	r0, [pc, #60]	; (8000ca4 <spi1_beriRegistre+0x5c>)
 8000c68:	f001 f8be 	bl	8001de8 <HAL_GPIO_WritePin>
  pavza();
 8000c6c:	f7ff ff9c 	bl	8000ba8 <pavza>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 8000c70:	1df9      	adds	r1, r7, #7
 8000c72:	230a      	movs	r3, #10
 8000c74:	2201      	movs	r2, #1
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <spi1_beriRegistre+0x60>)
 8000c78:	f005 f89d 	bl	8005db6 <HAL_SPI_Transmit>
  pavza();
 8000c7c:	f7ff ff94 	bl	8000ba8 <pavza>
  HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	6839      	ldr	r1, [r7, #0]
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <spi1_beriRegistre+0x60>)
 8000c8a:	f005 fa09 	bl	80060a0 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2108      	movs	r1, #8
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <spi1_beriRegistre+0x5c>)
 8000c94:	f001 f8a8 	bl	8001de8 <HAL_GPIO_WritePin>
  pavza();
 8000c98:	f7ff ff86 	bl	8000ba8 <pavza>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	48001000 	.word	0x48001000
 8000ca8:	200003b4 	.word	0x200003b4

08000cac <i2c1_pisiRegister>:

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af04      	add	r7, sp, #16
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	71bb      	strb	r3, [r7, #6]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	b299      	uxth	r1, r3
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	230a      	movs	r3, #10
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	1d7b      	adds	r3, r7, #5
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4804      	ldr	r0, [pc, #16]	; (8000cec <i2c1_pisiRegister+0x40>)
 8000cdc:	f001 f946 	bl	8001f6c <HAL_I2C_Mem_Write>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000360 	.word	0x20000360

08000cf0 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af04      	add	r7, sp, #16
 8000cf6:	603a      	str	r2, [r7, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	71bb      	strb	r3, [r7, #6]
 8000d02:	4613      	mov	r3, r2
 8000d04:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000d06:	797b      	ldrb	r3, [r7, #5]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d906      	bls.n	8000d1a <i2c1_beriRegistre+0x2a>
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b19      	cmp	r3, #25
 8000d10:	d103      	bne.n	8000d1a <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d18:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	b299      	uxth	r1, r3
 8000d24:	79bb      	ldrb	r3, [r7, #6]
 8000d26:	b298      	uxth	r0, r3
 8000d28:	797b      	ldrb	r3, [r7, #5]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	797a      	ldrb	r2, [r7, #5]
 8000d2e:	9202      	str	r2, [sp, #8]
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2301      	movs	r3, #1
 8000d38:	4602      	mov	r2, r0
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <i2c1_beriRegistre+0x58>)
 8000d3c:	f001 fa2a 	bl	8002194 <HAL_I2C_Mem_Read>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000360 	.word	0x20000360

08000d4c <initLSM303DLHC>:

void initLSM303DLHC()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  HAL_Delay(10);
 8000d50:	200a      	movs	r0, #10
 8000d52:	f000 fd81 	bl	8001858 <HAL_Delay>
  // Za potrebe testa, moramo testni napravi sporociti kateri senzor imamo
  #define OLD_SENSOR 0x73 // Odkomentiramo za LSM303DLHC / stari senzor
  //#define NEW_SENSOR 0x6E // Odkomentiramo za LSM303AGR / novi senzor

  #if defined(OLD_SENSOR) && !defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, OLD_SENSOR); // Povemo testni napravi, da imamo stari senzor
 8000d56:	2273      	movs	r2, #115	; 0x73
 8000d58:	214f      	movs	r1, #79	; 0x4f
 8000d5a:	201e      	movs	r0, #30
 8000d5c:	f7ff ffa6 	bl	8000cac <i2c1_pisiRegister>
  #elif !defined(OLD_SENSOR) && defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, NEW_SENSOR); // Povemo testni napravi, da imamo novi senzor
  #else
  for(;;); // V primeru napake, pocakamo tukaj
  #endif
  HAL_Delay(100);
 8000d60:	2064      	movs	r0, #100	; 0x64
 8000d62:	f000 fd79 	bl	8001858 <HAL_Delay>

  // inicializiraj pospeskometer
  i2c1_pisiRegister(0x19, 0x20, 0x47);  // zbudi pospeskometer in omogoci osi
 8000d66:	2247      	movs	r2, #71	; 0x47
 8000d68:	2120      	movs	r1, #32
 8000d6a:	2019      	movs	r0, #25
 8000d6c:	f7ff ff9e 	bl	8000cac <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x23, 0x98);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 8000d70:	2298      	movs	r2, #152	; 0x98
 8000d72:	2123      	movs	r1, #35	; 0x23
 8000d74:	2019      	movs	r0, #25
 8000d76:	f7ff ff99 	bl	8000cac <i2c1_pisiRegister>

  spi1_pisiRegister(0x20, 0x4F); // zbudi ziroskop in omogoci osi
 8000d7a:	214f      	movs	r1, #79	; 0x4f
 8000d7c:	2020      	movs	r0, #32
 8000d7e:	f7ff ff2b 	bl	8000bd8 <spi1_pisiRegister>
  spi1_pisiRegister(0x23, 0x10);
 8000d82:	2110      	movs	r1, #16
 8000d84:	2023      	movs	r0, #35	; 0x23
 8000d86:	f7ff ff27 	bl	8000bd8 <spi1_pisiRegister>
  spi1_pisiRegister(0x22, 0x88);
 8000d8a:	2188      	movs	r1, #136	; 0x88
 8000d8c:	2022      	movs	r0, #34	; 0x22
 8000d8e:	f7ff ff23 	bl	8000bd8 <spi1_pisiRegister>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d9c:	b0ce      	sub	sp, #312	; 0x138
 8000d9e:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da0:	f000 fcf4 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da4:	f000 f91e 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da8:	f000 fa2e 	bl	8001208 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dac:	f000 f97e 	bl	80010ac <MX_I2C1_Init>
  MX_SPI1_Init();
 8000db0:	f000 f9bc 	bl	800112c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000db4:	f00a fa0e 	bl	800b1d4 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000db8:	f000 f9f6 	bl	80011a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000dbc:	4b82      	ldr	r3, [pc, #520]	; (8000fc8 <main+0x230>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b81      	ldr	r3, [pc, #516]	; (8000fc8 <main+0x230>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dca:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(&hi2c1);
 8000dcc:	4b7f      	ldr	r3, [pc, #508]	; (8000fcc <main+0x234>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b7e      	ldr	r3, [pc, #504]	; (8000fcc <main+0x234>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0201 	orr.w	r2, r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // CS postavimo na 1
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2108      	movs	r1, #8
 8000de0:	487b      	ldr	r0, [pc, #492]	; (8000fd0 <main+0x238>)
 8000de2:	f001 f801 	bl	8001de8 <HAL_GPIO_WritePin>
  initLSM303DLHC();
 8000de6:	f7ff ffb1 	bl	8000d4c <initLSM303DLHC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t meritevG[3];
  int16_t meritevA[3];
  uint8_t buttonState = GPIO_PIN_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
  uint8_t state = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && buttonState == GPIO_PIN_RESET){
 8000df6:	2101      	movs	r1, #1
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f000 ffdc 	bl	8001db8 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d113      	bne.n	8000e2e <main+0x96>
 8000e06:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10f      	bne.n	8000e2e <main+0x96>
		  state++;
 8000e0e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000e12:	3301      	adds	r3, #1
 8000e14:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		  if(state > 2){
 8000e18:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d902      	bls.n	8000e26 <main+0x8e>
			  state = 1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		  }
		  buttonState = GPIO_PIN_SET;
 8000e26:	2301      	movs	r3, #1
 8000e28:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8000e2c:	e00a      	b.n	8000e44 <main+0xac>
	  }

	  else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8000e2e:	2101      	movs	r1, #1
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f000 ffc0 	bl	8001db8 <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <main+0xac>
		  buttonState = GPIO_PIN_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	  }

	  HAL_Delay(100);
 8000e44:	2064      	movs	r0, #100	; 0x64
 8000e46:	f000 fd07 	bl	8001858 <HAL_Delay>

	  if(state == 2) {
 8000e4a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d1d1      	bne.n	8000df6 <main+0x5e>
		  spi1_beriRegistre(0x28, (uint8_t*)&meritevG[0], 6);
 8000e52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e56:	2206      	movs	r2, #6
 8000e58:	4619      	mov	r1, r3
 8000e5a:	2028      	movs	r0, #40	; 0x28
 8000e5c:	f7ff fef4 	bl	8000c48 <spi1_beriRegistre>
		  i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritevA[0], 6);
 8000e60:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8000e64:	2306      	movs	r3, #6
 8000e66:	2128      	movs	r1, #40	; 0x28
 8000e68:	2019      	movs	r0, #25
 8000e6a:	f7ff ff41 	bl	8000cf0 <i2c1_beriRegistre>

		  float GX = (float)meritevG[0] * 500 / 32768;
 8000e6e:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e7a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000fd4 <main+0x23c>
 8000e7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e82:	eddf 6a55 	vldr	s13, [pc, #340]	; 8000fd8 <main+0x240>
 8000e86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e8a:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
		  float GY = (float)meritevG[1] * 500 / 32768;
 8000e8e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e9a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000fd4 <main+0x23c>
 8000e9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ea2:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000fd8 <main+0x240>
 8000ea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eaa:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
		  float GZ = (float)meritevG[2] * 500 / 32768;
 8000eae:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8000eb2:	ee07 3a90 	vmov	s15, r3
 8000eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eba:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000fd4 <main+0x23c>
 8000ebe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ec2:	eddf 6a45 	vldr	s13, [pc, #276]	; 8000fd8 <main+0x240>
 8000ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eca:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
		  float AX = (float)meritevA[0] * 4 / 32768;
 8000ece:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	; 0xdc
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eda:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000ede:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ee2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000fd8 <main+0x240>
 8000ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eea:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
		  float AY = (float)meritevA[1] * 4 / 32768;
 8000eee:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000efe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f02:	eddf 6a35 	vldr	s13, [pc, #212]	; 8000fd8 <main+0x240>
 8000f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0a:	edc7 7a3c 	vstr	s15, [r7, #240]	; 0xf0
		  float AZ = (float)meritevA[2] * 4 / 32768;
 8000f0e:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	; 0xe0
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000f1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f22:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000fd8 <main+0x240>
 8000f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f2a:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec

		  char ascii[200];  // Adjust the array size as needed
		  snprintf(ascii, sizeof(ascii), "{\"GX\":%.3f, \"GY\":%.3f, \"GZ\":%.3f, \"AX\":%.3f, \"AY\":%.3f, \"AZ\":%.3f}\n\r", GX, GY, GZ, AX, AY, AZ);
 8000f2e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8000f32:	f7ff fb09 	bl	8000548 <__aeabi_f2d>
 8000f36:	4604      	mov	r4, r0
 8000f38:	460d      	mov	r5, r1
 8000f3a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8000f3e:	f7ff fb03 	bl	8000548 <__aeabi_f2d>
 8000f42:	4680      	mov	r8, r0
 8000f44:	4689      	mov	r9, r1
 8000f46:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8000f4a:	f7ff fafd 	bl	8000548 <__aeabi_f2d>
 8000f4e:	4682      	mov	sl, r0
 8000f50:	468b      	mov	fp, r1
 8000f52:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8000f56:	f7ff faf7 	bl	8000548 <__aeabi_f2d>
 8000f5a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000f5e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000f62:	f7ff faf1 	bl	8000548 <__aeabi_f2d>
 8000f66:	e9c7 0100 	strd	r0, r1, [r7]
 8000f6a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8000f6e:	f7ff faeb 	bl	8000548 <__aeabi_f2d>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	f107 0014 	add.w	r0, r7, #20
 8000f7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000f7e:	ed97 7b00 	vldr	d7, [r7]
 8000f82:	ed8d 7b08 	vstr	d7, [sp, #32]
 8000f86:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f8a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000f8e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000f92:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f96:	e9cd 4500 	strd	r4, r5, [sp]
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <main+0x244>)
 8000f9c:	21c8      	movs	r1, #200	; 0xc8
 8000f9e:	f00b fae5 	bl	800c56c <sniprintf>

		  HAL_UART_Transmit(&huart2, (uint8_t*)ascii, strlen(ascii), 100);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f962 	bl	8000270 <strlen>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	f107 0114 	add.w	r1, r7, #20
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <main+0x248>)
 8000fb8:	f005 fdd6 	bl	8006b68 <HAL_UART_Transmit>

		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 8000fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <main+0x238>)
 8000fc2:	f000 ff29 	bl	8001e18 <HAL_GPIO_TogglePin>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && buttonState == GPIO_PIN_RESET){
 8000fc6:	e716      	b.n	8000df6 <main+0x5e>
 8000fc8:	200003b4 	.word	0x200003b4
 8000fcc:	20000360 	.word	0x20000360
 8000fd0:	48001000 	.word	0x48001000
 8000fd4:	43fa0000 	.word	0x43fa0000
 8000fd8:	47000000 	.word	0x47000000
 8000fdc:	0800e868 	.word	0x0800e868
 8000fe0:	20000418 	.word	0x20000418

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b09e      	sub	sp, #120	; 0x78
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fee:	2228      	movs	r2, #40	; 0x28
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f00b fb31 	bl	800c65a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	223c      	movs	r2, #60	; 0x3c
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00b fb23 	bl	800c65a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001014:	2303      	movs	r3, #3
 8001016:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001018:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800101c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001022:	2301      	movs	r3, #1
 8001024:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001026:	2310      	movs	r3, #16
 8001028:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001032:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001034:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001038:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800103e:	4618      	mov	r0, r3
 8001040:	f003 f9ea 	bl	8004418 <HAL_RCC_OscConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800104a:	f000 f977 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001052:	2302      	movs	r3, #2
 8001054:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001064:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001068:	2101      	movs	r1, #1
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fa12 	bl	8005494 <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001076:	f000 f961 	bl	800133c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <SystemClock_Config+0xc4>)
 800107c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800108a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4618      	mov	r0, r3
 8001090:	f004 fc36 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800109a:	f000 f94f 	bl	800133c <Error_Handler>
  }
}
 800109e:	bf00      	nop
 80010a0:	3778      	adds	r7, #120	; 0x78
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	00020022 	.word	0x00020022

080010ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_I2C1_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_I2C1_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_I2C1_Init+0x74>)
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <MX_I2C1_Init+0x7c>)
 80010ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_I2C1_Init+0x74>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_I2C1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_I2C1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_I2C1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <MX_I2C1_Init+0x74>)
 80010e8:	f000 feb0 	bl	8001e4c <HAL_I2C_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010f2:	f000 f923 	bl	800133c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <MX_I2C1_Init+0x74>)
 80010fa:	f001 fc1d 	bl	8002938 <HAL_I2CEx_ConfigAnalogFilter>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001104:	f000 f91a 	bl	800133c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001108:	2100      	movs	r1, #0
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_I2C1_Init+0x74>)
 800110c:	f001 fc5f 	bl	80029ce <HAL_I2CEx_ConfigDigitalFilter>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 f911 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000360 	.word	0x20000360
 8001124:	40005400 	.word	0x40005400
 8001128:	2000090e 	.word	0x2000090e

0800112c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001134:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001138:	f44f 7282 	mov.w	r2, #260	; 0x104
 800113c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001146:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800114a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_SPI1_Init+0x74>)
 800114e:	2202      	movs	r2, #2
 8001150:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001154:	2201      	movs	r2, #1
 8001156:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_SPI1_Init+0x74>)
 800115a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800115e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001162:	2210      	movs	r2, #16
 8001164:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_SPI1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_SPI1_Init+0x74>)
 800117a:	2207      	movs	r2, #7
 800117c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_SPI1_Init+0x74>)
 800118c:	f004 fd68 	bl	8005c60 <HAL_SPI_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001196:	f000 f8d1 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200003b4 	.word	0x200003b4
 80011a4:	40013000 	.word	0x40013000

080011a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <MX_USART2_UART_Init+0x5c>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART2_UART_Init+0x58>)
 80011ec:	f005 fc6e 	bl	8006acc <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011f6:	f000 f8a1 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000418 	.word	0x20000418
 8001204:	40004400 	.word	0x40004400

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	4b45      	ldr	r3, [pc, #276]	; (8001334 <MX_GPIO_Init+0x12c>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a44      	ldr	r2, [pc, #272]	; (8001334 <MX_GPIO_Init+0x12c>)
 8001224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b42      	ldr	r3, [pc, #264]	; (8001334 <MX_GPIO_Init+0x12c>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <MX_GPIO_Init+0x12c>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a3e      	ldr	r2, [pc, #248]	; (8001334 <MX_GPIO_Init+0x12c>)
 800123c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <MX_GPIO_Init+0x12c>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124e:	4b39      	ldr	r3, [pc, #228]	; (8001334 <MX_GPIO_Init+0x12c>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a38      	ldr	r2, [pc, #224]	; (8001334 <MX_GPIO_Init+0x12c>)
 8001254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001258:	6153      	str	r3, [r2, #20]
 800125a:	4b36      	ldr	r3, [pc, #216]	; (8001334 <MX_GPIO_Init+0x12c>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b33      	ldr	r3, [pc, #204]	; (8001334 <MX_GPIO_Init+0x12c>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a32      	ldr	r2, [pc, #200]	; (8001334 <MX_GPIO_Init+0x12c>)
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b30      	ldr	r3, [pc, #192]	; (8001334 <MX_GPIO_Init+0x12c>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <MX_GPIO_Init+0x12c>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a2c      	ldr	r2, [pc, #176]	; (8001334 <MX_GPIO_Init+0x12c>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6153      	str	r3, [r2, #20]
 800128a:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <MX_GPIO_Init+0x12c>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001296:	2200      	movs	r2, #0
 8001298:	f64f 7108 	movw	r1, #65288	; 0xff08
 800129c:	4826      	ldr	r0, [pc, #152]	; (8001338 <MX_GPIO_Init+0x130>)
 800129e:	f000 fda3 	bl	8001de8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
 80012a2:	2335      	movs	r3, #53	; 0x35
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4820      	ldr	r0, [pc, #128]	; (8001338 <MX_GPIO_Init+0x130>)
 80012b8:	f000 fc04 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012bc:	2308      	movs	r3, #8
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4819      	ldr	r0, [pc, #100]	; (8001338 <MX_GPIO_Init+0x130>)
 80012d4:	f000 fbf6 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d8:	2301      	movs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ee:	f000 fbe9 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80012f2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80012f6:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	480b      	ldr	r0, [pc, #44]	; (8001338 <MX_GPIO_Init+0x130>)
 800130c:	f000 fbda 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001310:	2302      	movs	r3, #2
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001314:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <MX_GPIO_Init+0x130>)
 8001326:	f000 fbcd 	bl	8001ac4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	48001000 	.word	0x48001000

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_MspInit+0x44>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_MspInit+0x44>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6193      	str	r3, [r2, #24]
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_MspInit+0x44>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_MspInit+0x44>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_MspInit+0x44>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	61d3      	str	r3, [r2, #28]
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_MspInit+0x44>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800137e:	2007      	movs	r0, #7
 8001380:	f000 fb5e 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_I2C_MspInit+0x7c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d127      	bne.n	8001402 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a16      	ldr	r2, [pc, #88]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013bc:	6153      	str	r3, [r2, #20]
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80013ca:	23c0      	movs	r3, #192	; 0xc0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013da:	2304      	movs	r3, #4
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <HAL_I2C_MspInit+0x84>)
 80013e6:	f000 fb6d 	bl	8001ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_I2C_MspInit+0x80>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40005400 	.word	0x40005400
 8001410:	40021000 	.word	0x40021000
 8001414:	48000400 	.word	0x48000400

08001418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_SPI_MspInit+0x7c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d128      	bne.n	800148c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_SPI_MspInit+0x80>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001444:	6193      	str	r3, [r2, #24]
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800146a:	23e0      	movs	r3, #224	; 0xe0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147a:	2305      	movs	r3, #5
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001488:	f000 fb1c 	bl	8001ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40013000 	.word	0x40013000
 8001498:	40021000 	.word	0x40021000

0800149c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_UART_MspInit+0x7c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d128      	bne.n	8001510 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_UART_MspInit+0x80>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a16      	ldr	r2, [pc, #88]	; (800151c <HAL_UART_MspInit+0x80>)
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_UART_MspInit+0x80>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_UART_MspInit+0x80>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_UART_MspInit+0x80>)
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	6153      	str	r3, [r2, #20]
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_UART_MspInit+0x80>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ee:	230c      	movs	r3, #12
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014fe:	2307      	movs	r3, #7
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150c:	f000 fada 	bl	8001ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40004400 	.word	0x40004400
 800151c:	40021000 	.word	0x40021000

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001524:	e7fe      	b.n	8001524 <NMI_Handler+0x4>

08001526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler+0x4>

08001532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <UsageFault_Handler+0x4>

0800153e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156c:	f000 f954 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800157a:	f001 fb6c 	bl	8002c56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20001170 	.word	0x20001170

08001588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return 1;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_kill>:

int _kill(int pid, int sig)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015a2:	f00b f8ad 	bl	800c700 <__errno>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2216      	movs	r2, #22
 80015aa:	601a      	str	r2, [r3, #0]
  return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_exit>:

void _exit (int status)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ffe7 	bl	8001598 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ca:	e7fe      	b.n	80015ca <_exit+0x12>

080015cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e00a      	b.n	80015f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015de:	f3af 8000 	nop.w
 80015e2:	4601      	mov	r1, r0
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	60ba      	str	r2, [r7, #8]
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbf0      	blt.n	80015de <_read+0x12>
  }

  return len;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	e009      	b.n	800162c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	60ba      	str	r2, [r7, #8]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	dbf1      	blt.n	8001618 <_write+0x12>
  }
  return len;
 8001634:	687b      	ldr	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_close>:

int _close(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001666:	605a      	str	r2, [r3, #4]
  return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_isatty>:

int _isatty(int file)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b0:	4a14      	ldr	r2, [pc, #80]	; (8001704 <_sbrk+0x5c>)
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <_sbrk+0x60>)
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <_sbrk+0x64>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <_sbrk+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d207      	bcs.n	80016e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d8:	f00b f812 	bl	800c700 <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	220c      	movs	r2, #12
 80016e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e009      	b.n	80016fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <_sbrk+0x64>)
 80016f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000a000 	.word	0x2000a000
 8001708:	00000400 	.word	0x00000400
 800170c:	200004a0 	.word	0x200004a0
 8001710:	200017c8 	.word	0x200017c8

08001714 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <SystemInit+0x20>)
 800171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <SystemInit+0x20>)
 8001720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001770 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800173c:	f7ff ffea 	bl	8001714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <LoopForever+0x6>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	; (8001778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <LoopForever+0xe>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	; (8001784 <LoopForever+0x16>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001766:	f00a ffd1 	bl	800c70c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800176a:	f7ff fb15 	bl	8000d98 <main>

0800176e <LoopForever>:

LoopForever:
    b LoopForever
 800176e:	e7fe      	b.n	800176e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001770:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 800177c:	0800ecac 	.word	0x0800ecac
  ldr r2, =_sbss
 8001780:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001784:	200017c8 	.word	0x200017c8

08001788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_2_IRQHandler>
	...

0800178c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_Init+0x28>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_Init+0x28>)
 8001796:	f043 0310 	orr.w	r3, r3, #16
 800179a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 f94f 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f000 f808 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a8:	f7ff fdce 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40022000 	.word	0x40022000

080017b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f967 	bl	8001aaa <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 f92f 	bl	8001a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000000 	.word	0x20000000
 8001810:	20000008 	.word	0x20000008
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000008 	.word	0x20000008
 800183c:	200004a4 	.word	0x200004a4

08001840 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;  
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200004a4 	.word	0x200004a4

08001858 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff ffee 	bl	8001840 <HAL_GetTick>
 8001864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001870:	d005      	beq.n	800187e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_Delay+0x44>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800187e:	bf00      	nop
 8001880:	f7ff ffde 	bl	8001840 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	d8f7      	bhi.n	8001880 <HAL_Delay+0x28>
  {
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008

080018a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018bc:	4013      	ands	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	60d3      	str	r3, [r2, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <__NVIC_GetPriorityGrouping+0x18>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f003 0307 	and.w	r3, r3, #7
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	2b00      	cmp	r3, #0
 8001914:	db0b      	blt.n	800192e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	f003 021f 	and.w	r2, r3, #31
 800191c:	4907      	ldr	r1, [pc, #28]	; (800193c <__NVIC_EnableIRQ+0x38>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	2001      	movs	r0, #1
 8001926:	fa00 f202 	lsl.w	r2, r0, r2
 800192a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a0c:	d301      	bcc.n	8001a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <SysTick_Config+0x40>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f7ff ff8e 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SysTick_Config+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SysTick_Config+0x40>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff29 	bl	80018a0 <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff3e 	bl	80018e8 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ff8e 	bl	8001994 <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff5d 	bl	8001940 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff31 	bl	8001904 <__NVIC_EnableIRQ>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffa2 	bl	80019fc <SysTick_Config>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad2:	e154      	b.n	8001d7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8146 	beq.w	8001d78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d005      	beq.n	8001b04 <HAL_GPIO_Init+0x40>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d130      	bne.n	8001b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	f003 0201 	and.w	r2, r3, #1
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d017      	beq.n	8001ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d123      	bne.n	8001bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	6939      	ldr	r1, [r7, #16]
 8001bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0203 	and.w	r2, r3, #3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80a0 	beq.w	8001d78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c38:	4b58      	ldr	r3, [pc, #352]	; (8001d9c <HAL_GPIO_Init+0x2d8>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a57      	ldr	r2, [pc, #348]	; (8001d9c <HAL_GPIO_Init+0x2d8>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b55      	ldr	r3, [pc, #340]	; (8001d9c <HAL_GPIO_Init+0x2d8>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c50:	4a53      	ldr	r2, [pc, #332]	; (8001da0 <HAL_GPIO_Init+0x2dc>)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c7a:	d019      	beq.n	8001cb0 <HAL_GPIO_Init+0x1ec>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a49      	ldr	r2, [pc, #292]	; (8001da4 <HAL_GPIO_Init+0x2e0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_GPIO_Init+0x1e8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <HAL_GPIO_Init+0x2e4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_GPIO_Init+0x1e4>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a47      	ldr	r2, [pc, #284]	; (8001dac <HAL_GPIO_Init+0x2e8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0x1e0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a46      	ldr	r2, [pc, #280]	; (8001db0 <HAL_GPIO_Init+0x2ec>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_GPIO_Init+0x1dc>
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	e008      	b.n	8001cb2 <HAL_GPIO_Init+0x1ee>
 8001ca0:	2305      	movs	r3, #5
 8001ca2:	e006      	b.n	8001cb2 <HAL_GPIO_Init+0x1ee>
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e004      	b.n	8001cb2 <HAL_GPIO_Init+0x1ee>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e002      	b.n	8001cb2 <HAL_GPIO_Init+0x1ee>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_GPIO_Init+0x1ee>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	f002 0203 	and.w	r2, r2, #3
 8001cb8:	0092      	lsls	r2, r2, #2
 8001cba:	4093      	lsls	r3, r2
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cc2:	4937      	ldr	r1, [pc, #220]	; (8001da0 <HAL_GPIO_Init+0x2dc>)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd0:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cf4:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfa:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d1e:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d48:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d72:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f47f aea3 	bne.w	8001ad4 <HAL_GPIO_Init+0x10>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	48000400 	.word	0x48000400
 8001da8:	48000800 	.word	0x48000800
 8001dac:	48000c00 	.word	0x48000c00
 8001db0:	48001000 	.word	0x48001000
 8001db4:	40010400 	.word	0x40010400

08001db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e001      	b.n	8001dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43d9      	mvns	r1, r3
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	400b      	ands	r3, r1
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e081      	b.n	8001f62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fa8c 	bl	8001390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	; 0x24
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e006      	b.n	8001ed4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ed2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d104      	bne.n	8001ee6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69d9      	ldr	r1, [r3, #28]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	4608      	mov	r0, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	817b      	strh	r3, [r7, #10]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	813b      	strh	r3, [r7, #8]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	f040 80f9 	bne.w	8002186 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_I2C_Mem_Write+0x34>
 8001f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d105      	bne.n	8001fac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0ed      	b.n	8002188 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_I2C_Mem_Write+0x4e>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e0e6      	b.n	8002188 <HAL_I2C_Mem_Write+0x21c>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fc2:	f7ff fc3d 	bl	8001840 <HAL_GetTick>
 8001fc6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2319      	movs	r3, #25
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fac3 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0d1      	b.n	8002188 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2221      	movs	r2, #33	; 0x21
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2240      	movs	r2, #64	; 0x40
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a3a      	ldr	r2, [r7, #32]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002004:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800200c:	88f8      	ldrh	r0, [r7, #6]
 800200e:	893a      	ldrh	r2, [r7, #8]
 8002010:	8979      	ldrh	r1, [r7, #10]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	4603      	mov	r3, r0
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f9d3 	bl	80023c8 <I2C_RequestMemoryWrite>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0a9      	b.n	8002188 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002038:	b29b      	uxth	r3, r3
 800203a:	2bff      	cmp	r3, #255	; 0xff
 800203c:	d90e      	bls.n	800205c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	22ff      	movs	r2, #255	; 0xff
 8002042:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	b2da      	uxtb	r2, r3
 800204a:	8979      	ldrh	r1, [r7, #10]
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fc3d 	bl	80028d4 <I2C_TransferConfig>
 800205a:	e00f      	b.n	800207c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206a:	b2da      	uxtb	r2, r3
 800206c:	8979      	ldrh	r1, [r7, #10]
 800206e:	2300      	movs	r3, #0
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fc2c 	bl	80028d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 fabc 	bl	80025fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e07b      	b.n	8002188 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d034      	beq.n	8002134 <HAL_I2C_Mem_Write+0x1c8>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d130      	bne.n	8002134 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	2200      	movs	r2, #0
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 fa3f 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e04d      	b.n	8002188 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2bff      	cmp	r3, #255	; 0xff
 80020f4:	d90e      	bls.n	8002114 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	22ff      	movs	r2, #255	; 0xff
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	b2da      	uxtb	r2, r3
 8002102:	8979      	ldrh	r1, [r7, #10]
 8002104:	2300      	movs	r3, #0
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 fbe1 	bl	80028d4 <I2C_TransferConfig>
 8002112:	e00f      	b.n	8002134 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	b2da      	uxtb	r2, r3
 8002124:	8979      	ldrh	r1, [r7, #10]
 8002126:	2300      	movs	r3, #0
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fbd0 	bl	80028d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d19e      	bne.n	800207c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 faa2 	bl	800268c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e01a      	b.n	8002188 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2220      	movs	r2, #32
 8002158:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_I2C_Mem_Write+0x224>)
 8002166:	400b      	ands	r3, r1
 8002168:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002186:	2302      	movs	r3, #2
  }
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	fe00e800 	.word	0xfe00e800

08002194 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	4608      	mov	r0, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	817b      	strh	r3, [r7, #10]
 80021a6:	460b      	mov	r3, r1
 80021a8:	813b      	strh	r3, [r7, #8]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	f040 80fd 	bne.w	80023b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_I2C_Mem_Read+0x34>
 80021c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0f1      	b.n	80023b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_I2C_Mem_Read+0x4e>
 80021de:	2302      	movs	r3, #2
 80021e0:	e0ea      	b.n	80023b8 <HAL_I2C_Mem_Read+0x224>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021ea:	f7ff fb29 	bl	8001840 <HAL_GetTick>
 80021ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2319      	movs	r3, #25
 80021f6:	2201      	movs	r2, #1
 80021f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 f9af 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0d5      	b.n	80023b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2222      	movs	r2, #34	; 0x22
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a3a      	ldr	r2, [r7, #32]
 8002226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002234:	88f8      	ldrh	r0, [r7, #6]
 8002236:	893a      	ldrh	r2, [r7, #8]
 8002238:	8979      	ldrh	r1, [r7, #10]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4603      	mov	r3, r0
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f913 	bl	8002470 <I2C_RequestMemoryRead>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0ad      	b.n	80023b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2bff      	cmp	r3, #255	; 0xff
 8002264:	d90e      	bls.n	8002284 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	22ff      	movs	r2, #255	; 0xff
 800226a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	b2da      	uxtb	r2, r3
 8002272:	8979      	ldrh	r1, [r7, #10]
 8002274:	4b52      	ldr	r3, [pc, #328]	; (80023c0 <HAL_I2C_Mem_Read+0x22c>)
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fb29 	bl	80028d4 <I2C_TransferConfig>
 8002282:	e00f      	b.n	80022a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002292:	b2da      	uxtb	r2, r3
 8002294:	8979      	ldrh	r1, [r7, #10]
 8002296:	4b4a      	ldr	r3, [pc, #296]	; (80023c0 <HAL_I2C_Mem_Read+0x22c>)
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 fb18 	bl	80028d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	2200      	movs	r2, #0
 80022ac:	2104      	movs	r1, #4
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f956 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e07c      	b.n	80023b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d034      	beq.n	8002364 <HAL_I2C_Mem_Read+0x1d0>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d130      	bne.n	8002364 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	2200      	movs	r2, #0
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f927 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e04d      	b.n	80023b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2bff      	cmp	r3, #255	; 0xff
 8002324:	d90e      	bls.n	8002344 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	22ff      	movs	r2, #255	; 0xff
 800232a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	b2da      	uxtb	r2, r3
 8002332:	8979      	ldrh	r1, [r7, #10]
 8002334:	2300      	movs	r3, #0
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fac9 	bl	80028d4 <I2C_TransferConfig>
 8002342:	e00f      	b.n	8002364 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	b2da      	uxtb	r2, r3
 8002354:	8979      	ldrh	r1, [r7, #10]
 8002356:	2300      	movs	r3, #0
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fab8 	bl	80028d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d19a      	bne.n	80022a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f98a 	bl	800268c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e01a      	b.n	80023b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2220      	movs	r2, #32
 8002388:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_I2C_Mem_Read+0x230>)
 8002396:	400b      	ands	r3, r1
 8002398:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e000      	b.n	80023b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80023b6:	2302      	movs	r3, #2
  }
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	80002400 	.word	0x80002400
 80023c4:	fe00e800 	.word	0xfe00e800

080023c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	4608      	mov	r0, r1
 80023d2:	4611      	mov	r1, r2
 80023d4:	461a      	mov	r2, r3
 80023d6:	4603      	mov	r3, r0
 80023d8:	817b      	strh	r3, [r7, #10]
 80023da:	460b      	mov	r3, r1
 80023dc:	813b      	strh	r3, [r7, #8]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	8979      	ldrh	r1, [r7, #10]
 80023e8:	4b20      	ldr	r3, [pc, #128]	; (800246c <I2C_RequestMemoryWrite+0xa4>)
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fa6f 	bl	80028d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	69b9      	ldr	r1, [r7, #24]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f8ff 	bl	80025fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e02c      	b.n	8002464 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002410:	893b      	ldrh	r3, [r7, #8]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	629a      	str	r2, [r3, #40]	; 0x28
 800241a:	e015      	b.n	8002448 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800241c:	893b      	ldrh	r3, [r7, #8]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	b29b      	uxth	r3, r3
 8002422:	b2da      	uxtb	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	69b9      	ldr	r1, [r7, #24]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f8e5 	bl	80025fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e012      	b.n	8002464 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800243e:	893b      	ldrh	r3, [r7, #8]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2200      	movs	r2, #0
 8002450:	2180      	movs	r1, #128	; 0x80
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f884 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	80002000 	.word	0x80002000

08002470 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4603      	mov	r3, r0
 8002480:	817b      	strh	r3, [r7, #10]
 8002482:	460b      	mov	r3, r1
 8002484:	813b      	strh	r3, [r7, #8]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	8979      	ldrh	r1, [r7, #10]
 8002490:	4b20      	ldr	r3, [pc, #128]	; (8002514 <I2C_RequestMemoryRead+0xa4>)
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2300      	movs	r3, #0
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fa1c 	bl	80028d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	69b9      	ldr	r1, [r7, #24]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f8ac 	bl	80025fe <I2C_WaitOnTXISFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e02c      	b.n	800250a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d105      	bne.n	80024c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024b6:	893b      	ldrh	r3, [r7, #8]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
 80024c0:	e015      	b.n	80024ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024c2:	893b      	ldrh	r3, [r7, #8]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	69b9      	ldr	r1, [r7, #24]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f892 	bl	80025fe <I2C_WaitOnTXISFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e012      	b.n	800250a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024e4:	893b      	ldrh	r3, [r7, #8]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2200      	movs	r2, #0
 80024f6:	2140      	movs	r1, #64	; 0x40
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f831 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	80002000 	.word	0x80002000

08002518 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b02      	cmp	r3, #2
 800252c:	d103      	bne.n	8002536 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d007      	beq.n	8002554 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	619a      	str	r2, [r3, #24]
  }
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002570:	e031      	b.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d02d      	beq.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257a:	f7ff f961 	bl	8001840 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d302      	bcc.n	8002590 <I2C_WaitOnFlagUntilTimeout+0x30>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d122      	bne.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4013      	ands	r3, r2
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	429a      	cmp	r2, r3
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d113      	bne.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f043 0220 	orr.w	r2, r3, #32
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00f      	b.n	80025f6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4013      	ands	r3, r2
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d0be      	beq.n	8002572 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800260a:	e033      	b.n	8002674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f87f 	bl	8002714 <I2C_IsErrorOccurred>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e031      	b.n	8002684 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002626:	d025      	beq.n	8002674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002628:	f7ff f90a 	bl	8001840 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	429a      	cmp	r2, r3
 8002636:	d302      	bcc.n	800263e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d11a      	bne.n	8002674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b02      	cmp	r3, #2
 800264a:	d013      	beq.n	8002674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e007      	b.n	8002684 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d1c4      	bne.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002698:	e02f      	b.n	80026fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f838 	bl	8002714 <I2C_IsErrorOccurred>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e02d      	b.n	800270a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7ff f8c7 	bl	8001840 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d11a      	bne.n	80026fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d013      	beq.n	80026fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f043 0220 	orr.w	r2, r3, #32
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e007      	b.n	800270a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b20      	cmp	r3, #32
 8002706:	d1c8      	bne.n	800269a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d068      	beq.n	8002812 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2210      	movs	r2, #16
 8002746:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002748:	e049      	b.n	80027de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d045      	beq.n	80027de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002752:	f7ff f875 	bl	8001840 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <I2C_IsErrorOccurred+0x54>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d13a      	bne.n	80027de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002772:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800277a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800278a:	d121      	bne.n	80027d0 <I2C_IsErrorOccurred+0xbc>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002792:	d01d      	beq.n	80027d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b20      	cmp	r3, #32
 8002798:	d01a      	beq.n	80027d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027aa:	f7ff f849 	bl	8001840 <HAL_GetTick>
 80027ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b0:	e00e      	b.n	80027d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027b2:	f7ff f845 	bl	8001840 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b19      	cmp	r3, #25
 80027be:	d907      	bls.n	80027d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f043 0320 	orr.w	r3, r3, #32
 80027c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80027ce:	e006      	b.n	80027de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d1e9      	bne.n	80027b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d003      	beq.n	80027f4 <I2C_IsErrorOccurred+0xe0>
 80027ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0aa      	beq.n	800274a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d103      	bne.n	8002804 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2220      	movs	r2, #32
 8002802:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00b      	beq.n	800283c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002834:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002856:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00b      	beq.n	8002880 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002878:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01c      	beq.n	80028c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff fe45 	bl	8002518 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <I2C_IsErrorOccurred+0x1bc>)
 800289a:	400b      	ands	r3, r1
 800289c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80028c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3728      	adds	r7, #40	; 0x28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	fe00e800 	.word	0xfe00e800

080028d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	817b      	strh	r3, [r7, #10]
 80028e2:	4613      	mov	r3, r2
 80028e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028e6:	897b      	ldrh	r3, [r7, #10]
 80028e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028ec:	7a7b      	ldrb	r3, [r7, #9]
 80028ee:	041b      	lsls	r3, r3, #16
 80028f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002902:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	0d5b      	lsrs	r3, r3, #21
 800290e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <I2C_TransferConfig+0x60>)
 8002914:	430b      	orrs	r3, r1
 8002916:	43db      	mvns	r3, r3
 8002918:	ea02 0103 	and.w	r1, r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	03ff63ff 	.word	0x03ff63ff

08002938 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b20      	cmp	r3, #32
 800294c:	d138      	bne.n	80029c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002958:	2302      	movs	r3, #2
 800295a:	e032      	b.n	80029c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2224      	movs	r2, #36	; 0x24
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800298a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e000      	b.n	80029c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d139      	bne.n	8002a58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e033      	b.n	8002a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2224      	movs	r2, #36	; 0x24
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a68:	b08b      	sub	sp, #44	; 0x2c
 8002a6a:	af06      	add	r7, sp, #24
 8002a6c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0c4      	b.n	8002c02 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d106      	bne.n	8002a92 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f008 fd6f 	bl	800b570 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2203      	movs	r2, #3
 8002a96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 fcec 	bl	800747c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e040      	b.n	8002b2c <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	3301      	adds	r3, #1
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3303      	adds	r3, #3
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	3338      	adds	r3, #56	; 0x38
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	333c      	adds	r3, #60	; 0x3c
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	3340      	adds	r3, #64	; 0x40
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d3b9      	bcc.n	8002aaa <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	e044      	b.n	8002bc6 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d3b5      	bcc.n	8002b3c <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	687e      	ldr	r6, [r7, #4]
 8002bd8:	466d      	mov	r5, sp
 8002bda:	f106 0410 	add.w	r4, r6, #16
 8002bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	602b      	str	r3, [r5, #0]
 8002be6:	1d33      	adds	r3, r6, #4
 8002be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bea:	6838      	ldr	r0, [r7, #0]
 8002bec:	f004 fc61 	bl	80074b2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_PCD_Start+0x16>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e016      	b.n	8002c4e <HAL_PCD_Start+0x44>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f004 fc0e 	bl	800744e <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c32:	2101      	movs	r1, #1
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f008 ff39 	bl	800baac <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f006 fecd 	bl	80099de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f006 fec6 	bl	80099f4 <USB_ReadInterrupts>
 8002c68:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fab2 	bl	80031de <PCD_EP_ISR_Handler>

    return;
 8002c7a:	e0bd      	b.n	8002df8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d013      	beq.n	8002cae <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c98:	b292      	uxth	r2, r2
 8002c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f008 fd07 	bl	800b6b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f8a9 	bl	8002dfe <HAL_PCD_SetAddress>

    return;
 8002cac:	e0a4      	b.n	8002df8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00c      	beq.n	8002cd2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cca:	b292      	uxth	r2, r2
 8002ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002cd0:	e092      	b.n	8002df8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00c      	beq.n	8002cf6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cee:	b292      	uxth	r2, r2
 8002cf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002cf4:	e080      	b.n	8002df8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d027      	beq.n	8002d50 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0204 	bic.w	r2, r2, #4
 8002d12:	b292      	uxth	r2, r2
 8002d14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0208 	bic.w	r2, r2, #8
 8002d2a:	b292      	uxth	r2, r2
 8002d2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f008 fcf7 	bl	800b724 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d48:	b292      	uxth	r2, r2
 8002d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002d4e:	e053      	b.n	8002df8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d027      	beq.n	8002daa <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0208 	orr.w	r2, r2, #8
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d84:	b292      	uxth	r2, r2
 8002d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0204 	orr.w	r2, r2, #4
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f008 fca4 	bl	800b6f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002da8:	e026      	b.n	8002df8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00f      	beq.n	8002dd4 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dc6:	b292      	uxth	r2, r2
 8002dc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f008 fc62 	bl	800b696 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002dd2:	e011      	b.n	8002df8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df0:	b292      	uxth	r2, r2
 8002df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002df6:	bf00      	nop
  }
}
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_PCD_SetAddress+0x1a>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e013      	b.n	8002e40 <HAL_PCD_SetAddress+0x42>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f006 fdc0 	bl	80099b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	4608      	mov	r0, r1
 8002e52:	4611      	mov	r1, r2
 8002e54:	461a      	mov	r2, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	70fb      	strb	r3, [r7, #3]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	803b      	strh	r3, [r7, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da0e      	bge.n	8002e8c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	705a      	strb	r2, [r3, #1]
 8002e8a:	e00e      	b.n	8002eaa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	f003 0207 	and.w	r2, r3, #7
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eb6:	883a      	ldrh	r2, [r7, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	78ba      	ldrb	r2, [r7, #2]
 8002ec0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ec2:	78bb      	ldrb	r3, [r7, #2]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d102      	bne.n	8002ece <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_PCD_EP_Open+0x94>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e00e      	b.n	8002efa <HAL_PCD_EP_Open+0xb2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f004 fb02 	bl	80074f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da0e      	bge.n	8002f34 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
 8002f32:	e00e      	b.n	8002f52 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 0207 	and.w	r2, r3, #7
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_PCD_EP_Close+0x6a>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e00e      	b.n	8002f8a <HAL_PCD_EP_Close+0x88>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 fe7e 	bl	8007c7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa2:	7afb      	ldrb	r3, [r7, #11]
 8002fa4:	f003 0207 	and.w	r2, r3, #7
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd2:	7afb      	ldrb	r3, [r7, #11]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6979      	ldr	r1, [r7, #20]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f005 f836 	bl	8008056 <USB_EPStartXfer>

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 0207 	and.w	r2, r3, #7
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	440b      	add	r3, r1
 8003012:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	460b      	mov	r3, r1
 8003032:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003034:	7afb      	ldrb	r3, [r7, #11]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2201      	movs	r2, #1
 800306e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	b2da      	uxtb	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6979      	ldr	r1, [r7, #20]
 8003082:	4618      	mov	r0, r3
 8003084:	f004 ffe7 	bl	8008056 <USB_EPStartXfer>

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 0207 	and.w	r2, r3, #7
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d901      	bls.n	80030b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e03e      	b.n	800312e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da0e      	bge.n	80030d6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	705a      	strb	r2, [r3, #1]
 80030d4:	e00c      	b.n	80030f0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_PCD_EP_SetStall+0x7e>
 800310c:	2302      	movs	r3, #2
 800310e:	e00e      	b.n	800312e <HAL_PCD_EP_SetStall+0x9c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f006 fb4a 	bl	80097b8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 020f 	and.w	r2, r3, #15
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d901      	bls.n	8003154 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e040      	b.n	80031d6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003158:	2b00      	cmp	r3, #0
 800315a:	da0e      	bge.n	800317a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	705a      	strb	r2, [r3, #1]
 8003178:	e00e      	b.n	8003198 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	f003 0207 	and.w	r2, r3, #7
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_PCD_EP_ClrStall+0x82>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e00e      	b.n	80031d6 <HAL_PCD_EP_ClrStall+0xa0>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f006 fb47 	bl	800985a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b096      	sub	sp, #88	; 0x58
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031e6:	e3bf      	b.n	8003968 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80031f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003202:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 8179 	bne.w	80034fe <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800320c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d152      	bne.n	80032be <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003228:	81fb      	strh	r3, [r7, #14]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	89fb      	ldrh	r3, [r7, #14]
 8003230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003238:	b29b      	uxth	r3, r3
 800323a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3328      	adds	r3, #40	; 0x28
 8003240:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	3302      	adds	r3, #2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800326a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800326e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	441a      	add	r2, r3
 8003278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800327c:	2100      	movs	r1, #0
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f008 f9ef 	bl	800b662 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 836b 	beq.w	8003968 <PCD_EP_ISR_Handler+0x78a>
 8003292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 8366 	bne.w	8003968 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b292      	uxth	r2, r2
 80032b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032bc:	e354      	b.n	8003968 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032c4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80032d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d034      	beq.n	8003346 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	3306      	adds	r3, #6
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003306:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003314:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003318:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800331a:	b29b      	uxth	r3, r3
 800331c:	f006 fbc0 	bl	8009aa0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29a      	uxth	r2, r3
 8003328:	f640 738f 	movw	r3, #3983	; 0xf8f
 800332c:	4013      	ands	r3, r2
 800332e:	823b      	strh	r3, [r7, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	8a3a      	ldrh	r2, [r7, #16]
 8003336:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800333a:	b292      	uxth	r2, r2
 800333c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f008 f962 	bl	800b608 <HAL_PCD_SetupStageCallback>
 8003344:	e310      	b.n	8003968 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003346:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800334a:	2b00      	cmp	r3, #0
 800334c:	f280 830c 	bge.w	8003968 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	b29a      	uxth	r2, r3
 8003358:	f640 738f 	movw	r3, #3983	; 0xf8f
 800335c:	4013      	ands	r3, r2
 800335e:	83fb      	strh	r3, [r7, #30]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	8bfa      	ldrh	r2, [r7, #30]
 8003366:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800336a:	b292      	uxth	r2, r2
 800336c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003376:	b29b      	uxth	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	3306      	adds	r3, #6
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003398:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800339a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d019      	beq.n	80033d6 <PCD_EP_ISR_Handler+0x1f8>
 80033a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d015      	beq.n	80033d6 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b0:	6959      	ldr	r1, [r3, #20]
 80033b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80033b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f006 fb70 	bl	8009aa0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80033c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	441a      	add	r2, r3
 80033ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033cc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80033ce:	2100      	movs	r1, #0
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f008 f92b 	bl	800b62c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80033e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 82bd 	bne.w	8003968 <PCD_EP_ISR_Handler+0x78a>
 80033ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033fa:	f000 82b5 	beq.w	8003968 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340c:	b29b      	uxth	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	4413      	add	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003428:	b29a      	uxth	r2, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	801a      	strh	r2, [r3, #0]
 800342e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b3e      	cmp	r3, #62	; 0x3e
 8003434:	d91d      	bls.n	8003472 <PCD_EP_ISR_Handler+0x294>
 8003436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	647b      	str	r3, [r7, #68]	; 0x44
 800343e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	2b00      	cmp	r3, #0
 8003448:	d102      	bne.n	8003450 <PCD_EP_ISR_Handler+0x272>
 800344a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344c:	3b01      	subs	r3, #1
 800344e:	647b      	str	r3, [r7, #68]	; 0x44
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	b29a      	uxth	r2, r3
 8003456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003458:	b29b      	uxth	r3, r3
 800345a:	029b      	lsls	r3, r3, #10
 800345c:	b29b      	uxth	r3, r3
 800345e:	4313      	orrs	r3, r2
 8003460:	b29b      	uxth	r3, r3
 8003462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800346a:	b29a      	uxth	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	801a      	strh	r2, [r3, #0]
 8003470:	e026      	b.n	80034c0 <PCD_EP_ISR_Handler+0x2e2>
 8003472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <PCD_EP_ISR_Handler+0x2b2>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003488:	b29a      	uxth	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	801a      	strh	r2, [r3, #0]
 800348e:	e017      	b.n	80034c0 <PCD_EP_ISR_Handler+0x2e2>
 8003490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	647b      	str	r3, [r7, #68]	; 0x44
 8003498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <PCD_EP_ISR_Handler+0x2cc>
 80034a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a6:	3301      	adds	r3, #1
 80034a8:	647b      	str	r3, [r7, #68]	; 0x44
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	029b      	lsls	r3, r3, #10
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	827b      	strh	r3, [r7, #18]
 80034d2:	8a7b      	ldrh	r3, [r7, #18]
 80034d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80034d8:	827b      	strh	r3, [r7, #18]
 80034da:	8a7b      	ldrh	r3, [r7, #18]
 80034dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034e0:	827b      	strh	r3, [r7, #18]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	8a7b      	ldrh	r3, [r7, #18]
 80034e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	8013      	strh	r3, [r2, #0]
 80034fc:	e234      	b.n	8003968 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003512:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003516:	2b00      	cmp	r3, #0
 8003518:	f280 80fc 	bge.w	8003714 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b29a      	uxth	r2, r3
 800352e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003532:	4013      	ands	r3, r2
 8003534:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800354a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800354e:	b292      	uxth	r2, r2
 8003550:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003552:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800356a:	7b1b      	ldrb	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d125      	bne.n	80035bc <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003578:	b29b      	uxth	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	3306      	adds	r3, #6
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003598:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800359c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8092 	beq.w	80036ca <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ac:	6959      	ldr	r1, [r3, #20]
 80035ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b0:	88da      	ldrh	r2, [r3, #6]
 80035b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035b6:	f006 fa73 	bl	8009aa0 <USB_ReadPMA>
 80035ba:	e086      	b.n	80036ca <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80035bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035be:	78db      	ldrb	r3, [r3, #3]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d10a      	bne.n	80035da <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80035c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035c8:	461a      	mov	r2, r3
 80035ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f9d9 	bl	8003984 <HAL_PCD_EP_DB_Receive>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80035d8:	e077      	b.n	80036ca <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	441a      	add	r2, r3
 8003606:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800360a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800360e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003616:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800361a:	b29b      	uxth	r3, r3
 800361c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d024      	beq.n	8003682 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003640:	b29b      	uxth	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	3302      	adds	r3, #2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003660:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003664:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003668:	2b00      	cmp	r3, #0
 800366a:	d02e      	beq.n	80036ca <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003672:	6959      	ldr	r1, [r3, #20]
 8003674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003676:	891a      	ldrh	r2, [r3, #8]
 8003678:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800367c:	f006 fa10 	bl	8009aa0 <USB_ReadPMA>
 8003680:	e023      	b.n	80036ca <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	3306      	adds	r3, #6
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80036ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036bc:	6959      	ldr	r1, [r3, #20]
 80036be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c0:	895a      	ldrh	r2, [r3, #10]
 80036c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036c6:	f006 f9eb 	bl	8009aa0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80036ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036d2:	441a      	add	r2, r3
 80036d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80036d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036e0:	441a      	add	r2, r3
 80036e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80036e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <PCD_EP_ISR_Handler+0x51c>
 80036ee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80036f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d206      	bcs.n	8003708 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80036fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	4619      	mov	r1, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f007 ff93 	bl	800b62c <HAL_PCD_DataOutStageCallback>
 8003706:	e005      	b.n	8003714 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800370e:	4618      	mov	r0, r3
 8003710:	f004 fca1 	bl	8008056 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003714:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8123 	beq.w	8003968 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003722:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4413      	add	r3, r2
 8003734:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800374c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003750:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	441a      	add	r2, r3
 8003762:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800376a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800376e:	b29b      	uxth	r3, r3
 8003770:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003774:	78db      	ldrb	r3, [r3, #3]
 8003776:	2b01      	cmp	r3, #1
 8003778:	f040 80a2 	bne.w	80038c0 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800377c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377e:	2200      	movs	r2, #0
 8003780:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003784:	7b1b      	ldrb	r3, [r3, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8093 	beq.w	80038b2 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800378c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d046      	beq.n	8003826 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379a:	785b      	ldrb	r3, [r3, #1]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d126      	bne.n	80037ee <PCD_EP_ISR_Handler+0x610>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	4413      	add	r3, r2
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
 80037b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	011a      	lsls	r2, r3, #4
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	4413      	add	r3, r2
 80037c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037c6:	623b      	str	r3, [r7, #32]
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	801a      	strh	r2, [r3, #0]
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	801a      	strh	r2, [r3, #0]
 80037ec:	e061      	b.n	80038b2 <PCD_EP_ISR_Handler+0x6d4>
 80037ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f0:	785b      	ldrb	r3, [r3, #1]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d15d      	bne.n	80038b2 <PCD_EP_ISR_Handler+0x6d4>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003804:	b29b      	uxth	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	4413      	add	r3, r2
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	011a      	lsls	r2, r3, #4
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	4413      	add	r3, r2
 8003818:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	2200      	movs	r2, #0
 8003822:	801a      	strh	r2, [r3, #0]
 8003824:	e045      	b.n	80038b2 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382e:	785b      	ldrb	r3, [r3, #1]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d126      	bne.n	8003882 <PCD_EP_ISR_Handler+0x6a4>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003842:	b29b      	uxth	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003848:	4413      	add	r3, r2
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
 800384c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	011a      	lsls	r2, r3, #4
 8003852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003854:	4413      	add	r3, r2
 8003856:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003866:	b29a      	uxth	r2, r3
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	801a      	strh	r2, [r3, #0]
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387a:	b29a      	uxth	r2, r3
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	801a      	strh	r2, [r3, #0]
 8003880:	e017      	b.n	80038b2 <PCD_EP_ISR_Handler+0x6d4>
 8003882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003884:	785b      	ldrb	r3, [r3, #1]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d113      	bne.n	80038b2 <PCD_EP_ISR_Handler+0x6d4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003898:	4413      	add	r3, r2
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	011a      	lsls	r2, r3, #4
 80038a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a4:	4413      	add	r3, r2
 80038a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	2200      	movs	r2, #0
 80038b0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f007 fed2 	bl	800b662 <HAL_PCD_DataInStageCallback>
 80038be:	e053      	b.n	8003968 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80038c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d146      	bne.n	800395a <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	3302      	adds	r3, #2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80038f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fa:	699a      	ldr	r2, [r3, #24]
 80038fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003900:	429a      	cmp	r2, r3
 8003902:	d907      	bls.n	8003914 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800390c:	1ad2      	subs	r2, r2, r3
 800390e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003910:	619a      	str	r2, [r3, #24]
 8003912:	e002      	b.n	800391a <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003916:	2200      	movs	r2, #0
 8003918:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800391a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f007 fe9a 	bl	800b662 <HAL_PCD_DataInStageCallback>
 800392e:	e01b      	b.n	8003968 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003938:	441a      	add	r2, r3
 800393a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800393e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003946:	441a      	add	r2, r3
 8003948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800394a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003952:	4618      	mov	r0, r3
 8003954:	f004 fb7f 	bl	8008056 <USB_EPStartXfer>
 8003958:	e006      	b.n	8003968 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800395a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800395e:	461a      	mov	r2, r3
 8003960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f91b 	bl	8003b9e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003970:	b29b      	uxth	r3, r3
 8003972:	b21b      	sxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	f6ff ac37 	blt.w	80031e8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3758      	adds	r7, #88	; 0x58
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d07e      	beq.n	8003a9a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	3302      	adds	r3, #2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	8b7b      	ldrh	r3, [r7, #26]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d306      	bcc.n	80039de <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	8b7b      	ldrh	r3, [r7, #26]
 80039d6:	1ad2      	subs	r2, r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	619a      	str	r2, [r3, #24]
 80039dc:	e002      	b.n	80039e4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2200      	movs	r2, #0
 80039e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d123      	bne.n	8003a34 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a06:	833b      	strh	r3, [r7, #24]
 8003a08:	8b3b      	ldrh	r3, [r7, #24]
 8003a0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a0e:	833b      	strh	r3, [r7, #24]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	8b3b      	ldrh	r3, [r7, #24]
 8003a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01f      	beq.n	8003a7e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a58:	82fb      	strh	r3, [r7, #22]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	441a      	add	r2, r3
 8003a68:	8afb      	ldrh	r3, [r7, #22]
 8003a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a7e:	8b7b      	ldrh	r3, [r7, #26]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8087 	beq.w	8003b94 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6959      	ldr	r1, [r3, #20]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	891a      	ldrh	r2, [r3, #8]
 8003a92:	8b7b      	ldrh	r3, [r7, #26]
 8003a94:	f006 f804 	bl	8009aa0 <USB_ReadPMA>
 8003a98:	e07c      	b.n	8003b94 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	3306      	adds	r3, #6
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	8b7b      	ldrh	r3, [r7, #26]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d306      	bcc.n	8003adc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	8b7b      	ldrh	r3, [r7, #26]
 8003ad4:	1ad2      	subs	r2, r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	619a      	str	r2, [r3, #24]
 8003ada:	e002      	b.n	8003ae2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d123      	bne.n	8003b32 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b04:	83fb      	strh	r3, [r7, #30]
 8003b06:	8bfb      	ldrh	r3, [r7, #30]
 8003b08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b0c:	83fb      	strh	r3, [r7, #30]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	441a      	add	r2, r3
 8003b1c:	8bfb      	ldrh	r3, [r7, #30]
 8003b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d11f      	bne.n	8003b7c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	83bb      	strh	r3, [r7, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	441a      	add	r2, r3
 8003b66:	8bbb      	ldrh	r3, [r7, #28]
 8003b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b7c:	8b7b      	ldrh	r3, [r7, #26]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6959      	ldr	r1, [r3, #20]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	895a      	ldrh	r2, [r3, #10]
 8003b8e:	8b7b      	ldrh	r3, [r7, #26]
 8003b90:	f005 ff86 	bl	8009aa0 <USB_ReadPMA>
    }
  }

  return count;
 8003b94:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b0a4      	sub	sp, #144	; 0x90
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 81dd 	beq.w	8003f72 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3302      	adds	r3, #2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d907      	bls.n	8003c00 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003bf8:	1ad2      	subs	r2, r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	619a      	str	r2, [r3, #24]
 8003bfe:	e002      	b.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2200      	movs	r2, #0
 8003c04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f040 80b9 	bne.w	8003d82 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	785b      	ldrb	r3, [r3, #1]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d126      	bne.n	8003c66 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	4413      	add	r3, r2
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	011a      	lsls	r2, r3, #4
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	4413      	add	r3, r2
 8003c3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	801a      	strh	r2, [r3, #0]
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	e01a      	b.n	8003c9c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	785b      	ldrb	r3, [r3, #1]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d116      	bne.n	8003c9c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	637b      	str	r3, [r7, #52]	; 0x34
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c82:	4413      	add	r3, r2
 8003c84:	637b      	str	r3, [r7, #52]	; 0x34
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	011a      	lsls	r2, r3, #4
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	4413      	add	r3, r2
 8003c90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	2200      	movs	r2, #0
 8003c9a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	785b      	ldrb	r3, [r3, #1]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d126      	bne.n	8003cf8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	011a      	lsls	r2, r3, #4
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	801a      	strh	r2, [r3, #0]
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	e017      	b.n	8003d28 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	785b      	ldrb	r3, [r3, #1]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d113      	bne.n	8003d28 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	4413      	add	r3, r2
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	011a      	lsls	r2, r3, #4
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	2200      	movs	r2, #0
 8003d26:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f007 fc97 	bl	800b662 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 82fc 	beq.w	8004338 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	82fb      	strh	r3, [r7, #22]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	441a      	add	r2, r3
 8003d6a:	8afb      	ldrh	r3, [r7, #22]
 8003d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	8013      	strh	r3, [r2, #0]
 8003d80:	e2da      	b.n	8004338 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d021      	beq.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	441a      	add	r2, r3
 8003db8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	f040 82ae 	bne.w	8004338 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003de4:	441a      	add	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003df2:	441a      	add	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	6a1a      	ldr	r2, [r3, #32]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d30b      	bcc.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e14:	1ad2      	subs	r2, r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	621a      	str	r2, [r3, #32]
 8003e1a:	e017      	b.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d108      	bne.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003e24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e34:	e00a      	b.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d165      	bne.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x382>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e68:	4413      	add	r3, r2
 8003e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	011a      	lsls	r2, r3, #4
 8003e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e74:	4413      	add	r3, r2
 8003e76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e90:	2b3e      	cmp	r3, #62	; 0x3e
 8003e92:	d91d      	bls.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x332>
 8003e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <HAL_PCD_EP_DB_Transmit+0x310>
 8003ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	029b      	lsls	r3, r3, #10
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	801a      	strh	r2, [r3, #0]
 8003ece:	e044      	b.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <HAL_PCD_EP_DB_Transmit+0x350>
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	e035      	b.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f04:	3301      	adds	r3, #1
 8003f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	029b      	lsls	r3, r3, #10
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4313      	orrs	r3, r2
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	e01c      	b.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	785b      	ldrb	r3, [r3, #1]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d118      	bne.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3c:	4413      	add	r3, r2
 8003f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	011a      	lsls	r2, r3, #4
 8003f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f48:	4413      	add	r3, r2
 8003f4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f58:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	6959      	ldr	r1, [r3, #20]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	891a      	ldrh	r2, [r3, #8]
 8003f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f005 fd52 	bl	8009a14 <USB_WritePMA>
 8003f70:	e1e2      	b.n	8004338 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	3306      	adds	r3, #6
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f9a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d307      	bcc.n	8003fba <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fb2:	1ad2      	subs	r2, r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	619a      	str	r2, [r3, #24]
 8003fb8:	e002      	b.n	8003fc0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f040 80c0 	bne.w	800414a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	785b      	ldrb	r3, [r3, #1]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d126      	bne.n	8004020 <HAL_PCD_EP_DB_Transmit+0x482>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fe6:	4413      	add	r3, r2
 8003fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	011a      	lsls	r2, r3, #4
 8003ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ff8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004004:	b29a      	uxth	r2, r3
 8004006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	b29b      	uxth	r3, r3
 8004010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004018:	b29a      	uxth	r2, r3
 800401a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401c:	801a      	strh	r2, [r3, #0]
 800401e:	e01a      	b.n	8004056 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	785b      	ldrb	r3, [r3, #1]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d116      	bne.n	8004056 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	667b      	str	r3, [r7, #100]	; 0x64
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800403c:	4413      	add	r3, r2
 800403e:	667b      	str	r3, [r7, #100]	; 0x64
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	011a      	lsls	r2, r3, #4
 8004046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004048:	4413      	add	r3, r2
 800404a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800404e:	663b      	str	r3, [r7, #96]	; 0x60
 8004050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004052:	2200      	movs	r2, #0
 8004054:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	677b      	str	r3, [r7, #116]	; 0x74
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d12b      	bne.n	80040bc <HAL_PCD_EP_DB_Transmit+0x51e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	66fb      	str	r3, [r7, #108]	; 0x6c
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004072:	b29b      	uxth	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004078:	4413      	add	r3, r2
 800407a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	011a      	lsls	r2, r3, #4
 8004082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004084:	4413      	add	r3, r2
 8004086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800408a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800408e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800409a:	b29a      	uxth	r2, r3
 800409c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a0:	801a      	strh	r2, [r3, #0]
 80040a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040b8:	801a      	strh	r2, [r3, #0]
 80040ba:	e017      	b.n	80040ec <HAL_PCD_EP_DB_Transmit+0x54e>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	785b      	ldrb	r3, [r3, #1]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d113      	bne.n	80040ec <HAL_PCD_EP_DB_Transmit+0x54e>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d2:	4413      	add	r3, r2
 80040d4:	677b      	str	r3, [r7, #116]	; 0x74
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	011a      	lsls	r2, r3, #4
 80040dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040de:	4413      	add	r3, r2
 80040e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040e4:	673b      	str	r3, [r7, #112]	; 0x70
 80040e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e8:	2200      	movs	r2, #0
 80040ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	4619      	mov	r1, r3
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f007 fab5 	bl	800b662 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 811a 	bne.w	8004338 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	441a      	add	r2, r3
 8004130:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800413c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004144:	b29b      	uxth	r3, r3
 8004146:	8013      	strh	r3, [r2, #0]
 8004148:	e0f6      	b.n	8004338 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d121      	bne.n	8004198 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004194:	b29b      	uxth	r3, r3
 8004196:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800419e:	2b01      	cmp	r3, #1
 80041a0:	f040 80ca 	bne.w	8004338 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041ac:	441a      	add	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	69da      	ldr	r2, [r3, #28]
 80041b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041ba:	441a      	add	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	6a1a      	ldr	r2, [r3, #32]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d30b      	bcc.n	80041e4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	6a1a      	ldr	r2, [r3, #32]
 80041d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041dc:	1ad2      	subs	r2, r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	621a      	str	r2, [r3, #32]
 80041e2:	e017      	b.n	8004214 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d108      	bne.n	80041fe <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80041ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041fc:	e00a      	b.n	8004214 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2200      	movs	r2, #0
 800420a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	657b      	str	r3, [r7, #84]	; 0x54
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	785b      	ldrb	r3, [r3, #1]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d165      	bne.n	80042ee <HAL_PCD_EP_DB_Transmit+0x750>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004230:	b29b      	uxth	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004236:	4413      	add	r3, r2
 8004238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	011a      	lsls	r2, r3, #4
 8004240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004242:	4413      	add	r3, r2
 8004244:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004248:	65bb      	str	r3, [r7, #88]	; 0x58
 800424a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004254:	b29a      	uxth	r2, r3
 8004256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004258:	801a      	strh	r2, [r3, #0]
 800425a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800425e:	2b3e      	cmp	r3, #62	; 0x3e
 8004260:	d91d      	bls.n	800429e <HAL_PCD_EP_DB_Transmit+0x700>
 8004262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	66bb      	str	r3, [r7, #104]	; 0x68
 800426a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <HAL_PCD_EP_DB_Transmit+0x6de>
 8004276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004278:	3b01      	subs	r3, #1
 800427a:	66bb      	str	r3, [r7, #104]	; 0x68
 800427c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29a      	uxth	r2, r3
 8004282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004284:	b29b      	uxth	r3, r3
 8004286:	029b      	lsls	r3, r3, #10
 8004288:	b29b      	uxth	r3, r3
 800428a:	4313      	orrs	r3, r2
 800428c:	b29b      	uxth	r3, r3
 800428e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004296:	b29a      	uxth	r2, r3
 8004298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800429a:	801a      	strh	r2, [r3, #0]
 800429c:	e041      	b.n	8004322 <HAL_PCD_EP_DB_Transmit+0x784>
 800429e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_PCD_EP_DB_Transmit+0x71e>
 80042a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b8:	801a      	strh	r2, [r3, #0]
 80042ba:	e032      	b.n	8004322 <HAL_PCD_EP_DB_Transmit+0x784>
 80042bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80042c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_PCD_EP_DB_Transmit+0x738>
 80042d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042d2:	3301      	adds	r3, #1
 80042d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29a      	uxth	r2, r3
 80042dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042de:	b29b      	uxth	r3, r3
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	4313      	orrs	r3, r2
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ea:	801a      	strh	r2, [r3, #0]
 80042ec:	e019      	b.n	8004322 <HAL_PCD_EP_DB_Transmit+0x784>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	785b      	ldrb	r3, [r3, #1]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d115      	bne.n	8004322 <HAL_PCD_EP_DB_Transmit+0x784>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fe:	b29b      	uxth	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004304:	4413      	add	r3, r2
 8004306:	657b      	str	r3, [r7, #84]	; 0x54
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	011a      	lsls	r2, r3, #4
 800430e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004310:	4413      	add	r3, r2
 8004312:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004316:	653b      	str	r3, [r7, #80]	; 0x50
 8004318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800431c:	b29a      	uxth	r2, r3
 800431e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004320:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6959      	ldr	r1, [r3, #20]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	895a      	ldrh	r2, [r3, #10]
 800432e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004332:	b29b      	uxth	r3, r3
 8004334:	f005 fb6e 	bl	8009a14 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004352:	82bb      	strh	r3, [r7, #20]
 8004354:	8abb      	ldrh	r3, [r7, #20]
 8004356:	f083 0310 	eor.w	r3, r3, #16
 800435a:	82bb      	strh	r3, [r7, #20]
 800435c:	8abb      	ldrh	r3, [r7, #20]
 800435e:	f083 0320 	eor.w	r3, r3, #32
 8004362:	82bb      	strh	r3, [r7, #20]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	8abb      	ldrh	r3, [r7, #20]
 8004374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004384:	b29b      	uxth	r3, r3
 8004386:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3790      	adds	r7, #144	; 0x90
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004392:	b480      	push	{r7}
 8004394:	b087      	sub	sp, #28
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	607b      	str	r3, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	817b      	strh	r3, [r7, #10]
 80043a0:	4613      	mov	r3, r2
 80043a2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043a4:	897b      	ldrh	r3, [r7, #10]
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00b      	beq.n	80043c8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b0:	897b      	ldrh	r3, [r7, #10]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e009      	b.n	80043dc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043c8:	897a      	ldrh	r2, [r7, #10]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043dc:	893b      	ldrh	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d107      	bne.n	80043f2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2200      	movs	r2, #0
 80043e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	80da      	strh	r2, [r3, #6]
 80043f0:	e00b      	b.n	800440a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2201      	movs	r2, #1
 80043f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	0c1b      	lsrs	r3, r3, #16
 8004404:	b29a      	uxth	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800441e:	af00      	add	r7, sp, #0
 8004420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004424:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004428:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800442a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f001 b823 	b.w	8005484 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 817d 	beq.w	800474e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004454:	4bbc      	ldr	r3, [pc, #752]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 030c 	and.w	r3, r3, #12
 800445c:	2b04      	cmp	r3, #4
 800445e:	d00c      	beq.n	800447a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004460:	4bb9      	ldr	r3, [pc, #740]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 030c 	and.w	r3, r3, #12
 8004468:	2b08      	cmp	r3, #8
 800446a:	d15c      	bne.n	8004526 <HAL_RCC_OscConfig+0x10e>
 800446c:	4bb6      	ldr	r3, [pc, #728]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d155      	bne.n	8004526 <HAL_RCC_OscConfig+0x10e>
 800447a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800447e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004486:	fa93 f3a3 	rbit	r3, r3
 800448a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800448e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004492:	fab3 f383 	clz	r3, r3
 8004496:	b2db      	uxtb	r3, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d102      	bne.n	80044ac <HAL_RCC_OscConfig+0x94>
 80044a6:	4ba8      	ldr	r3, [pc, #672]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	e015      	b.n	80044d8 <HAL_RCC_OscConfig+0xc0>
 80044ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044b0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80044b8:	fa93 f3a3 	rbit	r3, r3
 80044bc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80044c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80044c8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80044cc:	fa93 f3a3 	rbit	r3, r3
 80044d0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80044d4:	4b9c      	ldr	r3, [pc, #624]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044dc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80044e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80044e4:	fa92 f2a2 	rbit	r2, r2
 80044e8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80044ec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80044f0:	fab2 f282 	clz	r2, r2
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	f042 0220 	orr.w	r2, r2, #32
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	f002 021f 	and.w	r2, r2, #31
 8004500:	2101      	movs	r1, #1
 8004502:	fa01 f202 	lsl.w	r2, r1, r2
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 811f 	beq.w	800474c <HAL_RCC_OscConfig+0x334>
 800450e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 8116 	bne.w	800474c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f000 bfaf 	b.w	8005484 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004536:	d106      	bne.n	8004546 <HAL_RCC_OscConfig+0x12e>
 8004538:	4b83      	ldr	r3, [pc, #524]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a82      	ldr	r2, [pc, #520]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 800453e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e036      	b.n	80045b4 <HAL_RCC_OscConfig+0x19c>
 8004546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x158>
 8004556:	4b7c      	ldr	r3, [pc, #496]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a7b      	ldr	r2, [pc, #492]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 800455c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	4b79      	ldr	r3, [pc, #484]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a78      	ldr	r2, [pc, #480]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 8004568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	e021      	b.n	80045b4 <HAL_RCC_OscConfig+0x19c>
 8004570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004574:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x184>
 8004582:	4b71      	ldr	r3, [pc, #452]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a70      	ldr	r2, [pc, #448]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 8004588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	4b6e      	ldr	r3, [pc, #440]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a6d      	ldr	r2, [pc, #436]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e00b      	b.n	80045b4 <HAL_RCC_OscConfig+0x19c>
 800459c:	4b6a      	ldr	r3, [pc, #424]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a69      	ldr	r2, [pc, #420]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	4b67      	ldr	r3, [pc, #412]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a66      	ldr	r2, [pc, #408]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 80045ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045b4:	4b64      	ldr	r3, [pc, #400]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	f023 020f 	bic.w	r2, r3, #15
 80045bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	495f      	ldr	r1, [pc, #380]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d059      	beq.n	8004692 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045de:	f7fd f92f 	bl	8001840 <HAL_GetTick>
 80045e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fd f92a 	bl	8001840 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b64      	cmp	r3, #100	; 0x64
 80045f6:	d902      	bls.n	80045fe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	f000 bf43 	b.w	8005484 <HAL_RCC_OscConfig+0x106c>
 80045fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004602:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004612:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b01      	cmp	r3, #1
 8004628:	d102      	bne.n	8004630 <HAL_RCC_OscConfig+0x218>
 800462a:	4b47      	ldr	r3, [pc, #284]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	e015      	b.n	800465c <HAL_RCC_OscConfig+0x244>
 8004630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004634:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800463c:	fa93 f3a3 	rbit	r3, r3
 8004640:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004648:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800464c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004650:	fa93 f3a3 	rbit	r3, r3
 8004654:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004658:	4b3b      	ldr	r3, [pc, #236]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004660:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004664:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004668:	fa92 f2a2 	rbit	r2, r2
 800466c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004670:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004674:	fab2 f282 	clz	r2, r2
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	f042 0220 	orr.w	r2, r2, #32
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	f002 021f 	and.w	r2, r2, #31
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f202 	lsl.w	r2, r1, r2
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ab      	beq.n	80045e8 <HAL_RCC_OscConfig+0x1d0>
 8004690:	e05d      	b.n	800474e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004692:	f7fd f8d5 	bl	8001840 <HAL_GetTick>
 8004696:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800469c:	f7fd f8d0 	bl	8001840 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b64      	cmp	r3, #100	; 0x64
 80046aa:	d902      	bls.n	80046b2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	f000 bee9 	b.w	8005484 <HAL_RCC_OscConfig+0x106c>
 80046b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046b6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80046be:	fa93 f3a3 	rbit	r3, r3
 80046c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80046c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	fab3 f383 	clz	r3, r3
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d102      	bne.n	80046e4 <HAL_RCC_OscConfig+0x2cc>
 80046de:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	e015      	b.n	8004710 <HAL_RCC_OscConfig+0x2f8>
 80046e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046e8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80046f0:	fa93 f3a3 	rbit	r3, r3
 80046f4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80046f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046fc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004700:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004704:	fa93 f3a3 	rbit	r3, r3
 8004708:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <HAL_RCC_OscConfig+0x330>)
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004714:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004718:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800471c:	fa92 f2a2 	rbit	r2, r2
 8004720:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004724:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004728:	fab2 f282 	clz	r2, r2
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	f042 0220 	orr.w	r2, r2, #32
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	f002 021f 	and.w	r2, r2, #31
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f202 	lsl.w	r2, r1, r2
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ab      	bne.n	800469c <HAL_RCC_OscConfig+0x284>
 8004744:	e003      	b.n	800474e <HAL_RCC_OscConfig+0x336>
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 817d 	beq.w	8004a5e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004764:	4ba6      	ldr	r3, [pc, #664]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00b      	beq.n	8004788 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004770:	4ba3      	ldr	r3, [pc, #652]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b08      	cmp	r3, #8
 800477a:	d172      	bne.n	8004862 <HAL_RCC_OscConfig+0x44a>
 800477c:	4ba0      	ldr	r3, [pc, #640]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d16c      	bne.n	8004862 <HAL_RCC_OscConfig+0x44a>
 8004788:	2302      	movs	r3, #2
 800478a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004792:	fa93 f3a3 	rbit	r3, r3
 8004796:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800479a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d102      	bne.n	80047b8 <HAL_RCC_OscConfig+0x3a0>
 80047b2:	4b93      	ldr	r3, [pc, #588]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	e013      	b.n	80047e0 <HAL_RCC_OscConfig+0x3c8>
 80047b8:	2302      	movs	r3, #2
 80047ba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047be:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80047ca:	2302      	movs	r3, #2
 80047cc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80047d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80047dc:	4b88      	ldr	r3, [pc, #544]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	2202      	movs	r2, #2
 80047e2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80047e6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80047ea:	fa92 f2a2 	rbit	r2, r2
 80047ee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80047f2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80047f6:	fab2 f282 	clz	r2, r2
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	f042 0220 	orr.w	r2, r2, #32
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	f002 021f 	and.w	r2, r2, #31
 8004806:	2101      	movs	r1, #1
 8004808:	fa01 f202 	lsl.w	r2, r1, r2
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_RCC_OscConfig+0x410>
 8004812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d002      	beq.n	8004828 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f000 be2e 	b.w	8005484 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004828:	4b75      	ldr	r3, [pc, #468]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004834:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	21f8      	movs	r1, #248	; 0xf8
 800483e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004846:	fa91 f1a1 	rbit	r1, r1
 800484a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800484e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004852:	fab1 f181 	clz	r1, r1
 8004856:	b2c9      	uxtb	r1, r1
 8004858:	408b      	lsls	r3, r1
 800485a:	4969      	ldr	r1, [pc, #420]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 800485c:	4313      	orrs	r3, r2
 800485e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004860:	e0fd      	b.n	8004a5e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004866:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8088 	beq.w	8004984 <HAL_RCC_OscConfig+0x56c>
 8004874:	2301      	movs	r3, #1
 8004876:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004886:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800488a:	fab3 f383 	clz	r3, r3
 800488e:	b2db      	uxtb	r3, r3
 8004890:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004894:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	461a      	mov	r2, r3
 800489c:	2301      	movs	r3, #1
 800489e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fc ffce 	bl	8001840 <HAL_GetTick>
 80048a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048aa:	f7fc ffc9 	bl	8001840 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d902      	bls.n	80048c0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	f000 bde2 	b.w	8005484 <HAL_RCC_OscConfig+0x106c>
 80048c0:	2302      	movs	r3, #2
 80048c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80048d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d102      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4d8>
 80048ea:	4b45      	ldr	r3, [pc, #276]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	e013      	b.n	8004918 <HAL_RCC_OscConfig+0x500>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004902:	2302      	movs	r3, #2
 8004904:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004908:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004914:	4b3a      	ldr	r3, [pc, #232]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	2202      	movs	r2, #2
 800491a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800491e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004922:	fa92 f2a2 	rbit	r2, r2
 8004926:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800492a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800492e:	fab2 f282 	clz	r2, r2
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	f042 0220 	orr.w	r2, r2, #32
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	f002 021f 	and.w	r2, r2, #31
 800493e:	2101      	movs	r1, #1
 8004940:	fa01 f202 	lsl.w	r2, r1, r2
 8004944:	4013      	ands	r3, r2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0af      	beq.n	80048aa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494a:	4b2d      	ldr	r3, [pc, #180]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	21f8      	movs	r1, #248	; 0xf8
 8004960:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004968:	fa91 f1a1 	rbit	r1, r1
 800496c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004970:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004974:	fab1 f181 	clz	r1, r1
 8004978:	b2c9      	uxtb	r1, r1
 800497a:	408b      	lsls	r3, r1
 800497c:	4920      	ldr	r1, [pc, #128]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
 8004982:	e06c      	b.n	8004a5e <HAL_RCC_OscConfig+0x646>
 8004984:	2301      	movs	r3, #1
 8004986:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800498e:	fa93 f3a3 	rbit	r3, r3
 8004992:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004996:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	461a      	mov	r2, r3
 80049ac:	2300      	movs	r3, #0
 80049ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fc ff46 	bl	8001840 <HAL_GetTick>
 80049b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ba:	f7fc ff41 	bl	8001840 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d902      	bls.n	80049d0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	f000 bd5a 	b.w	8005484 <HAL_RCC_OscConfig+0x106c>
 80049d0:	2302      	movs	r3, #2
 80049d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80049e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d104      	bne.n	8004a04 <HAL_RCC_OscConfig+0x5ec>
 80049fa:	4b01      	ldr	r3, [pc, #4]	; (8004a00 <HAL_RCC_OscConfig+0x5e8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	e015      	b.n	8004a2c <HAL_RCC_OscConfig+0x614>
 8004a00:	40021000 	.word	0x40021000
 8004a04:	2302      	movs	r3, #2
 8004a06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a0e:	fa93 f3a3 	rbit	r3, r3
 8004a12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004a16:	2302      	movs	r3, #2
 8004a18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a20:	fa93 f3a3 	rbit	r3, r3
 8004a24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a28:	4bc8      	ldr	r3, [pc, #800]	; (8004d4c <HAL_RCC_OscConfig+0x934>)
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004a32:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004a36:	fa92 f2a2 	rbit	r2, r2
 8004a3a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004a3e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004a42:	fab2 f282 	clz	r2, r2
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	f042 0220 	orr.w	r2, r2, #32
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	f002 021f 	and.w	r2, r2, #31
 8004a52:	2101      	movs	r1, #1
 8004a54:	fa01 f202 	lsl.w	r2, r1, r2
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1ad      	bne.n	80049ba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8110 	beq.w	8004c94 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d079      	beq.n	8004b78 <HAL_RCC_OscConfig+0x760>
 8004a84:	2301      	movs	r3, #1
 8004a86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a8e:	fa93 f3a3 	rbit	r3, r3
 8004a92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4bab      	ldr	r3, [pc, #684]	; (8004d50 <HAL_RCC_OscConfig+0x938>)
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2301      	movs	r3, #1
 8004aac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aae:	f7fc fec7 	bl	8001840 <HAL_GetTick>
 8004ab2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab8:	f7fc fec2 	bl	8001840 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d902      	bls.n	8004ace <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	f000 bcdb 	b.w	8005484 <HAL_RCC_OscConfig+0x106c>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ad8:	fa93 f3a3 	rbit	r3, r3
 8004adc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ae8:	2202      	movs	r2, #2
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	fa93 f2a3 	rbit	r2, r3
 8004afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	fa93 f2a3 	rbit	r2, r3
 8004b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b26:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b28:	4b88      	ldr	r3, [pc, #544]	; (8004d4c <HAL_RCC_OscConfig+0x934>)
 8004b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b34:	2102      	movs	r1, #2
 8004b36:	6019      	str	r1, [r3, #0]
 8004b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	fa93 f1a3 	rbit	r1, r3
 8004b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b4e:	6019      	str	r1, [r3, #0]
  return result;
 8004b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	fab3 f383 	clz	r3, r3
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0a0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x6a0>
 8004b76:	e08d      	b.n	8004c94 <HAL_RCC_OscConfig+0x87c>
 8004b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b80:	2201      	movs	r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b88:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	fa93 f2a3 	rbit	r2, r3
 8004b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b9a:	601a      	str	r2, [r3, #0]
  return result;
 8004b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ba4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	461a      	mov	r2, r3
 8004bae:	4b68      	ldr	r3, [pc, #416]	; (8004d50 <HAL_RCC_OscConfig+0x938>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bba:	f7fc fe41 	bl	8001840 <HAL_GetTick>
 8004bbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc2:	e00a      	b.n	8004bda <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc4:	f7fc fe3c 	bl	8001840 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d902      	bls.n	8004bda <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	f000 bc55 	b.w	8005484 <HAL_RCC_OscConfig+0x106c>
 8004bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bde:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004be2:	2202      	movs	r2, #2
 8004be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	fa93 f2a3 	rbit	r2, r3
 8004bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c06:	2202      	movs	r2, #2
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	fa93 f2a3 	rbit	r2, r3
 8004c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	fa93 f2a3 	rbit	r2, r3
 8004c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004c44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c46:	4b41      	ldr	r3, [pc, #260]	; (8004d4c <HAL_RCC_OscConfig+0x934>)
 8004c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004c52:	2102      	movs	r1, #2
 8004c54:	6019      	str	r1, [r3, #0]
 8004c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	fa93 f1a3 	rbit	r1, r3
 8004c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c6c:	6019      	str	r1, [r3, #0]
  return result;
 8004c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c72:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	fab3 f383 	clz	r3, r3
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d197      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 81a1 	beq.w	8004fec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004caa:	2300      	movs	r3, #0
 8004cac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb0:	4b26      	ldr	r3, [pc, #152]	; (8004d4c <HAL_RCC_OscConfig+0x934>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d116      	bne.n	8004cea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbc:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <HAL_RCC_OscConfig+0x934>)
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	4a22      	ldr	r2, [pc, #136]	; (8004d4c <HAL_RCC_OscConfig+0x934>)
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	61d3      	str	r3, [r2, #28]
 8004cc8:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <HAL_RCC_OscConfig+0x934>)
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cde:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004ce2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cea:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <HAL_RCC_OscConfig+0x93c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11a      	bne.n	8004d2c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf6:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <HAL_RCC_OscConfig+0x93c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <HAL_RCC_OscConfig+0x93c>)
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d02:	f7fc fd9d 	bl	8001840 <HAL_GetTick>
 8004d06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0a:	e009      	b.n	8004d20 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0c:	f7fc fd98 	bl	8001840 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b64      	cmp	r3, #100	; 0x64
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e3b1      	b.n	8005484 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <HAL_RCC_OscConfig+0x93c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ef      	beq.n	8004d0c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d10d      	bne.n	8004d58 <HAL_RCC_OscConfig+0x940>
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <HAL_RCC_OscConfig+0x934>)
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	4a02      	ldr	r2, [pc, #8]	; (8004d4c <HAL_RCC_OscConfig+0x934>)
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	6213      	str	r3, [r2, #32]
 8004d48:	e03c      	b.n	8004dc4 <HAL_RCC_OscConfig+0x9ac>
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	10908120 	.word	0x10908120
 8004d54:	40007000 	.word	0x40007000
 8004d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10c      	bne.n	8004d82 <HAL_RCC_OscConfig+0x96a>
 8004d68:	4bc1      	ldr	r3, [pc, #772]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	4ac0      	ldr	r2, [pc, #768]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004d6e:	f023 0301 	bic.w	r3, r3, #1
 8004d72:	6213      	str	r3, [r2, #32]
 8004d74:	4bbe      	ldr	r3, [pc, #760]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	4abd      	ldr	r2, [pc, #756]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004d7a:	f023 0304 	bic.w	r3, r3, #4
 8004d7e:	6213      	str	r3, [r2, #32]
 8004d80:	e020      	b.n	8004dc4 <HAL_RCC_OscConfig+0x9ac>
 8004d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	2b05      	cmp	r3, #5
 8004d90:	d10c      	bne.n	8004dac <HAL_RCC_OscConfig+0x994>
 8004d92:	4bb7      	ldr	r3, [pc, #732]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	4ab6      	ldr	r2, [pc, #728]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004d98:	f043 0304 	orr.w	r3, r3, #4
 8004d9c:	6213      	str	r3, [r2, #32]
 8004d9e:	4bb4      	ldr	r3, [pc, #720]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	4ab3      	ldr	r2, [pc, #716]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6213      	str	r3, [r2, #32]
 8004daa:	e00b      	b.n	8004dc4 <HAL_RCC_OscConfig+0x9ac>
 8004dac:	4bb0      	ldr	r3, [pc, #704]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	4aaf      	ldr	r2, [pc, #700]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	6213      	str	r3, [r2, #32]
 8004db8:	4bad      	ldr	r3, [pc, #692]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	4aac      	ldr	r2, [pc, #688]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004dbe:	f023 0304 	bic.w	r3, r3, #4
 8004dc2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8081 	beq.w	8004ed8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd6:	f7fc fd33 	bl	8001840 <HAL_GetTick>
 8004dda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dde:	e00b      	b.n	8004df8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de0:	f7fc fd2e 	bl	8001840 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e345      	b.n	8005484 <HAL_RCC_OscConfig+0x106c>
 8004df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004e00:	2202      	movs	r2, #2
 8004e02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e08:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	fa93 f2a3 	rbit	r2, r3
 8004e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004e24:	2202      	movs	r2, #2
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	fa93 f2a3 	rbit	r2, r3
 8004e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004e3e:	601a      	str	r2, [r3, #0]
  return result;
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004e48:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4a:	fab3 f383 	clz	r3, r3
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f043 0302 	orr.w	r3, r3, #2
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d102      	bne.n	8004e64 <HAL_RCC_OscConfig+0xa4c>
 8004e5e:	4b84      	ldr	r3, [pc, #528]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	e013      	b.n	8004e8c <HAL_RCC_OscConfig+0xa74>
 8004e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e68:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e74:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	fa93 f2a3 	rbit	r2, r3
 8004e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e82:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	4b79      	ldr	r3, [pc, #484]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e90:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e94:	2102      	movs	r1, #2
 8004e96:	6011      	str	r1, [r2, #0]
 8004e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e9c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	fa92 f1a2 	rbit	r1, r2
 8004ea6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004eaa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004eae:	6011      	str	r1, [r2, #0]
  return result;
 8004eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004eb4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	fab2 f282 	clz	r2, r2
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	f002 021f 	and.w	r2, r2, #31
 8004eca:	2101      	movs	r1, #1
 8004ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d084      	beq.n	8004de0 <HAL_RCC_OscConfig+0x9c8>
 8004ed6:	e07f      	b.n	8004fd8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed8:	f7fc fcb2 	bl	8001840 <HAL_GetTick>
 8004edc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee0:	e00b      	b.n	8004efa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fc fcad 	bl	8001840 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e2c4      	b.n	8005484 <HAL_RCC_OscConfig+0x106c>
 8004efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004f02:	2202      	movs	r2, #2
 8004f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	fa93 f2a3 	rbit	r2, r3
 8004f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f18:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004f26:	2202      	movs	r2, #2
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	fa93 f2a3 	rbit	r2, r3
 8004f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f40:	601a      	str	r2, [r3, #0]
  return result;
 8004f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f46:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4c:	fab3 f383 	clz	r3, r3
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f043 0302 	orr.w	r3, r3, #2
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d102      	bne.n	8004f66 <HAL_RCC_OscConfig+0xb4e>
 8004f60:	4b43      	ldr	r3, [pc, #268]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	e013      	b.n	8004f8e <HAL_RCC_OscConfig+0xb76>
 8004f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004f6e:	2202      	movs	r2, #2
 8004f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fa93 f2a3 	rbit	r2, r3
 8004f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f84:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	4b39      	ldr	r3, [pc, #228]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f92:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f96:	2102      	movs	r1, #2
 8004f98:	6011      	str	r1, [r2, #0]
 8004f9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f9e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	fa92 f1a2 	rbit	r1, r2
 8004fa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004fac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004fb0:	6011      	str	r1, [r2, #0]
  return result;
 8004fb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004fb6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	fab2 f282 	clz	r2, r2
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	f002 021f 	and.w	r2, r2, #31
 8004fcc:	2101      	movs	r1, #1
 8004fce:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d184      	bne.n	8004ee2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fd8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d105      	bne.n	8004fec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe0:	4b23      	ldr	r3, [pc, #140]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4a22      	ldr	r2, [pc, #136]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8004fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8242 	beq.w	8005482 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ffe:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <HAL_RCC_OscConfig+0xc58>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b08      	cmp	r3, #8
 8005008:	f000 8213 	beq.w	8005432 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	2b02      	cmp	r3, #2
 800501a:	f040 8162 	bne.w	80052e2 <HAL_RCC_OscConfig+0xeca>
 800501e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005022:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005026:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800502a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005030:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	fa93 f2a3 	rbit	r2, r3
 800503a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005042:	601a      	str	r2, [r3, #0]
  return result;
 8005044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005048:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800504c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504e:	fab3 f383 	clz	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005058:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	461a      	mov	r2, r3
 8005060:	2300      	movs	r3, #0
 8005062:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fc fbec 	bl	8001840 <HAL_GetTick>
 8005068:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800506c:	e00c      	b.n	8005088 <HAL_RCC_OscConfig+0xc70>
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005074:	f7fc fbe4 	bl	8001840 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e1fd      	b.n	8005484 <HAL_RCC_OscConfig+0x106c>
 8005088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	fa93 f2a3 	rbit	r2, r3
 80050a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80050ac:	601a      	str	r2, [r3, #0]
  return result;
 80050ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80050b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050b8:	fab3 f383 	clz	r3, r3
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d102      	bne.n	80050d2 <HAL_RCC_OscConfig+0xcba>
 80050cc:	4bb0      	ldr	r3, [pc, #704]	; (8005390 <HAL_RCC_OscConfig+0xf78>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	e027      	b.n	8005122 <HAL_RCC_OscConfig+0xd0a>
 80050d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80050da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	fa93 f2a3 	rbit	r2, r3
 80050ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	fa93 f2a3 	rbit	r2, r3
 8005114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005118:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	4b9c      	ldr	r3, [pc, #624]	; (8005390 <HAL_RCC_OscConfig+0xf78>)
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005126:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800512a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800512e:	6011      	str	r1, [r2, #0]
 8005130:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005134:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	fa92 f1a2 	rbit	r1, r2
 800513e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005142:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005146:	6011      	str	r1, [r2, #0]
  return result;
 8005148:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800514c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	fab2 f282 	clz	r2, r2
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	f042 0220 	orr.w	r2, r2, #32
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	f002 021f 	and.w	r2, r2, #31
 8005162:	2101      	movs	r1, #1
 8005164:	fa01 f202 	lsl.w	r2, r1, r2
 8005168:	4013      	ands	r3, r2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d182      	bne.n	8005074 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800516e:	4b88      	ldr	r3, [pc, #544]	; (8005390 <HAL_RCC_OscConfig+0xf78>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005186:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	430b      	orrs	r3, r1
 8005190:	497f      	ldr	r1, [pc, #508]	; (8005390 <HAL_RCC_OscConfig+0xf78>)
 8005192:	4313      	orrs	r3, r2
 8005194:	604b      	str	r3, [r1, #4]
 8005196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800519e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	fa93 f2a3 	rbit	r2, r3
 80051b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80051ba:	601a      	str	r2, [r3, #0]
  return result;
 80051bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80051c4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	461a      	mov	r2, r3
 80051d8:	2301      	movs	r3, #1
 80051da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fc fb30 	bl	8001840 <HAL_GetTick>
 80051e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051e4:	e009      	b.n	80051fa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e6:	f7fc fb2b 	bl	8001840 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e144      	b.n	8005484 <HAL_RCC_OscConfig+0x106c>
 80051fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005202:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	fa93 f2a3 	rbit	r2, r3
 8005216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800521e:	601a      	str	r2, [r3, #0]
  return result;
 8005220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005224:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005228:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800522a:	fab3 f383 	clz	r3, r3
 800522e:	b2db      	uxtb	r3, r3
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	d102      	bne.n	8005244 <HAL_RCC_OscConfig+0xe2c>
 800523e:	4b54      	ldr	r3, [pc, #336]	; (8005390 <HAL_RCC_OscConfig+0xf78>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	e027      	b.n	8005294 <HAL_RCC_OscConfig+0xe7c>
 8005244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005248:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800524c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005256:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	fa93 f2a3 	rbit	r2, r3
 8005260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005264:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005272:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	fa93 f2a3 	rbit	r2, r3
 8005286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	4b3f      	ldr	r3, [pc, #252]	; (8005390 <HAL_RCC_OscConfig+0xf78>)
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005298:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800529c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052a0:	6011      	str	r1, [r2, #0]
 80052a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052a6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	fa92 f1a2 	rbit	r1, r2
 80052b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80052b8:	6011      	str	r1, [r2, #0]
  return result;
 80052ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052be:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	fab2 f282 	clz	r2, r2
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	f042 0220 	orr.w	r2, r2, #32
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	f002 021f 	and.w	r2, r2, #31
 80052d4:	2101      	movs	r1, #1
 80052d6:	fa01 f202 	lsl.w	r2, r1, r2
 80052da:	4013      	ands	r3, r2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d082      	beq.n	80051e6 <HAL_RCC_OscConfig+0xdce>
 80052e0:	e0cf      	b.n	8005482 <HAL_RCC_OscConfig+0x106a>
 80052e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80052ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	fa93 f2a3 	rbit	r2, r3
 80052fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005302:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005306:	601a      	str	r2, [r3, #0]
  return result;
 8005308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005310:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005312:	fab3 f383 	clz	r3, r3
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800531c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	461a      	mov	r2, r3
 8005324:	2300      	movs	r3, #0
 8005326:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7fc fa8a 	bl	8001840 <HAL_GetTick>
 800532c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005330:	e009      	b.n	8005346 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005332:	f7fc fa85 	bl	8001840 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e09e      	b.n	8005484 <HAL_RCC_OscConfig+0x106c>
 8005346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800534e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005358:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	fa93 f2a3 	rbit	r2, r3
 8005362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005366:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800536a:	601a      	str	r2, [r3, #0]
  return result;
 800536c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005370:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005374:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005376:	fab3 f383 	clz	r3, r3
 800537a:	b2db      	uxtb	r3, r3
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f043 0301 	orr.w	r3, r3, #1
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b01      	cmp	r3, #1
 8005388:	d104      	bne.n	8005394 <HAL_RCC_OscConfig+0xf7c>
 800538a:	4b01      	ldr	r3, [pc, #4]	; (8005390 <HAL_RCC_OscConfig+0xf78>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	e029      	b.n	80053e4 <HAL_RCC_OscConfig+0xfcc>
 8005390:	40021000 	.word	0x40021000
 8005394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005398:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800539c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	fa93 f2a3 	rbit	r2, r3
 80053b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80053c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	fa93 f2a3 	rbit	r2, r3
 80053d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	4b2b      	ldr	r3, [pc, #172]	; (8005490 <HAL_RCC_OscConfig+0x1078>)
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053e8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80053ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053f0:	6011      	str	r1, [r2, #0]
 80053f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053f6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	fa92 f1a2 	rbit	r1, r2
 8005400:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005404:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005408:	6011      	str	r1, [r2, #0]
  return result;
 800540a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800540e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	fab2 f282 	clz	r2, r2
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	f042 0220 	orr.w	r2, r2, #32
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	f002 021f 	and.w	r2, r2, #31
 8005424:	2101      	movs	r1, #1
 8005426:	fa01 f202 	lsl.w	r2, r1, r2
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d180      	bne.n	8005332 <HAL_RCC_OscConfig+0xf1a>
 8005430:	e027      	b.n	8005482 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005436:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e01e      	b.n	8005484 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005446:	4b12      	ldr	r3, [pc, #72]	; (8005490 <HAL_RCC_OscConfig+0x1078>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800544e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005452:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	429a      	cmp	r2, r3
 8005464:	d10b      	bne.n	800547e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005466:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800546a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800546e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800547a:	429a      	cmp	r2, r3
 800547c:	d001      	beq.n	8005482 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40021000 	.word	0x40021000

08005494 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b09e      	sub	sp, #120	; 0x78
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e162      	b.n	8005772 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054ac:	4b90      	ldr	r3, [pc, #576]	; (80056f0 <HAL_RCC_ClockConfig+0x25c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d910      	bls.n	80054dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ba:	4b8d      	ldr	r3, [pc, #564]	; (80056f0 <HAL_RCC_ClockConfig+0x25c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 0207 	bic.w	r2, r3, #7
 80054c2:	498b      	ldr	r1, [pc, #556]	; (80056f0 <HAL_RCC_ClockConfig+0x25c>)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ca:	4b89      	ldr	r3, [pc, #548]	; (80056f0 <HAL_RCC_ClockConfig+0x25c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d001      	beq.n	80054dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e14a      	b.n	8005772 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e8:	4b82      	ldr	r3, [pc, #520]	; (80056f4 <HAL_RCC_ClockConfig+0x260>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	497f      	ldr	r1, [pc, #508]	; (80056f4 <HAL_RCC_ClockConfig+0x260>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 80dc 	beq.w	80056c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d13c      	bne.n	800558a <HAL_RCC_ClockConfig+0xf6>
 8005510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005514:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005518:	fa93 f3a3 	rbit	r3, r3
 800551c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800551e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005520:	fab3 f383 	clz	r3, r3
 8005524:	b2db      	uxtb	r3, r3
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d102      	bne.n	800553a <HAL_RCC_ClockConfig+0xa6>
 8005534:	4b6f      	ldr	r3, [pc, #444]	; (80056f4 <HAL_RCC_ClockConfig+0x260>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	e00f      	b.n	800555a <HAL_RCC_ClockConfig+0xc6>
 800553a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800553e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005542:	fa93 f3a3 	rbit	r3, r3
 8005546:	667b      	str	r3, [r7, #100]	; 0x64
 8005548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800554c:	663b      	str	r3, [r7, #96]	; 0x60
 800554e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005550:	fa93 f3a3 	rbit	r3, r3
 8005554:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005556:	4b67      	ldr	r3, [pc, #412]	; (80056f4 <HAL_RCC_ClockConfig+0x260>)
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800555e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005560:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005562:	fa92 f2a2 	rbit	r2, r2
 8005566:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800556a:	fab2 f282 	clz	r2, r2
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	f042 0220 	orr.w	r2, r2, #32
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	f002 021f 	and.w	r2, r2, #31
 800557a:	2101      	movs	r1, #1
 800557c:	fa01 f202 	lsl.w	r2, r1, r2
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d17b      	bne.n	800567e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0f3      	b.n	8005772 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d13c      	bne.n	800560c <HAL_RCC_ClockConfig+0x178>
 8005592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005596:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800559a:	fa93 f3a3 	rbit	r3, r3
 800559e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80055a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a2:	fab3 f383 	clz	r3, r3
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d102      	bne.n	80055bc <HAL_RCC_ClockConfig+0x128>
 80055b6:	4b4f      	ldr	r3, [pc, #316]	; (80056f4 <HAL_RCC_ClockConfig+0x260>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	e00f      	b.n	80055dc <HAL_RCC_ClockConfig+0x148>
 80055bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c4:	fa93 f3a3 	rbit	r3, r3
 80055c8:	647b      	str	r3, [r7, #68]	; 0x44
 80055ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ce:	643b      	str	r3, [r7, #64]	; 0x40
 80055d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d2:	fa93 f3a3 	rbit	r3, r3
 80055d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d8:	4b46      	ldr	r3, [pc, #280]	; (80056f4 <HAL_RCC_ClockConfig+0x260>)
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80055e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e4:	fa92 f2a2 	rbit	r2, r2
 80055e8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80055ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ec:	fab2 f282 	clz	r2, r2
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	f042 0220 	orr.w	r2, r2, #32
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	f002 021f 	and.w	r2, r2, #31
 80055fc:	2101      	movs	r1, #1
 80055fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005602:	4013      	ands	r3, r2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d13a      	bne.n	800567e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0b2      	b.n	8005772 <HAL_RCC_ClockConfig+0x2de>
 800560c:	2302      	movs	r3, #2
 800560e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	fa93 f3a3 	rbit	r3, r3
 8005616:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561a:	fab3 f383 	clz	r3, r3
 800561e:	b2db      	uxtb	r3, r3
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d102      	bne.n	8005634 <HAL_RCC_ClockConfig+0x1a0>
 800562e:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <HAL_RCC_ClockConfig+0x260>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	e00d      	b.n	8005650 <HAL_RCC_ClockConfig+0x1bc>
 8005634:	2302      	movs	r3, #2
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	fa93 f3a3 	rbit	r3, r3
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
 8005640:	2302      	movs	r3, #2
 8005642:	623b      	str	r3, [r7, #32]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	fa93 f3a3 	rbit	r3, r3
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	4b29      	ldr	r3, [pc, #164]	; (80056f4 <HAL_RCC_ClockConfig+0x260>)
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	2202      	movs	r2, #2
 8005652:	61ba      	str	r2, [r7, #24]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	fa92 f2a2 	rbit	r2, r2
 800565a:	617a      	str	r2, [r7, #20]
  return result;
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	fab2 f282 	clz	r2, r2
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	f042 0220 	orr.w	r2, r2, #32
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	f002 021f 	and.w	r2, r2, #31
 800566e:	2101      	movs	r1, #1
 8005670:	fa01 f202 	lsl.w	r2, r1, r2
 8005674:	4013      	ands	r3, r2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e079      	b.n	8005772 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800567e:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <HAL_RCC_ClockConfig+0x260>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f023 0203 	bic.w	r2, r3, #3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	491a      	ldr	r1, [pc, #104]	; (80056f4 <HAL_RCC_ClockConfig+0x260>)
 800568c:	4313      	orrs	r3, r2
 800568e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005690:	f7fc f8d6 	bl	8001840 <HAL_GetTick>
 8005694:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005696:	e00a      	b.n	80056ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005698:	f7fc f8d2 	bl	8001840 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e061      	b.n	8005772 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ae:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <HAL_RCC_ClockConfig+0x260>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f003 020c 	and.w	r2, r3, #12
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	429a      	cmp	r2, r3
 80056be:	d1eb      	bne.n	8005698 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <HAL_RCC_ClockConfig+0x25c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d214      	bcs.n	80056f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ce:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <HAL_RCC_ClockConfig+0x25c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f023 0207 	bic.w	r2, r3, #7
 80056d6:	4906      	ldr	r1, [pc, #24]	; (80056f0 <HAL_RCC_ClockConfig+0x25c>)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	4313      	orrs	r3, r2
 80056dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <HAL_RCC_ClockConfig+0x25c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e040      	b.n	8005772 <HAL_RCC_ClockConfig+0x2de>
 80056f0:	40022000 	.word	0x40022000
 80056f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005704:	4b1d      	ldr	r3, [pc, #116]	; (800577c <HAL_RCC_ClockConfig+0x2e8>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	491a      	ldr	r1, [pc, #104]	; (800577c <HAL_RCC_ClockConfig+0x2e8>)
 8005712:	4313      	orrs	r3, r2
 8005714:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005722:	4b16      	ldr	r3, [pc, #88]	; (800577c <HAL_RCC_ClockConfig+0x2e8>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4912      	ldr	r1, [pc, #72]	; (800577c <HAL_RCC_ClockConfig+0x2e8>)
 8005732:	4313      	orrs	r3, r2
 8005734:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005736:	f000 f829 	bl	800578c <HAL_RCC_GetSysClockFreq>
 800573a:	4601      	mov	r1, r0
 800573c:	4b0f      	ldr	r3, [pc, #60]	; (800577c <HAL_RCC_ClockConfig+0x2e8>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005744:	22f0      	movs	r2, #240	; 0xf0
 8005746:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	fa92 f2a2 	rbit	r2, r2
 800574e:	60fa      	str	r2, [r7, #12]
  return result;
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	fab2 f282 	clz	r2, r2
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	40d3      	lsrs	r3, r2
 800575a:	4a09      	ldr	r2, [pc, #36]	; (8005780 <HAL_RCC_ClockConfig+0x2ec>)
 800575c:	5cd3      	ldrb	r3, [r2, r3]
 800575e:	fa21 f303 	lsr.w	r3, r1, r3
 8005762:	4a08      	ldr	r2, [pc, #32]	; (8005784 <HAL_RCC_ClockConfig+0x2f0>)
 8005764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005766:	4b08      	ldr	r3, [pc, #32]	; (8005788 <HAL_RCC_ClockConfig+0x2f4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7fc f824 	bl	80017b8 <HAL_InitTick>
  
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3778      	adds	r7, #120	; 0x78
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40021000 	.word	0x40021000
 8005780:	0800e8f8 	.word	0x0800e8f8
 8005784:	20000000 	.word	0x20000000
 8005788:	20000004 	.word	0x20000004

0800578c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800578c:	b480      	push	{r7}
 800578e:	b08b      	sub	sp, #44	; 0x2c
 8005790:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	2300      	movs	r3, #0
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	2300      	movs	r3, #0
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80057a6:	4b29      	ldr	r3, [pc, #164]	; (800584c <HAL_RCC_GetSysClockFreq+0xc0>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f003 030c 	and.w	r3, r3, #12
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d002      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0x30>
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d003      	beq.n	80057c2 <HAL_RCC_GetSysClockFreq+0x36>
 80057ba:	e03c      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057bc:	4b24      	ldr	r3, [pc, #144]	; (8005850 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057be:	623b      	str	r3, [r7, #32]
      break;
 80057c0:	e03c      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80057c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80057cc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	fa92 f2a2 	rbit	r2, r2
 80057d4:	607a      	str	r2, [r7, #4]
  return result;
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	fab2 f282 	clz	r2, r2
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	40d3      	lsrs	r3, r2
 80057e0:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <HAL_RCC_GetSysClockFreq+0xc8>)
 80057e2:	5cd3      	ldrb	r3, [r2, r3]
 80057e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80057e6:	4b19      	ldr	r3, [pc, #100]	; (800584c <HAL_RCC_GetSysClockFreq+0xc0>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	220f      	movs	r2, #15
 80057f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	fa92 f2a2 	rbit	r2, r2
 80057f8:	60fa      	str	r2, [r7, #12]
  return result;
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	fab2 f282 	clz	r2, r2
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	40d3      	lsrs	r3, r2
 8005804:	4a14      	ldr	r2, [pc, #80]	; (8005858 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005806:	5cd3      	ldrb	r3, [r2, r3]
 8005808:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d008      	beq.n	8005826 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005814:	4a0e      	ldr	r2, [pc, #56]	; (8005850 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	fbb2 f2f3 	udiv	r2, r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
 8005824:	e004      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	4a0c      	ldr	r2, [pc, #48]	; (800585c <HAL_RCC_GetSysClockFreq+0xd0>)
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	623b      	str	r3, [r7, #32]
      break;
 8005834:	e002      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005836:	4b06      	ldr	r3, [pc, #24]	; (8005850 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005838:	623b      	str	r3, [r7, #32]
      break;
 800583a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800583c:	6a3b      	ldr	r3, [r7, #32]
}
 800583e:	4618      	mov	r0, r3
 8005840:	372c      	adds	r7, #44	; 0x2c
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40021000 	.word	0x40021000
 8005850:	007a1200 	.word	0x007a1200
 8005854:	0800e910 	.word	0x0800e910
 8005858:	0800e920 	.word	0x0800e920
 800585c:	003d0900 	.word	0x003d0900

08005860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005864:	4b03      	ldr	r3, [pc, #12]	; (8005874 <HAL_RCC_GetHCLKFreq+0x14>)
 8005866:	681b      	ldr	r3, [r3, #0]
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000000 	.word	0x20000000

08005878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800587e:	f7ff ffef 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8005882:	4601      	mov	r1, r0
 8005884:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800588c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005890:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	fa92 f2a2 	rbit	r2, r2
 8005898:	603a      	str	r2, [r7, #0]
  return result;
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	fab2 f282 	clz	r2, r2
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	40d3      	lsrs	r3, r2
 80058a4:	4a04      	ldr	r2, [pc, #16]	; (80058b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80058a6:	5cd3      	ldrb	r3, [r2, r3]
 80058a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40021000 	.word	0x40021000
 80058b8:	0800e908 	.word	0x0800e908

080058bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80058c2:	f7ff ffcd 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 80058c6:	4601      	mov	r1, r0
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80058d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80058d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	fa92 f2a2 	rbit	r2, r2
 80058dc:	603a      	str	r2, [r7, #0]
  return result;
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	fab2 f282 	clz	r2, r2
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	40d3      	lsrs	r3, r2
 80058e8:	4a04      	ldr	r2, [pc, #16]	; (80058fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80058ea:	5cd3      	ldrb	r3, [r2, r3]
 80058ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40021000 	.word	0x40021000
 80058fc:	0800e908 	.word	0x0800e908

08005900 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b092      	sub	sp, #72	; 0x48
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005910:	2300      	movs	r3, #0
 8005912:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 80d4 	beq.w	8005acc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005924:	4b4e      	ldr	r3, [pc, #312]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10e      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005930:	4b4b      	ldr	r3, [pc, #300]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	4a4a      	ldr	r2, [pc, #296]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593a:	61d3      	str	r3, [r2, #28]
 800593c:	4b48      	ldr	r3, [pc, #288]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005948:	2301      	movs	r3, #1
 800594a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594e:	4b45      	ldr	r3, [pc, #276]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d118      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800595a:	4b42      	ldr	r3, [pc, #264]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a41      	ldr	r2, [pc, #260]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005964:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005966:	f7fb ff6b 	bl	8001840 <HAL_GetTick>
 800596a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596c:	e008      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596e:	f7fb ff67 	bl	8001840 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b64      	cmp	r3, #100	; 0x64
 800597a:	d901      	bls.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e169      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005980:	4b38      	ldr	r3, [pc, #224]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800598c:	4b34      	ldr	r3, [pc, #208]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005994:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 8084 	beq.w	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d07c      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059ac:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	fa93 f3a3 	rbit	r3, r3
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059c6:	fab3 f383 	clz	r3, r3
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	4b26      	ldr	r3, [pc, #152]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	461a      	mov	r2, r3
 80059d6:	2301      	movs	r3, #1
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	fa93 f3a3 	rbit	r3, r3
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059ea:	fab3 f383 	clz	r3, r3
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	461a      	mov	r2, r3
 80059fa:	2300      	movs	r3, #0
 80059fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80059fe:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a02:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d04b      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0e:	f7fb ff17 	bl	8001840 <HAL_GetTick>
 8005a12:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a14:	e00a      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a16:	f7fb ff13 	bl	8001840 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e113      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	fa93 f3a3 	rbit	r3, r3
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
 8005a38:	2302      	movs	r3, #2
 8005a3a:	623b      	str	r3, [r7, #32]
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	fa93 f3a3 	rbit	r3, r3
 8005a42:	61fb      	str	r3, [r7, #28]
  return result;
 8005a44:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a46:	fab3 f383 	clz	r3, r3
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f043 0302 	orr.w	r3, r3, #2
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d108      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a5a:	4b01      	ldr	r3, [pc, #4]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	e00d      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005a60:	40021000 	.word	0x40021000
 8005a64:	40007000 	.word	0x40007000
 8005a68:	10908100 	.word	0x10908100
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	fa93 f3a3 	rbit	r3, r3
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	4b78      	ldr	r3, [pc, #480]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	613a      	str	r2, [r7, #16]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	fa92 f2a2 	rbit	r2, r2
 8005a86:	60fa      	str	r2, [r7, #12]
  return result;
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	fab2 f282 	clz	r2, r2
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	f002 021f 	and.w	r2, r2, #31
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0b7      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005aa6:	4b6d      	ldr	r3, [pc, #436]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	496a      	ldr	r1, [pc, #424]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ab8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d105      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac0:	4b66      	ldr	r3, [pc, #408]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	4a65      	ldr	r2, [pc, #404]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d008      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ad8:	4b60      	ldr	r3, [pc, #384]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	f023 0203 	bic.w	r2, r3, #3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	495d      	ldr	r1, [pc, #372]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005af6:	4b59      	ldr	r3, [pc, #356]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	4956      	ldr	r1, [pc, #344]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b14:	4b51      	ldr	r3, [pc, #324]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	494e      	ldr	r1, [pc, #312]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b32:	4b4a      	ldr	r3, [pc, #296]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	f023 0210 	bic.w	r2, r3, #16
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	4947      	ldr	r1, [pc, #284]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005b50:	4b42      	ldr	r3, [pc, #264]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	493f      	ldr	r1, [pc, #252]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d008      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b6e:	4b3b      	ldr	r3, [pc, #236]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	f023 0220 	bic.w	r2, r3, #32
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	4938      	ldr	r1, [pc, #224]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b8c:	4b33      	ldr	r3, [pc, #204]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	4930      	ldr	r1, [pc, #192]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005baa:	4b2c      	ldr	r3, [pc, #176]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	4929      	ldr	r1, [pc, #164]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bc8:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	4921      	ldr	r1, [pc, #132]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005be6:	4b1d      	ldr	r3, [pc, #116]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	491a      	ldr	r1, [pc, #104]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	4912      	ldr	r1, [pc, #72]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d008      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005c22:	4b0e      	ldr	r3, [pc, #56]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	490b      	ldr	r1, [pc, #44]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4c:	4903      	ldr	r1, [pc, #12]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3748      	adds	r7, #72	; 0x48
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40021000 	.word	0x40021000

08005c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e09d      	b.n	8005dae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d108      	bne.n	8005c8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c82:	d009      	beq.n	8005c98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	61da      	str	r2, [r3, #28]
 8005c8a:	e005      	b.n	8005c98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fb fbb0 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd8:	d902      	bls.n	8005ce0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	e002      	b.n	8005ce6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ce4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cee:	d007      	beq.n	8005d00 <HAL_SPI_Init+0xa0>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cf8:	d002      	beq.n	8005d00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d42:	ea42 0103 	orr.w	r1, r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	0c1b      	lsrs	r3, r3, #16
 8005d5c:	f003 0204 	and.w	r2, r3, #4
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d7c:	ea42 0103 	orr.w	r1, r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b088      	sub	sp, #32
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_SPI_Transmit+0x22>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e15f      	b.n	8006098 <HAL_SPI_Transmit+0x2e2>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005de0:	f7fb fd2e 	bl	8001840 <HAL_GetTick>
 8005de4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d002      	beq.n	8005dfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005df6:	2302      	movs	r3, #2
 8005df8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dfa:	e148      	b.n	800608e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Transmit+0x52>
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e0c:	e13f      	b.n	800608e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2203      	movs	r2, #3
 8005e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	88fa      	ldrh	r2, [r7, #6]
 8005e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e58:	d10f      	bne.n	8005e7a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e84:	2b40      	cmp	r3, #64	; 0x40
 8005e86:	d007      	beq.n	8005e98 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ea0:	d94f      	bls.n	8005f42 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_SPI_Transmit+0xfa>
 8005eaa:	8afb      	ldrh	r3, [r7, #22]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d142      	bne.n	8005f36 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	881a      	ldrh	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	1c9a      	adds	r2, r3, #2
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ed4:	e02f      	b.n	8005f36 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d112      	bne.n	8005f0a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	881a      	ldrh	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	1c9a      	adds	r2, r3, #2
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f08:	e015      	b.n	8005f36 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f0a:	f7fb fc99 	bl	8001840 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d803      	bhi.n	8005f22 <HAL_SPI_Transmit+0x16c>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d102      	bne.n	8005f28 <HAL_SPI_Transmit+0x172>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d106      	bne.n	8005f36 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005f34:	e0ab      	b.n	800608e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1ca      	bne.n	8005ed6 <HAL_SPI_Transmit+0x120>
 8005f40:	e080      	b.n	8006044 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Transmit+0x19a>
 8005f4a:	8afb      	ldrh	r3, [r7, #22]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d174      	bne.n	800603a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d912      	bls.n	8005f80 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	881a      	ldrh	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	1c9a      	adds	r2, r3, #2
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b02      	subs	r3, #2
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f7e:	e05c      	b.n	800603a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	7812      	ldrb	r2, [r2, #0]
 8005f8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005fa6:	e048      	b.n	800603a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d12b      	bne.n	800600e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d912      	bls.n	8005fe6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	881a      	ldrh	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	1c9a      	adds	r2, r3, #2
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b02      	subs	r3, #2
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fe4:	e029      	b.n	800603a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	7812      	ldrb	r2, [r2, #0]
 8005ff2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800600c:	e015      	b.n	800603a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800600e:	f7fb fc17 	bl	8001840 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d803      	bhi.n	8006026 <HAL_SPI_Transmit+0x270>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d102      	bne.n	800602c <HAL_SPI_Transmit+0x276>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006038:	e029      	b.n	800608e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1b1      	bne.n	8005fa8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fcf9 	bl	8006a40 <SPI_EndRxTxTransaction>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2220      	movs	r2, #32
 8006058:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e003      	b.n	800608e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006096:	7ffb      	ldrb	r3, [r7, #31]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3720      	adds	r7, #32
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
 80060c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060c4:	e11a      	b.n	80062fc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ce:	d112      	bne.n	80060f6 <HAL_SPI_Receive+0x56>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10e      	bne.n	80060f6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2204      	movs	r2, #4
 80060dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80060e0:	88fa      	ldrh	r2, [r7, #6]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	4613      	mov	r3, r2
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f90e 	bl	800630e <HAL_SPI_TransmitReceive>
 80060f2:	4603      	mov	r3, r0
 80060f4:	e107      	b.n	8006306 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_SPI_Receive+0x64>
 8006100:	2302      	movs	r3, #2
 8006102:	e100      	b.n	8006306 <HAL_SPI_Receive+0x266>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800610c:	f7fb fb98 	bl	8001840 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_SPI_Receive+0x7e>
 8006118:	88fb      	ldrh	r3, [r7, #6]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d102      	bne.n	8006124 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006122:	e0eb      	b.n	80062fc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2204      	movs	r2, #4
 8006128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	88fa      	ldrh	r2, [r7, #6]
 800613c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800616e:	d908      	bls.n	8006182 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800617e:	605a      	str	r2, [r3, #4]
 8006180:	e007      	b.n	8006192 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006190:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619a:	d10f      	bne.n	80061bc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d007      	beq.n	80061da <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061e2:	d86f      	bhi.n	80062c4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80061e4:	e034      	b.n	8006250 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d117      	bne.n	8006224 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f103 020c 	add.w	r2, r3, #12
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	7812      	ldrb	r2, [r2, #0]
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006222:	e015      	b.n	8006250 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006224:	f7fb fb0c 	bl	8001840 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d803      	bhi.n	800623c <HAL_SPI_Receive+0x19c>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623a:	d102      	bne.n	8006242 <HAL_SPI_Receive+0x1a2>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800624e:	e055      	b.n	80062fc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1c4      	bne.n	80061e6 <HAL_SPI_Receive+0x146>
 800625c:	e038      	b.n	80062d0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b01      	cmp	r3, #1
 800626a:	d115      	bne.n	8006298 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	b292      	uxth	r2, r2
 8006278:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	1c9a      	adds	r2, r3, #2
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006296:	e015      	b.n	80062c4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006298:	f7fb fad2 	bl	8001840 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d803      	bhi.n	80062b0 <HAL_SPI_Receive+0x210>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d102      	bne.n	80062b6 <HAL_SPI_Receive+0x216>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80062c2:	e01b      	b.n	80062fc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1c6      	bne.n	800625e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 fb5b 	bl	8006990 <SPI_EndRxTransaction>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]
 80062f2:	e003      	b.n	80062fc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b08a      	sub	sp, #40	; 0x28
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800631c:	2301      	movs	r3, #1
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_SPI_TransmitReceive+0x26>
 8006330:	2302      	movs	r3, #2
 8006332:	e20a      	b.n	800674a <HAL_SPI_TransmitReceive+0x43c>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800633c:	f7fb fa80 	bl	8001840 <HAL_GetTick>
 8006340:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006348:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006350:	887b      	ldrh	r3, [r7, #2]
 8006352:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006354:	887b      	ldrh	r3, [r7, #2]
 8006356:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006358:	7efb      	ldrb	r3, [r7, #27]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d00e      	beq.n	800637c <HAL_SPI_TransmitReceive+0x6e>
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006364:	d106      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x66>
 800636e:	7efb      	ldrb	r3, [r7, #27]
 8006370:	2b04      	cmp	r3, #4
 8006372:	d003      	beq.n	800637c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006374:	2302      	movs	r3, #2
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800637a:	e1e0      	b.n	800673e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d005      	beq.n	800638e <HAL_SPI_TransmitReceive+0x80>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <HAL_SPI_TransmitReceive+0x80>
 8006388:	887b      	ldrh	r3, [r7, #2]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006394:	e1d3      	b.n	800673e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d003      	beq.n	80063aa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2205      	movs	r2, #5
 80063a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	887a      	ldrh	r2, [r7, #2]
 80063ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	887a      	ldrh	r2, [r7, #2]
 80063c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	887a      	ldrh	r2, [r7, #2]
 80063d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	887a      	ldrh	r2, [r7, #2]
 80063d6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063ec:	d802      	bhi.n	80063f4 <HAL_SPI_TransmitReceive+0xe6>
 80063ee:	8a3b      	ldrh	r3, [r7, #16]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d908      	bls.n	8006406 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	e007      	b.n	8006416 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006414:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d007      	beq.n	8006434 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800643c:	f240 8081 	bls.w	8006542 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_SPI_TransmitReceive+0x140>
 8006448:	8a7b      	ldrh	r3, [r7, #18]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d16d      	bne.n	800652a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	881a      	ldrh	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	1c9a      	adds	r2, r3, #2
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006472:	e05a      	b.n	800652a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b02      	cmp	r3, #2
 8006480:	d11b      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x1ac>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d016      	beq.n	80064ba <HAL_SPI_TransmitReceive+0x1ac>
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	2b01      	cmp	r3, #1
 8006490:	d113      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	1c9a      	adds	r2, r3, #2
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d11c      	bne.n	8006502 <HAL_SPI_TransmitReceive+0x1f4>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d016      	beq.n	8006502 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	b292      	uxth	r2, r2
 80064e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	1c9a      	adds	r2, r3, #2
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064fe:	2301      	movs	r3, #1
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006502:	f7fb f99d 	bl	8001840 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650e:	429a      	cmp	r2, r3
 8006510:	d80b      	bhi.n	800652a <HAL_SPI_TransmitReceive+0x21c>
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d007      	beq.n	800652a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006528:	e109      	b.n	800673e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d19f      	bne.n	8006474 <HAL_SPI_TransmitReceive+0x166>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d199      	bne.n	8006474 <HAL_SPI_TransmitReceive+0x166>
 8006540:	e0e3      	b.n	800670a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_SPI_TransmitReceive+0x244>
 800654a:	8a7b      	ldrh	r3, [r7, #18]
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 80cf 	bne.w	80066f0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d912      	bls.n	8006582 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	881a      	ldrh	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	1c9a      	adds	r2, r3, #2
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b02      	subs	r3, #2
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006580:	e0b6      	b.n	80066f0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	330c      	adds	r3, #12
 800658c:	7812      	ldrb	r2, [r2, #0]
 800658e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065a8:	e0a2      	b.n	80066f0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d134      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x314>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d02f      	beq.n	8006622 <HAL_SPI_TransmitReceive+0x314>
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d12c      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d912      	bls.n	80065f8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	881a      	ldrh	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	1c9a      	adds	r2, r3, #2
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3b02      	subs	r3, #2
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065f6:	e012      	b.n	800661e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	330c      	adds	r3, #12
 8006602:	7812      	ldrb	r2, [r2, #0]
 8006604:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b01      	cmp	r3, #1
 800662e:	d148      	bne.n	80066c2 <HAL_SPI_TransmitReceive+0x3b4>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d042      	beq.n	80066c2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	d923      	bls.n	8006690 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	b292      	uxth	r2, r2
 8006654:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	1c9a      	adds	r2, r3, #2
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b02      	subs	r3, #2
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b01      	cmp	r3, #1
 800667c:	d81f      	bhi.n	80066be <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	e016      	b.n	80066be <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f103 020c 	add.w	r2, r3, #12
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066be:	2301      	movs	r3, #1
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066c2:	f7fb f8bd 	bl	8001840 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d803      	bhi.n	80066da <HAL_SPI_TransmitReceive+0x3cc>
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d102      	bne.n	80066e0 <HAL_SPI_TransmitReceive+0x3d2>
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d107      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80066ee:	e026      	b.n	800673e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f47f af57 	bne.w	80065aa <HAL_SPI_TransmitReceive+0x29c>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	f47f af50 	bne.w	80065aa <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 f996 	bl	8006a40 <SPI_EndRxTxTransaction>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006734:	e003      	b.n	800673e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800674a:	4618      	mov	r0, r3
 800674c:	3728      	adds	r7, #40	; 0x28
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	4613      	mov	r3, r2
 8006762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006764:	f7fb f86c 	bl	8001840 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	1a9b      	subs	r3, r3, r2
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4413      	add	r3, r2
 8006772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006774:	f7fb f864 	bl	8001840 <HAL_GetTick>
 8006778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800677a:	4b39      	ldr	r3, [pc, #228]	; (8006860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	015b      	lsls	r3, r3, #5
 8006780:	0d1b      	lsrs	r3, r3, #20
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	fb02 f303 	mul.w	r3, r2, r3
 8006788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800678a:	e054      	b.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d050      	beq.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006794:	f7fb f854 	bl	8001840 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d902      	bls.n	80067aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d13d      	bne.n	8006826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067c2:	d111      	bne.n	80067e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067cc:	d004      	beq.n	80067d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d6:	d107      	bne.n	80067e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f0:	d10f      	bne.n	8006812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e017      	b.n	8006856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	3b01      	subs	r3, #1
 8006834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4013      	ands	r3, r2
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	bf0c      	ite	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	2300      	movne	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	429a      	cmp	r2, r3
 8006852:	d19b      	bne.n	800678c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000000 	.word	0x20000000

08006864 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08a      	sub	sp, #40	; 0x28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006876:	f7fa ffe3 	bl	8001840 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	4413      	add	r3, r2
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006886:	f7fa ffdb 	bl	8001840 <HAL_GetTick>
 800688a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	330c      	adds	r3, #12
 8006892:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006894:	4b3d      	ldr	r3, [pc, #244]	; (800698c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	00da      	lsls	r2, r3, #3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	0d1b      	lsrs	r3, r3, #20
 80068a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a6:	fb02 f303 	mul.w	r3, r2, r3
 80068aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80068ac:	e060      	b.n	8006970 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068b4:	d107      	bne.n	80068c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d050      	beq.n	8006970 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068ce:	f7fa ffb7 	bl	8001840 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068da:	429a      	cmp	r2, r3
 80068dc:	d902      	bls.n	80068e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d13d      	bne.n	8006960 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068fc:	d111      	bne.n	8006922 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006906:	d004      	beq.n	8006912 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006910:	d107      	bne.n	8006922 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006920:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692a:	d10f      	bne.n	800694c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800694a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e010      	b.n	8006982 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	3b01      	subs	r3, #1
 800696e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	4013      	ands	r3, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	429a      	cmp	r2, r3
 800697e:	d196      	bne.n	80068ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3728      	adds	r7, #40	; 0x28
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20000000 	.word	0x20000000

08006990 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069a4:	d111      	bne.n	80069ca <SPI_EndRxTransaction+0x3a>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ae:	d004      	beq.n	80069ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b8:	d107      	bne.n	80069ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2200      	movs	r2, #0
 80069d2:	2180      	movs	r1, #128	; 0x80
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7ff febd 	bl	8006754 <SPI_WaitFlagStateUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e4:	f043 0220 	orr.w	r2, r3, #32
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e023      	b.n	8006a38 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f8:	d11d      	bne.n	8006a36 <SPI_EndRxTransaction+0xa6>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a02:	d004      	beq.n	8006a0e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0c:	d113      	bne.n	8006a36 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff ff22 	bl	8006864 <SPI_WaitFifoStateUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2a:	f043 0220 	orr.w	r2, r3, #32
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e000      	b.n	8006a38 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7ff ff03 	bl	8006864 <SPI_WaitFifoStateUntilTimeout>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d007      	beq.n	8006a74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a68:	f043 0220 	orr.w	r2, r3, #32
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e027      	b.n	8006ac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2180      	movs	r1, #128	; 0x80
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff fe68 	bl	8006754 <SPI_WaitFlagStateUntilTimeout>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d007      	beq.n	8006a9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8e:	f043 0220 	orr.w	r2, r3, #32
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e014      	b.n	8006ac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f7ff fedc 	bl	8006864 <SPI_WaitFifoStateUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab6:	f043 0220 	orr.w	r2, r3, #32
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e000      	b.n	8006ac4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e040      	b.n	8006b60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fa fcd4 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2224      	movs	r2, #36	; 0x24
 8006af8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0201 	bic.w	r2, r2, #1
 8006b08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f8b6 	bl	8006c7c <UART_SetConfig>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e022      	b.n	8006b60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa7e 	bl	8007024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fb05 	bl	8007168 <UART_CheckIdleState>
 8006b5e:	4603      	mov	r3, r0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08a      	sub	sp, #40	; 0x28
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	d178      	bne.n	8006c72 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_UART_Transmit+0x24>
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e071      	b.n	8006c74 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2221      	movs	r2, #33	; 0x21
 8006b9c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b9e:	f7fa fe4f 	bl	8001840 <HAL_GetTick>
 8006ba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	88fa      	ldrh	r2, [r7, #6]
 8006ba8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	88fa      	ldrh	r2, [r7, #6]
 8006bb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bbc:	d108      	bne.n	8006bd0 <HAL_UART_Transmit+0x68>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	e003      	b.n	8006bd8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bd8:	e030      	b.n	8006c3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2200      	movs	r2, #0
 8006be2:	2180      	movs	r1, #128	; 0x80
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 fb67 	bl	80072b8 <UART_WaitOnFlagUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e03c      	b.n	8006c74 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10b      	bne.n	8006c18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	881a      	ldrh	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c0c:	b292      	uxth	r2, r2
 8006c0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	3302      	adds	r3, #2
 8006c14:	61bb      	str	r3, [r7, #24]
 8006c16:	e008      	b.n	8006c2a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	781a      	ldrb	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	b292      	uxth	r2, r2
 8006c22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	3301      	adds	r3, #1
 8006c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1c8      	bne.n	8006bda <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2140      	movs	r1, #64	; 0x40
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 fb30 	bl	80072b8 <UART_WaitOnFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2220      	movs	r2, #32
 8006c62:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e005      	b.n	8006c74 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e000      	b.n	8006c74 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006c72:	2302      	movs	r3, #2
  }
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006caa:	f023 030c 	bic.w	r3, r3, #12
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	6979      	ldr	r1, [r7, #20]
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4aa7      	ldr	r2, [pc, #668]	; (8006f94 <UART_SetConfig+0x318>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d120      	bne.n	8006d3e <UART_SetConfig+0xc2>
 8006cfc:	4ba6      	ldr	r3, [pc, #664]	; (8006f98 <UART_SetConfig+0x31c>)
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d817      	bhi.n	8006d38 <UART_SetConfig+0xbc>
 8006d08:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <UART_SetConfig+0x94>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d21 	.word	0x08006d21
 8006d14:	08006d2d 	.word	0x08006d2d
 8006d18:	08006d33 	.word	0x08006d33
 8006d1c:	08006d27 	.word	0x08006d27
 8006d20:	2301      	movs	r3, #1
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e0b5      	b.n	8006e92 <UART_SetConfig+0x216>
 8006d26:	2302      	movs	r3, #2
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e0b2      	b.n	8006e92 <UART_SetConfig+0x216>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e0af      	b.n	8006e92 <UART_SetConfig+0x216>
 8006d32:	2308      	movs	r3, #8
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e0ac      	b.n	8006e92 <UART_SetConfig+0x216>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e0a9      	b.n	8006e92 <UART_SetConfig+0x216>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a96      	ldr	r2, [pc, #600]	; (8006f9c <UART_SetConfig+0x320>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d124      	bne.n	8006d92 <UART_SetConfig+0x116>
 8006d48:	4b93      	ldr	r3, [pc, #588]	; (8006f98 <UART_SetConfig+0x31c>)
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d54:	d011      	beq.n	8006d7a <UART_SetConfig+0xfe>
 8006d56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d5a:	d817      	bhi.n	8006d8c <UART_SetConfig+0x110>
 8006d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d60:	d011      	beq.n	8006d86 <UART_SetConfig+0x10a>
 8006d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d66:	d811      	bhi.n	8006d8c <UART_SetConfig+0x110>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <UART_SetConfig+0xf8>
 8006d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d70:	d006      	beq.n	8006d80 <UART_SetConfig+0x104>
 8006d72:	e00b      	b.n	8006d8c <UART_SetConfig+0x110>
 8006d74:	2300      	movs	r3, #0
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	e08b      	b.n	8006e92 <UART_SetConfig+0x216>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	e088      	b.n	8006e92 <UART_SetConfig+0x216>
 8006d80:	2304      	movs	r3, #4
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e085      	b.n	8006e92 <UART_SetConfig+0x216>
 8006d86:	2308      	movs	r3, #8
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e082      	b.n	8006e92 <UART_SetConfig+0x216>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e07f      	b.n	8006e92 <UART_SetConfig+0x216>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a82      	ldr	r2, [pc, #520]	; (8006fa0 <UART_SetConfig+0x324>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d124      	bne.n	8006de6 <UART_SetConfig+0x16a>
 8006d9c:	4b7e      	ldr	r3, [pc, #504]	; (8006f98 <UART_SetConfig+0x31c>)
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006da4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006da8:	d011      	beq.n	8006dce <UART_SetConfig+0x152>
 8006daa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006dae:	d817      	bhi.n	8006de0 <UART_SetConfig+0x164>
 8006db0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006db4:	d011      	beq.n	8006dda <UART_SetConfig+0x15e>
 8006db6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006dba:	d811      	bhi.n	8006de0 <UART_SetConfig+0x164>
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <UART_SetConfig+0x14c>
 8006dc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dc4:	d006      	beq.n	8006dd4 <UART_SetConfig+0x158>
 8006dc6:	e00b      	b.n	8006de0 <UART_SetConfig+0x164>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e061      	b.n	8006e92 <UART_SetConfig+0x216>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e05e      	b.n	8006e92 <UART_SetConfig+0x216>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e05b      	b.n	8006e92 <UART_SetConfig+0x216>
 8006dda:	2308      	movs	r3, #8
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e058      	b.n	8006e92 <UART_SetConfig+0x216>
 8006de0:	2310      	movs	r3, #16
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e055      	b.n	8006e92 <UART_SetConfig+0x216>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a6e      	ldr	r2, [pc, #440]	; (8006fa4 <UART_SetConfig+0x328>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d124      	bne.n	8006e3a <UART_SetConfig+0x1be>
 8006df0:	4b69      	ldr	r3, [pc, #420]	; (8006f98 <UART_SetConfig+0x31c>)
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006df8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dfc:	d011      	beq.n	8006e22 <UART_SetConfig+0x1a6>
 8006dfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e02:	d817      	bhi.n	8006e34 <UART_SetConfig+0x1b8>
 8006e04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e08:	d011      	beq.n	8006e2e <UART_SetConfig+0x1b2>
 8006e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e0e:	d811      	bhi.n	8006e34 <UART_SetConfig+0x1b8>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <UART_SetConfig+0x1a0>
 8006e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e18:	d006      	beq.n	8006e28 <UART_SetConfig+0x1ac>
 8006e1a:	e00b      	b.n	8006e34 <UART_SetConfig+0x1b8>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e037      	b.n	8006e92 <UART_SetConfig+0x216>
 8006e22:	2302      	movs	r3, #2
 8006e24:	77fb      	strb	r3, [r7, #31]
 8006e26:	e034      	b.n	8006e92 <UART_SetConfig+0x216>
 8006e28:	2304      	movs	r3, #4
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e031      	b.n	8006e92 <UART_SetConfig+0x216>
 8006e2e:	2308      	movs	r3, #8
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e02e      	b.n	8006e92 <UART_SetConfig+0x216>
 8006e34:	2310      	movs	r3, #16
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e02b      	b.n	8006e92 <UART_SetConfig+0x216>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a5a      	ldr	r2, [pc, #360]	; (8006fa8 <UART_SetConfig+0x32c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d124      	bne.n	8006e8e <UART_SetConfig+0x212>
 8006e44:	4b54      	ldr	r3, [pc, #336]	; (8006f98 <UART_SetConfig+0x31c>)
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006e4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e50:	d011      	beq.n	8006e76 <UART_SetConfig+0x1fa>
 8006e52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e56:	d817      	bhi.n	8006e88 <UART_SetConfig+0x20c>
 8006e58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e5c:	d011      	beq.n	8006e82 <UART_SetConfig+0x206>
 8006e5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e62:	d811      	bhi.n	8006e88 <UART_SetConfig+0x20c>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <UART_SetConfig+0x1f4>
 8006e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e6c:	d006      	beq.n	8006e7c <UART_SetConfig+0x200>
 8006e6e:	e00b      	b.n	8006e88 <UART_SetConfig+0x20c>
 8006e70:	2300      	movs	r3, #0
 8006e72:	77fb      	strb	r3, [r7, #31]
 8006e74:	e00d      	b.n	8006e92 <UART_SetConfig+0x216>
 8006e76:	2302      	movs	r3, #2
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e00a      	b.n	8006e92 <UART_SetConfig+0x216>
 8006e7c:	2304      	movs	r3, #4
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e007      	b.n	8006e92 <UART_SetConfig+0x216>
 8006e82:	2308      	movs	r3, #8
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e004      	b.n	8006e92 <UART_SetConfig+0x216>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e001      	b.n	8006e92 <UART_SetConfig+0x216>
 8006e8e:	2310      	movs	r3, #16
 8006e90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e9a:	d15b      	bne.n	8006f54 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006e9c:	7ffb      	ldrb	r3, [r7, #31]
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	d827      	bhi.n	8006ef2 <UART_SetConfig+0x276>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x22c>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006ed5 	.word	0x08006ed5
 8006eb0:	08006edd 	.word	0x08006edd
 8006eb4:	08006ef3 	.word	0x08006ef3
 8006eb8:	08006ee3 	.word	0x08006ee3
 8006ebc:	08006ef3 	.word	0x08006ef3
 8006ec0:	08006ef3 	.word	0x08006ef3
 8006ec4:	08006ef3 	.word	0x08006ef3
 8006ec8:	08006eeb 	.word	0x08006eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ecc:	f7fe fcd4 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8006ed0:	61b8      	str	r0, [r7, #24]
        break;
 8006ed2:	e013      	b.n	8006efc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ed4:	f7fe fcf2 	bl	80058bc <HAL_RCC_GetPCLK2Freq>
 8006ed8:	61b8      	str	r0, [r7, #24]
        break;
 8006eda:	e00f      	b.n	8006efc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006edc:	4b33      	ldr	r3, [pc, #204]	; (8006fac <UART_SetConfig+0x330>)
 8006ede:	61bb      	str	r3, [r7, #24]
        break;
 8006ee0:	e00c      	b.n	8006efc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ee2:	f7fe fc53 	bl	800578c <HAL_RCC_GetSysClockFreq>
 8006ee6:	61b8      	str	r0, [r7, #24]
        break;
 8006ee8:	e008      	b.n	8006efc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eee:	61bb      	str	r3, [r7, #24]
        break;
 8006ef0:	e004      	b.n	8006efc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	77bb      	strb	r3, [r7, #30]
        break;
 8006efa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 8082 	beq.w	8007008 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	005a      	lsls	r2, r3, #1
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	085b      	lsrs	r3, r3, #1
 8006f0e:	441a      	add	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b0f      	cmp	r3, #15
 8006f1e:	d916      	bls.n	8006f4e <UART_SetConfig+0x2d2>
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f26:	d212      	bcs.n	8006f4e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	f023 030f 	bic.w	r3, r3, #15
 8006f30:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	085b      	lsrs	r3, r3, #1
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	89fb      	ldrh	r3, [r7, #14]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	89fa      	ldrh	r2, [r7, #14]
 8006f4a:	60da      	str	r2, [r3, #12]
 8006f4c:	e05c      	b.n	8007008 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	77bb      	strb	r3, [r7, #30]
 8006f52:	e059      	b.n	8007008 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f54:	7ffb      	ldrb	r3, [r7, #31]
 8006f56:	2b08      	cmp	r3, #8
 8006f58:	d835      	bhi.n	8006fc6 <UART_SetConfig+0x34a>
 8006f5a:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <UART_SetConfig+0x2e4>)
 8006f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f60:	08006f85 	.word	0x08006f85
 8006f64:	08006f8d 	.word	0x08006f8d
 8006f68:	08006fb1 	.word	0x08006fb1
 8006f6c:	08006fc7 	.word	0x08006fc7
 8006f70:	08006fb7 	.word	0x08006fb7
 8006f74:	08006fc7 	.word	0x08006fc7
 8006f78:	08006fc7 	.word	0x08006fc7
 8006f7c:	08006fc7 	.word	0x08006fc7
 8006f80:	08006fbf 	.word	0x08006fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f84:	f7fe fc78 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8006f88:	61b8      	str	r0, [r7, #24]
        break;
 8006f8a:	e021      	b.n	8006fd0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f8c:	f7fe fc96 	bl	80058bc <HAL_RCC_GetPCLK2Freq>
 8006f90:	61b8      	str	r0, [r7, #24]
        break;
 8006f92:	e01d      	b.n	8006fd0 <UART_SetConfig+0x354>
 8006f94:	40013800 	.word	0x40013800
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	40004400 	.word	0x40004400
 8006fa0:	40004800 	.word	0x40004800
 8006fa4:	40004c00 	.word	0x40004c00
 8006fa8:	40005000 	.word	0x40005000
 8006fac:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb0:	4b1b      	ldr	r3, [pc, #108]	; (8007020 <UART_SetConfig+0x3a4>)
 8006fb2:	61bb      	str	r3, [r7, #24]
        break;
 8006fb4:	e00c      	b.n	8006fd0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb6:	f7fe fbe9 	bl	800578c <HAL_RCC_GetSysClockFreq>
 8006fba:	61b8      	str	r0, [r7, #24]
        break;
 8006fbc:	e008      	b.n	8006fd0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc2:	61bb      	str	r3, [r7, #24]
        break;
 8006fc4:	e004      	b.n	8006fd0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	77bb      	strb	r3, [r7, #30]
        break;
 8006fce:	bf00      	nop
    }

    if (pclk != 0U)
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d018      	beq.n	8007008 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	085a      	lsrs	r2, r3, #1
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	441a      	add	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	2b0f      	cmp	r3, #15
 8006fee:	d909      	bls.n	8007004 <UART_SetConfig+0x388>
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff6:	d205      	bcs.n	8007004 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	60da      	str	r2, [r3, #12]
 8007002:	e001      	b.n	8007008 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007014:	7fbb      	ldrb	r3, [r7, #30]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3720      	adds	r7, #32
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	007a1200 	.word	0x007a1200

08007024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01a      	beq.n	800713a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007122:	d10a      	bne.n	800713a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	605a      	str	r2, [r3, #4]
  }
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b098      	sub	sp, #96	; 0x60
 800716c:	af02      	add	r7, sp, #8
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007178:	f7fa fb62 	bl	8001840 <HAL_GetTick>
 800717c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0308 	and.w	r3, r3, #8
 8007188:	2b08      	cmp	r3, #8
 800718a:	d12e      	bne.n	80071ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800718c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007194:	2200      	movs	r2, #0
 8007196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f88c 	bl	80072b8 <UART_WaitOnFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d021      	beq.n	80071ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ba:	653b      	str	r3, [r7, #80]	; 0x50
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071c4:	647b      	str	r3, [r7, #68]	; 0x44
 80071c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e6      	bne.n	80071a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e062      	b.n	80072b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d149      	bne.n	800728c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007200:	2200      	movs	r2, #0
 8007202:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f856 	bl	80072b8 <UART_WaitOnFlagUntilTimeout>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d03c      	beq.n	800728c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	623b      	str	r3, [r7, #32]
   return(result);
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007230:	633b      	str	r3, [r7, #48]	; 0x30
 8007232:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e6      	bne.n	8007212 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3308      	adds	r3, #8
 800724a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	60fb      	str	r3, [r7, #12]
   return(result);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	64bb      	str	r3, [r7, #72]	; 0x48
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007264:	61fa      	str	r2, [r7, #28]
 8007266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	69b9      	ldr	r1, [r7, #24]
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	617b      	str	r3, [r7, #20]
   return(result);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e5      	bne.n	8007244 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e011      	b.n	80072b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2220      	movs	r2, #32
 8007290:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3758      	adds	r7, #88	; 0x58
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072c8:	e049      	b.n	800735e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d0:	d045      	beq.n	800735e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d2:	f7fa fab5 	bl	8001840 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d302      	bcc.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e048      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d031      	beq.n	800735e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b08      	cmp	r3, #8
 8007306:	d110      	bne.n	800732a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2208      	movs	r2, #8
 800730e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f838 	bl	8007386 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2208      	movs	r2, #8
 800731a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e029      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007338:	d111      	bne.n	800735e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f81e 	bl	8007386 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2220      	movs	r2, #32
 800734e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e00f      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4013      	ands	r3, r2
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	429a      	cmp	r2, r3
 800736c:	bf0c      	ite	eq
 800736e:	2301      	moveq	r3, #1
 8007370:	2300      	movne	r3, #0
 8007372:	b2db      	uxtb	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	429a      	cmp	r2, r3
 800737a:	d0a6      	beq.n	80072ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007386:	b480      	push	{r7}
 8007388:	b095      	sub	sp, #84	; 0x54
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ac:	643b      	str	r3, [r7, #64]	; 0x40
 80073ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e6      	bne.n	800738e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3308      	adds	r3, #8
 80073c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f023 0301 	bic.w	r3, r3, #1
 80073d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3308      	adds	r3, #8
 80073de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e5      	bne.n	80073c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d118      	bne.n	800742e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	60bb      	str	r3, [r7, #8]
   return(result);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f023 0310 	bic.w	r3, r3, #16
 8007410:	647b      	str	r3, [r7, #68]	; 0x44
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800741a:	61bb      	str	r3, [r7, #24]
 800741c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6979      	ldr	r1, [r7, #20]
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	613b      	str	r3, [r7, #16]
   return(result);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e6      	bne.n	80073fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007442:	bf00      	nop
 8007444:	3754      	adds	r7, #84	; 0x54
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800745e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007462:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	b29a      	uxth	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007484:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007488:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007490:	b29a      	uxth	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	b29b      	uxth	r3, r3
 8007496:	43db      	mvns	r3, r3
 8007498:	b29b      	uxth	r3, r3
 800749a:	4013      	ands	r3, r2
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074b2:	b084      	sub	sp, #16
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	f107 0014 	add.w	r0, r7, #20
 80074c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	b004      	add	sp, #16
 80074f2:	4770      	bx	lr

080074f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b09d      	sub	sp, #116	; 0x74
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	b29b      	uxth	r3, r3
 8007512:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	78db      	ldrb	r3, [r3, #3]
 8007522:	2b03      	cmp	r3, #3
 8007524:	d81f      	bhi.n	8007566 <USB_ActivateEndpoint+0x72>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <USB_ActivateEndpoint+0x38>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	0800753d 	.word	0x0800753d
 8007530:	08007559 	.word	0x08007559
 8007534:	0800756f 	.word	0x0800756f
 8007538:	0800754b 	.word	0x0800754b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800753c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007544:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007548:	e012      	b.n	8007570 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800754a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800754e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007552:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007556:	e00b      	b.n	8007570 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007558:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800755c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007560:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007564:	e004      	b.n	8007570 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800756c:	e000      	b.n	8007570 <USB_ActivateEndpoint+0x7c>
      break;
 800756e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	441a      	add	r2, r3
 800757a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800757e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800758a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800758e:	b29b      	uxth	r3, r3
 8007590:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	b21b      	sxth	r3, r3
 80075a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075aa:	b21a      	sxth	r2, r3
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	b21b      	sxth	r3, r3
 80075b2:	4313      	orrs	r3, r2
 80075b4:	b21b      	sxth	r3, r3
 80075b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	441a      	add	r2, r3
 80075c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80075c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d8:	b29b      	uxth	r3, r3
 80075da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	7b1b      	ldrb	r3, [r3, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f040 8178 	bne.w	80078d6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8084 	beq.w	80076f8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	61bb      	str	r3, [r7, #24]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	4413      	add	r3, r2
 8007602:	61bb      	str	r3, [r7, #24]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	011a      	lsls	r2, r3, #4
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	88db      	ldrh	r3, [r3, #6]
 8007618:	085b      	lsrs	r3, r3, #1
 800761a:	b29b      	uxth	r3, r3
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	827b      	strh	r3, [r7, #18]
 8007632:	8a7b      	ldrh	r3, [r7, #18]
 8007634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01b      	beq.n	8007674 <USB_ActivateEndpoint+0x180>
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	b29b      	uxth	r3, r3
 800764a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007652:	823b      	strh	r3, [r7, #16]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	441a      	add	r2, r3
 800765e:	8a3b      	ldrh	r3, [r7, #16]
 8007660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800766c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007670:	b29b      	uxth	r3, r3
 8007672:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	78db      	ldrb	r3, [r3, #3]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d020      	beq.n	80076be <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	b29b      	uxth	r3, r3
 800768a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007692:	81bb      	strh	r3, [r7, #12]
 8007694:	89bb      	ldrh	r3, [r7, #12]
 8007696:	f083 0320 	eor.w	r3, r3, #32
 800769a:	81bb      	strh	r3, [r7, #12]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	441a      	add	r2, r3
 80076a6:	89bb      	ldrh	r3, [r7, #12]
 80076a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	8013      	strh	r3, [r2, #0]
 80076bc:	e2d5      	b.n	8007c6a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d4:	81fb      	strh	r3, [r7, #14]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	441a      	add	r2, r3
 80076e0:	89fb      	ldrh	r3, [r7, #14]
 80076e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	8013      	strh	r3, [r2, #0]
 80076f6:	e2b8      	b.n	8007c6a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	633b      	str	r3, [r7, #48]	; 0x30
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007702:	b29b      	uxth	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	4413      	add	r3, r2
 800770a:	633b      	str	r3, [r7, #48]	; 0x30
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	011a      	lsls	r2, r3, #4
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	4413      	add	r3, r2
 8007716:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800771a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	88db      	ldrh	r3, [r3, #6]
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	b29b      	uxth	r3, r3
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007736:	b29b      	uxth	r3, r3
 8007738:	461a      	mov	r2, r3
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	4413      	add	r3, r2
 800773e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	011a      	lsls	r2, r3, #4
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	4413      	add	r3, r2
 800774a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800775a:	b29a      	uxth	r2, r3
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	2b3e      	cmp	r3, #62	; 0x3e
 8007766:	d91d      	bls.n	80077a4 <USB_ActivateEndpoint+0x2b0>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	095b      	lsrs	r3, r3, #5
 800776e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	2b00      	cmp	r3, #0
 800777a:	d102      	bne.n	8007782 <USB_ActivateEndpoint+0x28e>
 800777c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800777e:	3b01      	subs	r3, #1
 8007780:	66bb      	str	r3, [r7, #104]	; 0x68
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29a      	uxth	r2, r3
 8007788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800778a:	b29b      	uxth	r3, r3
 800778c:	029b      	lsls	r3, r3, #10
 800778e:	b29b      	uxth	r3, r3
 8007790:	4313      	orrs	r3, r2
 8007792:	b29b      	uxth	r3, r3
 8007794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779c:	b29a      	uxth	r2, r3
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	e026      	b.n	80077f2 <USB_ActivateEndpoint+0x2fe>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10a      	bne.n	80077c2 <USB_ActivateEndpoint+0x2ce>
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	e017      	b.n	80077f2 <USB_ActivateEndpoint+0x2fe>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	085b      	lsrs	r3, r3, #1
 80077c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <USB_ActivateEndpoint+0x2e8>
 80077d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077d8:	3301      	adds	r3, #1
 80077da:	66bb      	str	r3, [r7, #104]	; 0x68
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	029b      	lsls	r3, r3, #10
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4313      	orrs	r3, r2
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8007800:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d01b      	beq.n	8007842 <USB_ActivateEndpoint+0x34e>
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007820:	843b      	strh	r3, [r7, #32]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	441a      	add	r2, r3
 800782c:	8c3b      	ldrh	r3, [r7, #32]
 800782e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007836:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800783a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783e:	b29b      	uxth	r3, r3
 8007840:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d124      	bne.n	8007894 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800785c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007860:	83bb      	strh	r3, [r7, #28]
 8007862:	8bbb      	ldrh	r3, [r7, #28]
 8007864:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007868:	83bb      	strh	r3, [r7, #28]
 800786a:	8bbb      	ldrh	r3, [r7, #28]
 800786c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007870:	83bb      	strh	r3, [r7, #28]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	441a      	add	r2, r3
 800787c:	8bbb      	ldrh	r3, [r7, #28]
 800787e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788e:	b29b      	uxth	r3, r3
 8007890:	8013      	strh	r3, [r2, #0]
 8007892:	e1ea      	b.n	8007c6a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	83fb      	strh	r3, [r7, #30]
 80078ac:	8bfb      	ldrh	r3, [r7, #30]
 80078ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078b2:	83fb      	strh	r3, [r7, #30]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	441a      	add	r2, r3
 80078be:	8bfb      	ldrh	r3, [r7, #30]
 80078c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	8013      	strh	r3, [r2, #0]
 80078d4:	e1c9      	b.n	8007c6a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	78db      	ldrb	r3, [r3, #3]
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d11e      	bne.n	800791c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	441a      	add	r2, r3
 8007902:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	b29b      	uxth	r3, r3
 8007918:	8013      	strh	r3, [r2, #0]
 800791a:	e01d      	b.n	8007958 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800792e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007932:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	441a      	add	r2, r3
 8007940:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800794c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007954:	b29b      	uxth	r3, r3
 8007956:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007962:	b29b      	uxth	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007968:	4413      	add	r3, r2
 800796a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	011a      	lsls	r2, r3, #4
 8007972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007974:	4413      	add	r3, r2
 8007976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800797a:	65bb      	str	r3, [r7, #88]	; 0x58
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	891b      	ldrh	r3, [r3, #8]
 8007980:	085b      	lsrs	r3, r3, #1
 8007982:	b29b      	uxth	r3, r3
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	b29a      	uxth	r2, r3
 8007988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800798a:	801a      	strh	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	657b      	str	r3, [r7, #84]	; 0x54
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007996:	b29b      	uxth	r3, r3
 8007998:	461a      	mov	r2, r3
 800799a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800799c:	4413      	add	r3, r2
 800799e:	657b      	str	r3, [r7, #84]	; 0x54
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	011a      	lsls	r2, r3, #4
 80079a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80079ae:	653b      	str	r3, [r7, #80]	; 0x50
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	895b      	ldrh	r3, [r3, #10]
 80079b4:	085b      	lsrs	r3, r3, #1
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079be:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	785b      	ldrb	r3, [r3, #1]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f040 8093 	bne.w	8007af0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80079da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80079de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01b      	beq.n	8007a1e <USB_ActivateEndpoint+0x52a>
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	441a      	add	r2, r3
 8007a08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007a2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d01b      	beq.n	8007a6e <USB_ActivateEndpoint+0x57a>
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	441a      	add	r2, r3
 8007a58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a84:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a86:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a8c:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a94:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	441a      	add	r2, r3
 8007aa0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007acc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	441a      	add	r2, r3
 8007ad8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8013      	strh	r3, [r2, #0]
 8007aee:	e0bc      	b.n	8007c6a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007b00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01d      	beq.n	8007b48 <USB_ActivateEndpoint+0x654>
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b22:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	441a      	add	r2, r3
 8007b30:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007b58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01d      	beq.n	8007ba0 <USB_ActivateEndpoint+0x6ac>
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	441a      	add	r2, r3
 8007b88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	78db      	ldrb	r3, [r3, #3]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d024      	beq.n	8007bf2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007bc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007bc6:	f083 0320 	eor.w	r3, r3, #32
 8007bca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	441a      	add	r2, r3
 8007bd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	8013      	strh	r3, [r2, #0]
 8007bf0:	e01d      	b.n	8007c2e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	441a      	add	r2, r3
 8007c16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	441a      	add	r2, r3
 8007c52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007c6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3774      	adds	r7, #116	; 0x74
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop

08007c7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b08d      	sub	sp, #52	; 0x34
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	7b1b      	ldrb	r3, [r3, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f040 808e 	bne.w	8007dac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	785b      	ldrb	r3, [r3, #1]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d044      	beq.n	8007d22 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	81bb      	strh	r3, [r7, #12]
 8007ca6:	89bb      	ldrh	r3, [r7, #12]
 8007ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01b      	beq.n	8007ce8 <USB_DeactivateEndpoint+0x6c>
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc6:	817b      	strh	r3, [r7, #10]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	441a      	add	r2, r3
 8007cd2:	897b      	ldrh	r3, [r7, #10]
 8007cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfe:	813b      	strh	r3, [r7, #8]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	441a      	add	r2, r3
 8007d0a:	893b      	ldrh	r3, [r7, #8]
 8007d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	8013      	strh	r3, [r2, #0]
 8007d20:	e192      	b.n	8008048 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	827b      	strh	r3, [r7, #18]
 8007d30:	8a7b      	ldrh	r3, [r7, #18]
 8007d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01b      	beq.n	8007d72 <USB_DeactivateEndpoint+0xf6>
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d50:	823b      	strh	r3, [r7, #16]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	441a      	add	r2, r3
 8007d5c:	8a3b      	ldrh	r3, [r7, #16]
 8007d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d88:	81fb      	strh	r3, [r7, #14]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	441a      	add	r2, r3
 8007d94:	89fb      	ldrh	r3, [r7, #14]
 8007d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	8013      	strh	r3, [r2, #0]
 8007daa:	e14d      	b.n	8008048 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	785b      	ldrb	r3, [r3, #1]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f040 80a5 	bne.w	8007f00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	843b      	strh	r3, [r7, #32]
 8007dc4:	8c3b      	ldrh	r3, [r7, #32]
 8007dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d01b      	beq.n	8007e06 <USB_DeactivateEndpoint+0x18a>
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de4:	83fb      	strh	r3, [r7, #30]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	441a      	add	r2, r3
 8007df0:	8bfb      	ldrh	r3, [r7, #30]
 8007df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	83bb      	strh	r3, [r7, #28]
 8007e14:	8bbb      	ldrh	r3, [r7, #28]
 8007e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d01b      	beq.n	8007e56 <USB_DeactivateEndpoint+0x1da>
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e34:	837b      	strh	r3, [r7, #26]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	441a      	add	r2, r3
 8007e40:	8b7b      	ldrh	r3, [r7, #26]
 8007e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6c:	833b      	strh	r3, [r7, #24]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	441a      	add	r2, r3
 8007e78:	8b3b      	ldrh	r3, [r7, #24]
 8007e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea4:	82fb      	strh	r3, [r7, #22]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	441a      	add	r2, r3
 8007eb0:	8afb      	ldrh	r3, [r7, #22]
 8007eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007edc:	82bb      	strh	r3, [r7, #20]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	441a      	add	r2, r3
 8007ee8:	8abb      	ldrh	r3, [r7, #20]
 8007eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	8013      	strh	r3, [r2, #0]
 8007efe:	e0a3      	b.n	8008048 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007f0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01b      	beq.n	8007f50 <USB_DeactivateEndpoint+0x2d4>
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	441a      	add	r2, r3
 8007f3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01b      	beq.n	8007fa0 <USB_DeactivateEndpoint+0x324>
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	441a      	add	r2, r3
 8007f8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	441a      	add	r2, r3
 8007fc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800c:	b29b      	uxth	r3, r3
 800800e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008026:	847b      	strh	r3, [r7, #34]	; 0x22
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	441a      	add	r2, r3
 8008032:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800803c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008044:	b29b      	uxth	r3, r3
 8008046:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3734      	adds	r7, #52	; 0x34
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b0c2      	sub	sp, #264	; 0x108
 800805a:	af00      	add	r7, sp, #0
 800805c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008064:	6018      	str	r0, [r3, #0]
 8008066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800806e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	2b01      	cmp	r3, #1
 800807e:	f040 86b7 	bne.w	8008df0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699a      	ldr	r2, [r3, #24]
 800808e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	429a      	cmp	r2, r3
 800809c:	d908      	bls.n	80080b0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800809e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080ae:	e007      	b.n	80080c0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80080b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80080c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	7b1b      	ldrb	r3, [r3, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d13a      	bne.n	8008146 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80080d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6959      	ldr	r1, [r3, #20]
 80080dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	88da      	ldrh	r2, [r3, #6]
 80080e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80080f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80080f6:	6800      	ldr	r0, [r0, #0]
 80080f8:	f001 fc8c 	bl	8009a14 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80080fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008100:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008116:	b29b      	uxth	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	4413      	add	r3, r2
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	011a      	lsls	r2, r3, #4
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	4413      	add	r3, r2
 8008132:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800813c:	b29a      	uxth	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	f000 be1f 	b.w	8008d84 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	78db      	ldrb	r3, [r3, #3]
 8008152:	2b02      	cmp	r3, #2
 8008154:	f040 8462 	bne.w	8008a1c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6a1a      	ldr	r2, [r3, #32]
 8008164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	429a      	cmp	r2, r3
 8008172:	f240 83df 	bls.w	8008934 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	b29b      	uxth	r3, r3
 8008194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80081a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	441a      	add	r2, r3
 80081ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80081ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80081d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6a1a      	ldr	r2, [r3, #32]
 80081de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e2:	1ad2      	subs	r2, r2, r3
 80081e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 81c7 	beq.w	80085a6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	633b      	str	r3, [r7, #48]	; 0x30
 8008224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d177      	bne.n	8008324 <USB_EPStartXfer+0x2ce>
 8008234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800824e:	b29b      	uxth	r3, r3
 8008250:	461a      	mov	r2, r3
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	4413      	add	r3, r2
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28
 8008258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	011a      	lsls	r2, r3, #4
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	4413      	add	r3, r2
 800826a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	b29b      	uxth	r3, r3
 8008276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800827a:	b29a      	uxth	r2, r3
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008284:	2b3e      	cmp	r3, #62	; 0x3e
 8008286:	d921      	bls.n	80082cc <USB_EPStartXfer+0x276>
 8008288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828c:	095b      	lsrs	r3, r3, #5
 800828e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008296:	f003 031f 	and.w	r3, r3, #31
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <USB_EPStartXfer+0x252>
 800829e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082a2:	3b01      	subs	r3, #1
 80082a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	029b      	lsls	r3, r3, #10
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	4313      	orrs	r3, r2
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	801a      	strh	r2, [r3, #0]
 80082ca:	e050      	b.n	800836e <USB_EPStartXfer+0x318>
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <USB_EPStartXfer+0x294>
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	801a      	strh	r2, [r3, #0]
 80082e8:	e041      	b.n	800836e <USB_EPStartXfer+0x318>
 80082ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ee:	085b      	lsrs	r3, r3, #1
 80082f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d004      	beq.n	800830a <USB_EPStartXfer+0x2b4>
 8008300:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008304:	3301      	adds	r3, #1
 8008306:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29a      	uxth	r2, r3
 8008310:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008314:	b29b      	uxth	r3, r3
 8008316:	029b      	lsls	r3, r3, #10
 8008318:	b29b      	uxth	r3, r3
 800831a:	4313      	orrs	r3, r2
 800831c:	b29a      	uxth	r2, r3
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	801a      	strh	r2, [r3, #0]
 8008322:	e024      	b.n	800836e <USB_EPStartXfer+0x318>
 8008324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d11c      	bne.n	800836e <USB_EPStartXfer+0x318>
 8008334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008342:	b29b      	uxth	r3, r3
 8008344:	461a      	mov	r2, r3
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	4413      	add	r3, r2
 800834a:	633b      	str	r3, [r7, #48]	; 0x30
 800834c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	011a      	lsls	r2, r3, #4
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	4413      	add	r3, r2
 800835e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008368:	b29a      	uxth	r2, r3
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800836e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	895b      	ldrh	r3, [r3, #10]
 800837a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800837e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6959      	ldr	r1, [r3, #20]
 800838a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838e:	b29b      	uxth	r3, r3
 8008390:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008394:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008398:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800839c:	6800      	ldr	r0, [r0, #0]
 800839e:	f001 fb39 	bl	8009a14 <USB_WritePMA>
            ep->xfer_buff += len;
 80083a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695a      	ldr	r2, [r3, #20]
 80083ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b2:	441a      	add	r2, r3
 80083b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80083c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6a1a      	ldr	r2, [r3, #32]
 80083cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d90f      	bls.n	80083fc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80083dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6a1a      	ldr	r2, [r3, #32]
 80083e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ec:	1ad2      	subs	r2, r2, r3
 80083ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	621a      	str	r2, [r3, #32]
 80083fa:	e00e      	b.n	800841a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80083fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800840c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2200      	movs	r2, #0
 8008418:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800841a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	785b      	ldrb	r3, [r3, #1]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d177      	bne.n	800851a <USB_EPStartXfer+0x4c4>
 800842a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800842e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	61bb      	str	r3, [r7, #24]
 8008436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800843a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008444:	b29b      	uxth	r3, r3
 8008446:	461a      	mov	r2, r3
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	4413      	add	r3, r2
 800844c:	61bb      	str	r3, [r7, #24]
 800844e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	011a      	lsls	r2, r3, #4
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	4413      	add	r3, r2
 8008460:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008470:	b29a      	uxth	r2, r3
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800847a:	2b3e      	cmp	r3, #62	; 0x3e
 800847c:	d921      	bls.n	80084c2 <USB_EPStartXfer+0x46c>
 800847e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800848c:	f003 031f 	and.w	r3, r3, #31
 8008490:	2b00      	cmp	r3, #0
 8008492:	d104      	bne.n	800849e <USB_EPStartXfer+0x448>
 8008494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008498:	3b01      	subs	r3, #1
 800849a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	029b      	lsls	r3, r3, #10
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	4313      	orrs	r3, r2
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	801a      	strh	r2, [r3, #0]
 80084c0:	e056      	b.n	8008570 <USB_EPStartXfer+0x51a>
 80084c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10a      	bne.n	80084e0 <USB_EPStartXfer+0x48a>
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d8:	b29a      	uxth	r2, r3
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e047      	b.n	8008570 <USB_EPStartXfer+0x51a>
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e4:	085b      	lsrs	r3, r3, #1
 80084e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d004      	beq.n	8008500 <USB_EPStartXfer+0x4aa>
 80084f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084fa:	3301      	adds	r3, #1
 80084fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b29a      	uxth	r2, r3
 8008506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800850a:	b29b      	uxth	r3, r3
 800850c:	029b      	lsls	r3, r3, #10
 800850e:	b29b      	uxth	r3, r3
 8008510:	4313      	orrs	r3, r2
 8008512:	b29a      	uxth	r2, r3
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	e02a      	b.n	8008570 <USB_EPStartXfer+0x51a>
 800851a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d122      	bne.n	8008570 <USB_EPStartXfer+0x51a>
 800852a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	623b      	str	r3, [r7, #32]
 8008536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800853a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008544:	b29b      	uxth	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	4413      	add	r3, r2
 800854c:	623b      	str	r3, [r7, #32]
 800854e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	011a      	lsls	r2, r3, #4
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	4413      	add	r3, r2
 8008560:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008564:	61fb      	str	r3, [r7, #28]
 8008566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856a:	b29a      	uxth	r2, r3
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	891b      	ldrh	r3, [r3, #8]
 800857c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6959      	ldr	r1, [r3, #20]
 800858c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008590:	b29b      	uxth	r3, r3
 8008592:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008596:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800859a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800859e:	6800      	ldr	r0, [r0, #0]
 80085a0:	f001 fa38 	bl	8009a14 <USB_WritePMA>
 80085a4:	e3ee      	b.n	8008d84 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d177      	bne.n	80086a6 <USB_EPStartXfer+0x650>
 80085b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80085c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	461a      	mov	r2, r3
 80085d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085d6:	4413      	add	r3, r2
 80085d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	011a      	lsls	r2, r3, #4
 80085e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ea:	4413      	add	r3, r2
 80085ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085f0:	647b      	str	r3, [r7, #68]	; 0x44
 80085f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008600:	801a      	strh	r2, [r3, #0]
 8008602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008606:	2b3e      	cmp	r3, #62	; 0x3e
 8008608:	d921      	bls.n	800864e <USB_EPStartXfer+0x5f8>
 800860a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800860e:	095b      	lsrs	r3, r3, #5
 8008610:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008618:	f003 031f 	and.w	r3, r3, #31
 800861c:	2b00      	cmp	r3, #0
 800861e:	d104      	bne.n	800862a <USB_EPStartXfer+0x5d4>
 8008620:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008624:	3b01      	subs	r3, #1
 8008626:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800862a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29a      	uxth	r2, r3
 8008630:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008634:	b29b      	uxth	r3, r3
 8008636:	029b      	lsls	r3, r3, #10
 8008638:	b29b      	uxth	r3, r3
 800863a:	4313      	orrs	r3, r2
 800863c:	b29b      	uxth	r3, r3
 800863e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008646:	b29a      	uxth	r2, r3
 8008648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800864a:	801a      	strh	r2, [r3, #0]
 800864c:	e056      	b.n	80086fc <USB_EPStartXfer+0x6a6>
 800864e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10a      	bne.n	800866c <USB_EPStartXfer+0x616>
 8008656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	b29b      	uxth	r3, r3
 800865c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008664:	b29a      	uxth	r2, r3
 8008666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008668:	801a      	strh	r2, [r3, #0]
 800866a:	e047      	b.n	80086fc <USB_EPStartXfer+0x6a6>
 800866c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008670:	085b      	lsrs	r3, r3, #1
 8008672:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <USB_EPStartXfer+0x636>
 8008682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008686:	3301      	adds	r3, #1
 8008688:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800868c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29a      	uxth	r2, r3
 8008692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008696:	b29b      	uxth	r3, r3
 8008698:	029b      	lsls	r3, r3, #10
 800869a:	b29b      	uxth	r3, r3
 800869c:	4313      	orrs	r3, r2
 800869e:	b29a      	uxth	r2, r3
 80086a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a2:	801a      	strh	r2, [r3, #0]
 80086a4:	e02a      	b.n	80086fc <USB_EPStartXfer+0x6a6>
 80086a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	785b      	ldrb	r3, [r3, #1]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d122      	bne.n	80086fc <USB_EPStartXfer+0x6a6>
 80086b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	653b      	str	r3, [r7, #80]	; 0x50
 80086c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	461a      	mov	r2, r3
 80086d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d6:	4413      	add	r3, r2
 80086d8:	653b      	str	r3, [r7, #80]	; 0x50
 80086da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	011a      	lsls	r2, r3, #4
 80086e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ea:	4413      	add	r3, r2
 80086ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	891b      	ldrh	r3, [r3, #8]
 8008708:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800870c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6959      	ldr	r1, [r3, #20]
 8008718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800871c:	b29b      	uxth	r3, r3
 800871e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008722:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008726:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800872a:	6800      	ldr	r0, [r0, #0]
 800872c:	f001 f972 	bl	8009a14 <USB_WritePMA>
            ep->xfer_buff += len;
 8008730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695a      	ldr	r2, [r3, #20]
 800873c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008740:	441a      	add	r2, r3
 8008742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800874e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6a1a      	ldr	r2, [r3, #32]
 800875a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800875e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	429a      	cmp	r2, r3
 8008768:	d90f      	bls.n	800878a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800876a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800876e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6a1a      	ldr	r2, [r3, #32]
 8008776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800877a:	1ad2      	subs	r2, r2, r3
 800877c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	621a      	str	r2, [r3, #32]
 8008788:	e00e      	b.n	80087a8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800878a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800879a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2200      	movs	r2, #0
 80087a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	643b      	str	r3, [r7, #64]	; 0x40
 80087b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	785b      	ldrb	r3, [r3, #1]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d177      	bne.n	80088b4 <USB_EPStartXfer+0x85e>
 80087c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80087d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087de:	b29b      	uxth	r3, r3
 80087e0:	461a      	mov	r2, r3
 80087e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e4:	4413      	add	r3, r2
 80087e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80087e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	011a      	lsls	r2, r3, #4
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	4413      	add	r3, r2
 80087fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	b29b      	uxth	r3, r3
 8008806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800880a:	b29a      	uxth	r2, r3
 800880c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880e:	801a      	strh	r2, [r3, #0]
 8008810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008814:	2b3e      	cmp	r3, #62	; 0x3e
 8008816:	d921      	bls.n	800885c <USB_EPStartXfer+0x806>
 8008818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881c:	095b      	lsrs	r3, r3, #5
 800881e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008826:	f003 031f 	and.w	r3, r3, #31
 800882a:	2b00      	cmp	r3, #0
 800882c:	d104      	bne.n	8008838 <USB_EPStartXfer+0x7e2>
 800882e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008832:	3b01      	subs	r3, #1
 8008834:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29a      	uxth	r2, r3
 800883e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008842:	b29b      	uxth	r3, r3
 8008844:	029b      	lsls	r3, r3, #10
 8008846:	b29b      	uxth	r3, r3
 8008848:	4313      	orrs	r3, r2
 800884a:	b29b      	uxth	r3, r3
 800884c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008854:	b29a      	uxth	r2, r3
 8008856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008858:	801a      	strh	r2, [r3, #0]
 800885a:	e050      	b.n	80088fe <USB_EPStartXfer+0x8a8>
 800885c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <USB_EPStartXfer+0x824>
 8008864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	b29b      	uxth	r3, r3
 800886a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800886e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008872:	b29a      	uxth	r2, r3
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	801a      	strh	r2, [r3, #0]
 8008878:	e041      	b.n	80088fe <USB_EPStartXfer+0x8a8>
 800887a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800887e:	085b      	lsrs	r3, r3, #1
 8008880:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <USB_EPStartXfer+0x844>
 8008890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008894:	3301      	adds	r3, #1
 8008896:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800889a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b29a      	uxth	r2, r3
 80088a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	029b      	lsls	r3, r3, #10
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	4313      	orrs	r3, r2
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b0:	801a      	strh	r2, [r3, #0]
 80088b2:	e024      	b.n	80088fe <USB_EPStartXfer+0x8a8>
 80088b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d11c      	bne.n	80088fe <USB_EPStartXfer+0x8a8>
 80088c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d8:	4413      	add	r3, r2
 80088da:	643b      	str	r3, [r7, #64]	; 0x40
 80088dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	011a      	lsls	r2, r3, #4
 80088ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ec:	4413      	add	r3, r2
 80088ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80088fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	895b      	ldrh	r3, [r3, #10]
 800890a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800890e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6959      	ldr	r1, [r3, #20]
 800891a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800891e:	b29b      	uxth	r3, r3
 8008920:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008924:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008928:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800892c:	6800      	ldr	r0, [r0, #0]
 800892e:	f001 f871 	bl	8009a14 <USB_WritePMA>
 8008932:	e227      	b.n	8008d84 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6a1b      	ldr	r3, [r3, #32]
 8008940:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	b29b      	uxth	r3, r3
 8008962:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800896a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800896e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	441a      	add	r2, r3
 8008988:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800898c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899c:	b29b      	uxth	r3, r3
 800899e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80089a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	461a      	mov	r2, r3
 80089be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089c0:	4413      	add	r3, r2
 80089c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	011a      	lsls	r2, r3, #4
 80089d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089d4:	4413      	add	r3, r2
 80089d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089da:	65bb      	str	r3, [r7, #88]	; 0x58
 80089dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80089e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	891b      	ldrh	r3, [r3, #8]
 80089f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6959      	ldr	r1, [r3, #20]
 8008a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a0c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a10:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a14:	6800      	ldr	r0, [r0, #0]
 8008a16:	f000 fffd 	bl	8009a14 <USB_WritePMA>
 8008a1a:	e1b3      	b.n	8008d84 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6a1a      	ldr	r2, [r3, #32]
 8008a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a2c:	1ad2      	subs	r2, r2, r3
 8008a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 80c6 	beq.w	8008bee <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	673b      	str	r3, [r7, #112]	; 0x70
 8008a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	785b      	ldrb	r3, [r3, #1]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d177      	bne.n	8008b6e <USB_EPStartXfer+0xb18>
 8008a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a9e:	4413      	add	r3, r2
 8008aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	011a      	lsls	r2, r3, #4
 8008ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ab8:	667b      	str	r3, [r7, #100]	; 0x64
 8008aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ac8:	801a      	strh	r2, [r3, #0]
 8008aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ace:	2b3e      	cmp	r3, #62	; 0x3e
 8008ad0:	d921      	bls.n	8008b16 <USB_EPStartXfer+0xac0>
 8008ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad6:	095b      	lsrs	r3, r3, #5
 8008ad8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae0:	f003 031f 	and.w	r3, r3, #31
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d104      	bne.n	8008af2 <USB_EPStartXfer+0xa9c>
 8008ae8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008aec:	3b01      	subs	r3, #1
 8008aee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	029b      	lsls	r3, r3, #10
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	4313      	orrs	r3, r2
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b12:	801a      	strh	r2, [r3, #0]
 8008b14:	e050      	b.n	8008bb8 <USB_EPStartXfer+0xb62>
 8008b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10a      	bne.n	8008b34 <USB_EPStartXfer+0xade>
 8008b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b30:	801a      	strh	r2, [r3, #0]
 8008b32:	e041      	b.n	8008bb8 <USB_EPStartXfer+0xb62>
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b38:	085b      	lsrs	r3, r3, #1
 8008b3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d004      	beq.n	8008b54 <USB_EPStartXfer+0xafe>
 8008b4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b4e:	3301      	adds	r3, #1
 8008b50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	029b      	lsls	r3, r3, #10
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	4313      	orrs	r3, r2
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	e024      	b.n	8008bb8 <USB_EPStartXfer+0xb62>
 8008b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	785b      	ldrb	r3, [r3, #1]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d11c      	bne.n	8008bb8 <USB_EPStartXfer+0xb62>
 8008b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b92:	4413      	add	r3, r2
 8008b94:	673b      	str	r3, [r7, #112]	; 0x70
 8008b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	011a      	lsls	r2, r3, #4
 8008ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008bac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	895b      	ldrh	r3, [r3, #10]
 8008bc4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6959      	ldr	r1, [r3, #20]
 8008bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008bde:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008be2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008be6:	6800      	ldr	r0, [r0, #0]
 8008be8:	f000 ff14 	bl	8009a14 <USB_WritePMA>
 8008bec:	e0ca      	b.n	8008d84 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	785b      	ldrb	r3, [r3, #1]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d177      	bne.n	8008cee <USB_EPStartXfer+0xc98>
 8008bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c1e:	4413      	add	r3, r2
 8008c20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	011a      	lsls	r2, r3, #4
 8008c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c32:	4413      	add	r3, r2
 8008c34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c38:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c48:	801a      	strh	r2, [r3, #0]
 8008c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8008c50:	d921      	bls.n	8008c96 <USB_EPStartXfer+0xc40>
 8008c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c56:	095b      	lsrs	r3, r3, #5
 8008c58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c60:	f003 031f 	and.w	r3, r3, #31
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d104      	bne.n	8008c72 <USB_EPStartXfer+0xc1c>
 8008c68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	029b      	lsls	r3, r3, #10
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	4313      	orrs	r3, r2
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c92:	801a      	strh	r2, [r3, #0]
 8008c94:	e05c      	b.n	8008d50 <USB_EPStartXfer+0xcfa>
 8008c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10a      	bne.n	8008cb4 <USB_EPStartXfer+0xc5e>
 8008c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cb0:	801a      	strh	r2, [r3, #0]
 8008cb2:	e04d      	b.n	8008d50 <USB_EPStartXfer+0xcfa>
 8008cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb8:	085b      	lsrs	r3, r3, #1
 8008cba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d004      	beq.n	8008cd4 <USB_EPStartXfer+0xc7e>
 8008cca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008cce:	3301      	adds	r3, #1
 8008cd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	029b      	lsls	r3, r3, #10
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	e030      	b.n	8008d50 <USB_EPStartXfer+0xcfa>
 8008cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d128      	bne.n	8008d50 <USB_EPStartXfer+0xcfa>
 8008cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d22:	4413      	add	r3, r2
 8008d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	011a      	lsls	r2, r3, #4
 8008d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	891b      	ldrh	r3, [r3, #8]
 8008d5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6959      	ldr	r1, [r3, #20]
 8008d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008d7e:	6800      	ldr	r0, [r0, #0]
 8008d80:	f000 fe48 	bl	8009a14 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008daa:	817b      	strh	r3, [r7, #10]
 8008dac:	897b      	ldrh	r3, [r7, #10]
 8008dae:	f083 0310 	eor.w	r3, r3, #16
 8008db2:	817b      	strh	r3, [r7, #10]
 8008db4:	897b      	ldrh	r3, [r7, #10]
 8008db6:	f083 0320 	eor.w	r3, r3, #32
 8008dba:	817b      	strh	r3, [r7, #10]
 8008dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	441a      	add	r2, r3
 8008dd6:	897b      	ldrh	r3, [r7, #10]
 8008dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	8013      	strh	r3, [r2, #0]
 8008dec:	f000 bcde 	b.w	80097ac <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	7b1b      	ldrb	r3, [r3, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f040 80bb 	bne.w	8008f78 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	699a      	ldr	r2, [r3, #24]
 8008e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d917      	bls.n	8008e4e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	699a      	ldr	r2, [r3, #24]
 8008e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	619a      	str	r2, [r3, #24]
 8008e4c:	e00e      	b.n	8008e6c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e90:	4413      	add	r3, r2
 8008e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	011a      	lsls	r2, r3, #4
 8008ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ec4:	801a      	strh	r2, [r3, #0]
 8008ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eca:	2b3e      	cmp	r3, #62	; 0x3e
 8008ecc:	d924      	bls.n	8008f18 <USB_EPStartXfer+0xec2>
 8008ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008edc:	f003 031f 	and.w	r3, r3, #31
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d104      	bne.n	8008eee <USB_EPStartXfer+0xe98>
 8008ee4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	029b      	lsls	r3, r3, #10
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	4313      	orrs	r3, r2
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f12:	801a      	strh	r2, [r3, #0]
 8008f14:	f000 bc10 	b.w	8009738 <USB_EPStartXfer+0x16e2>
 8008f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10c      	bne.n	8008f3a <USB_EPStartXfer+0xee4>
 8008f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f36:	801a      	strh	r2, [r3, #0]
 8008f38:	e3fe      	b.n	8009738 <USB_EPStartXfer+0x16e2>
 8008f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f3e:	085b      	lsrs	r3, r3, #1
 8008f40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d004      	beq.n	8008f5a <USB_EPStartXfer+0xf04>
 8008f50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f54:	3301      	adds	r3, #1
 8008f56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	029b      	lsls	r3, r3, #10
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f74:	801a      	strh	r2, [r3, #0]
 8008f76:	e3df      	b.n	8009738 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	78db      	ldrb	r3, [r3, #3]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	f040 8218 	bne.w	80093ba <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	785b      	ldrb	r3, [r3, #1]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f040 809d 	bne.w	80090d6 <USB_EPStartXfer+0x1080>
 8008f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	011a      	lsls	r2, r3, #4
 8008fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fd8:	4413      	add	r3, r2
 8008fda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008fe2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ff4:	801a      	strh	r2, [r3, #0]
 8008ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b3e      	cmp	r3, #62	; 0x3e
 8009004:	d92b      	bls.n	800905e <USB_EPStartXfer+0x1008>
 8009006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800900a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	095b      	lsrs	r3, r3, #5
 8009014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800901c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	f003 031f 	and.w	r3, r3, #31
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <USB_EPStartXfer+0xfe0>
 800902c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009030:	3b01      	subs	r3, #1
 8009032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	b29a      	uxth	r2, r3
 800903e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009042:	b29b      	uxth	r3, r3
 8009044:	029b      	lsls	r3, r3, #10
 8009046:	b29b      	uxth	r3, r3
 8009048:	4313      	orrs	r3, r2
 800904a:	b29b      	uxth	r3, r3
 800904c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009054:	b29a      	uxth	r2, r3
 8009056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800905a:	801a      	strh	r2, [r3, #0]
 800905c:	e070      	b.n	8009140 <USB_EPStartXfer+0x10ea>
 800905e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10c      	bne.n	8009088 <USB_EPStartXfer+0x1032>
 800906e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b29b      	uxth	r3, r3
 8009076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800907e:	b29a      	uxth	r2, r3
 8009080:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009084:	801a      	strh	r2, [r3, #0]
 8009086:	e05b      	b.n	8009140 <USB_EPStartXfer+0x10ea>
 8009088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800908c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	085b      	lsrs	r3, r3, #1
 8009096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800909a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800909e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d004      	beq.n	80090b8 <USB_EPStartXfer+0x1062>
 80090ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b2:	3301      	adds	r3, #1
 80090b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	b29a      	uxth	r2, r3
 80090c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	029b      	lsls	r3, r3, #10
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	4313      	orrs	r3, r2
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090d2:	801a      	strh	r2, [r3, #0]
 80090d4:	e034      	b.n	8009140 <USB_EPStartXfer+0x10ea>
 80090d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	785b      	ldrb	r3, [r3, #1]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d12c      	bne.n	8009140 <USB_EPStartXfer+0x10ea>
 80090e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009102:	b29b      	uxth	r3, r3
 8009104:	461a      	mov	r2, r3
 8009106:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800910a:	4413      	add	r3, r2
 800910c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	011a      	lsls	r2, r3, #4
 800911e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009122:	4413      	add	r3, r2
 8009124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800912c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	b29a      	uxth	r2, r3
 800913a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800913e:	801a      	strh	r2, [r3, #0]
 8009140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009144:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800914e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	2b00      	cmp	r3, #0
 800915c:	f040 809d 	bne.w	800929a <USB_EPStartXfer+0x1244>
 8009160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800916e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800917c:	b29b      	uxth	r3, r3
 800917e:	461a      	mov	r2, r3
 8009180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009184:	4413      	add	r3, r2
 8009186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800918a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	011a      	lsls	r2, r3, #4
 8009198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800919c:	4413      	add	r3, r2
 800919e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091b8:	801a      	strh	r2, [r3, #0]
 80091ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	2b3e      	cmp	r3, #62	; 0x3e
 80091c8:	d92b      	bls.n	8009222 <USB_EPStartXfer+0x11cc>
 80091ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	095b      	lsrs	r3, r3, #5
 80091d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	f003 031f 	and.w	r3, r3, #31
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d104      	bne.n	80091fa <USB_EPStartXfer+0x11a4>
 80091f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f4:	3b01      	subs	r3, #1
 80091f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	b29a      	uxth	r2, r3
 8009202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009206:	b29b      	uxth	r3, r3
 8009208:	029b      	lsls	r3, r3, #10
 800920a:	b29b      	uxth	r3, r3
 800920c:	4313      	orrs	r3, r2
 800920e:	b29b      	uxth	r3, r3
 8009210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009218:	b29a      	uxth	r2, r3
 800921a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800921e:	801a      	strh	r2, [r3, #0]
 8009220:	e069      	b.n	80092f6 <USB_EPStartXfer+0x12a0>
 8009222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10c      	bne.n	800924c <USB_EPStartXfer+0x11f6>
 8009232:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	b29b      	uxth	r3, r3
 800923a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800923e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009242:	b29a      	uxth	r2, r3
 8009244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009248:	801a      	strh	r2, [r3, #0]
 800924a:	e054      	b.n	80092f6 <USB_EPStartXfer+0x12a0>
 800924c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	085b      	lsrs	r3, r3, #1
 800925a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800925e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	d004      	beq.n	800927c <USB_EPStartXfer+0x1226>
 8009272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009276:	3301      	adds	r3, #1
 8009278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800927c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	b29a      	uxth	r2, r3
 8009284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009288:	b29b      	uxth	r3, r3
 800928a:	029b      	lsls	r3, r3, #10
 800928c:	b29b      	uxth	r3, r3
 800928e:	4313      	orrs	r3, r2
 8009290:	b29a      	uxth	r2, r3
 8009292:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009296:	801a      	strh	r2, [r3, #0]
 8009298:	e02d      	b.n	80092f6 <USB_EPStartXfer+0x12a0>
 800929a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	785b      	ldrb	r3, [r3, #1]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d125      	bne.n	80092f6 <USB_EPStartXfer+0x12a0>
 80092aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	461a      	mov	r2, r3
 80092bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80092c0:	4413      	add	r3, r2
 80092c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80092c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	011a      	lsls	r2, r3, #4
 80092d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80092d8:	4413      	add	r3, r2
 80092da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80092e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092f4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80092f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 8218 	beq.w	8009738 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009328:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800932c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d005      	beq.n	8009340 <USB_EPStartXfer+0x12ea>
 8009334:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10d      	bne.n	800935c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009340:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009348:	2b00      	cmp	r3, #0
 800934a:	f040 81f5 	bne.w	8009738 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800934e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009356:	2b00      	cmp	r3, #0
 8009358:	f040 81ee 	bne.w	8009738 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800935c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800936a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800937e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009382:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	441a      	add	r2, r3
 80093a0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80093a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	8013      	strh	r3, [r2, #0]
 80093b8:	e1be      	b.n	8009738 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80093ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	78db      	ldrb	r3, [r3, #3]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	f040 81b4 	bne.w	8009734 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80093cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	699a      	ldr	r2, [r3, #24]
 80093d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d917      	bls.n	8009418 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80093e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80093f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	699a      	ldr	r2, [r3, #24]
 8009404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009408:	1ad2      	subs	r2, r2, r3
 800940a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	619a      	str	r2, [r3, #24]
 8009416:	e00e      	b.n	8009436 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800941c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800942c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2200      	movs	r2, #0
 8009434:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800943a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	785b      	ldrb	r3, [r3, #1]
 8009442:	2b00      	cmp	r3, #0
 8009444:	f040 8085 	bne.w	8009552 <USB_EPStartXfer+0x14fc>
 8009448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009464:	b29b      	uxth	r3, r3
 8009466:	461a      	mov	r2, r3
 8009468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800946c:	4413      	add	r3, r2
 800946e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	011a      	lsls	r2, r3, #4
 8009480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009484:	4413      	add	r3, r2
 8009486:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800948a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800948e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	b29b      	uxth	r3, r3
 8009496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800949a:	b29a      	uxth	r2, r3
 800949c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094a0:	801a      	strh	r2, [r3, #0]
 80094a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a6:	2b3e      	cmp	r3, #62	; 0x3e
 80094a8:	d923      	bls.n	80094f2 <USB_EPStartXfer+0x149c>
 80094aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ae:	095b      	lsrs	r3, r3, #5
 80094b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b8:	f003 031f 	and.w	r3, r3, #31
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d104      	bne.n	80094ca <USB_EPStartXfer+0x1474>
 80094c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094c4:	3b01      	subs	r3, #1
 80094c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	029b      	lsls	r3, r3, #10
 80094da:	b29b      	uxth	r3, r3
 80094dc:	4313      	orrs	r3, r2
 80094de:	b29b      	uxth	r3, r3
 80094e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094ee:	801a      	strh	r2, [r3, #0]
 80094f0:	e060      	b.n	80095b4 <USB_EPStartXfer+0x155e>
 80094f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10c      	bne.n	8009514 <USB_EPStartXfer+0x14be>
 80094fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29b      	uxth	r3, r3
 8009502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800950a:	b29a      	uxth	r2, r3
 800950c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009510:	801a      	strh	r2, [r3, #0]
 8009512:	e04f      	b.n	80095b4 <USB_EPStartXfer+0x155e>
 8009514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009518:	085b      	lsrs	r3, r3, #1
 800951a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800951e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d004      	beq.n	8009534 <USB_EPStartXfer+0x14de>
 800952a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800952e:	3301      	adds	r3, #1
 8009530:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	b29a      	uxth	r2, r3
 800953c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009540:	b29b      	uxth	r3, r3
 8009542:	029b      	lsls	r3, r3, #10
 8009544:	b29b      	uxth	r3, r3
 8009546:	4313      	orrs	r3, r2
 8009548:	b29a      	uxth	r2, r3
 800954a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800954e:	801a      	strh	r2, [r3, #0]
 8009550:	e030      	b.n	80095b4 <USB_EPStartXfer+0x155e>
 8009552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	785b      	ldrb	r3, [r3, #1]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d128      	bne.n	80095b4 <USB_EPStartXfer+0x155e>
 8009562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800957e:	b29b      	uxth	r3, r3
 8009580:	461a      	mov	r2, r3
 8009582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009586:	4413      	add	r3, r2
 8009588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800958c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	011a      	lsls	r2, r3, #4
 800959a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800959e:	4413      	add	r3, r2
 80095a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	785b      	ldrb	r3, [r3, #1]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f040 8085 	bne.w	80096de <USB_EPStartXfer+0x1688>
 80095d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80095e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	461a      	mov	r2, r3
 80095f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80095f8:	4413      	add	r3, r2
 80095fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80095fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	011a      	lsls	r2, r3, #4
 800960c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009610:	4413      	add	r3, r2
 8009612:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009616:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800961a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	b29b      	uxth	r3, r3
 8009622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009626:	b29a      	uxth	r2, r3
 8009628:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800962c:	801a      	strh	r2, [r3, #0]
 800962e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009632:	2b3e      	cmp	r3, #62	; 0x3e
 8009634:	d923      	bls.n	800967e <USB_EPStartXfer+0x1628>
 8009636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009644:	f003 031f 	and.w	r3, r3, #31
 8009648:	2b00      	cmp	r3, #0
 800964a:	d104      	bne.n	8009656 <USB_EPStartXfer+0x1600>
 800964c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009650:	3b01      	subs	r3, #1
 8009652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b29a      	uxth	r2, r3
 800965e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009662:	b29b      	uxth	r3, r3
 8009664:	029b      	lsls	r3, r3, #10
 8009666:	b29b      	uxth	r3, r3
 8009668:	4313      	orrs	r3, r2
 800966a:	b29b      	uxth	r3, r3
 800966c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009674:	b29a      	uxth	r2, r3
 8009676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800967a:	801a      	strh	r2, [r3, #0]
 800967c:	e05c      	b.n	8009738 <USB_EPStartXfer+0x16e2>
 800967e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10c      	bne.n	80096a0 <USB_EPStartXfer+0x164a>
 8009686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	b29b      	uxth	r3, r3
 800968e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009696:	b29a      	uxth	r2, r3
 8009698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800969c:	801a      	strh	r2, [r3, #0]
 800969e:	e04b      	b.n	8009738 <USB_EPStartXfer+0x16e2>
 80096a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a4:	085b      	lsrs	r3, r3, #1
 80096a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d004      	beq.n	80096c0 <USB_EPStartXfer+0x166a>
 80096b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096ba:	3301      	adds	r3, #1
 80096bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	029b      	lsls	r3, r3, #10
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096da:	801a      	strh	r2, [r3, #0]
 80096dc:	e02c      	b.n	8009738 <USB_EPStartXfer+0x16e2>
 80096de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	785b      	ldrb	r3, [r3, #1]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d124      	bne.n	8009738 <USB_EPStartXfer+0x16e2>
 80096ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	461a      	mov	r2, r3
 8009700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009704:	4413      	add	r3, r2
 8009706:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800970a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	011a      	lsls	r2, r3, #4
 8009718:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800971c:	4413      	add	r3, r2
 800971e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009722:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800972a:	b29a      	uxth	r2, r3
 800972c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009730:	801a      	strh	r2, [r3, #0]
 8009732:	e001      	b.n	8009738 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e03a      	b.n	80097ae <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	b29b      	uxth	r3, r3
 8009756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800975a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800975e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009762:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009766:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800976a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800976e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009772:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009776:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800977a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	441a      	add	r2, r3
 8009794:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800979c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	785b      	ldrb	r3, [r3, #1]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d020      	beq.n	800980c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097e0:	81bb      	strh	r3, [r7, #12]
 80097e2:	89bb      	ldrh	r3, [r7, #12]
 80097e4:	f083 0310 	eor.w	r3, r3, #16
 80097e8:	81bb      	strh	r3, [r7, #12]
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	441a      	add	r2, r3
 80097f4:	89bb      	ldrh	r3, [r7, #12]
 80097f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009806:	b29b      	uxth	r3, r3
 8009808:	8013      	strh	r3, [r2, #0]
 800980a:	e01f      	b.n	800984c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	b29b      	uxth	r3, r3
 800981a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800981e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009822:	81fb      	strh	r3, [r7, #14]
 8009824:	89fb      	ldrh	r3, [r7, #14]
 8009826:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800982a:	81fb      	strh	r3, [r7, #14]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	441a      	add	r2, r3
 8009836:	89fb      	ldrh	r3, [r7, #14]
 8009838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800983c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009848:	b29b      	uxth	r3, r3
 800984a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800985a:	b480      	push	{r7}
 800985c:	b087      	sub	sp, #28
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	7b1b      	ldrb	r3, [r3, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f040 809d 	bne.w	80099a8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	785b      	ldrb	r3, [r3, #1]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d04c      	beq.n	8009910 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	823b      	strh	r3, [r7, #16]
 8009884:	8a3b      	ldrh	r3, [r7, #16]
 8009886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	d01b      	beq.n	80098c6 <USB_EPClearStall+0x6c>
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	b29b      	uxth	r3, r3
 800989c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a4:	81fb      	strh	r3, [r7, #14]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	441a      	add	r2, r3
 80098b0:	89fb      	ldrh	r3, [r7, #14]
 80098b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	78db      	ldrb	r3, [r3, #3]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d06c      	beq.n	80099a8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	b29b      	uxth	r3, r3
 80098dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098e4:	81bb      	strh	r3, [r7, #12]
 80098e6:	89bb      	ldrh	r3, [r7, #12]
 80098e8:	f083 0320 	eor.w	r3, r3, #32
 80098ec:	81bb      	strh	r3, [r7, #12]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	441a      	add	r2, r3
 80098f8:	89bb      	ldrh	r3, [r7, #12]
 80098fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800990a:	b29b      	uxth	r3, r3
 800990c:	8013      	strh	r3, [r2, #0]
 800990e:	e04b      	b.n	80099a8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	82fb      	strh	r3, [r7, #22]
 800991e:	8afb      	ldrh	r3, [r7, #22]
 8009920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d01b      	beq.n	8009960 <USB_EPClearStall+0x106>
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29b      	uxth	r3, r3
 8009936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800993a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800993e:	82bb      	strh	r3, [r7, #20]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	441a      	add	r2, r3
 800994a:	8abb      	ldrh	r3, [r7, #20]
 800994c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800995c:	b29b      	uxth	r3, r3
 800995e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009976:	827b      	strh	r3, [r7, #18]
 8009978:	8a7b      	ldrh	r3, [r7, #18]
 800997a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800997e:	827b      	strh	r3, [r7, #18]
 8009980:	8a7b      	ldrh	r3, [r7, #18]
 8009982:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009986:	827b      	strh	r3, [r7, #18]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	441a      	add	r2, r3
 8009992:	8a7b      	ldrh	r3, [r7, #18]
 8009994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800999c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	371c      	adds	r7, #28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b083      	sub	sp, #12
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	460b      	mov	r3, r1
 80099c0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80099c2:	78fb      	ldrb	r3, [r7, #3]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d103      	bne.n	80099d0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2280      	movs	r2, #128	; 0x80
 80099cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80099de:	b480      	push	{r7}
 80099e0:	b083      	sub	sp, #12
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009a06:	68fb      	ldr	r3, [r7, #12]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b08b      	sub	sp, #44	; 0x2c
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	461a      	mov	r2, r3
 8009a22:	460b      	mov	r3, r1
 8009a24:	80fb      	strh	r3, [r7, #6]
 8009a26:	4613      	mov	r3, r2
 8009a28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009a2a:	88bb      	ldrh	r3, [r7, #4]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	085b      	lsrs	r3, r3, #1
 8009a30:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a3a:	88fb      	ldrh	r3, [r7, #6]
 8009a3c:	005a      	lsls	r2, r3, #1
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a46:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a4c:	e01e      	b.n	8009a8c <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	3301      	adds	r3, #1
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	021b      	lsls	r3, r3, #8
 8009a5c:	b21a      	sxth	r2, r3
 8009a5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	b21b      	sxth	r3, r3
 8009a66:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	8a7a      	ldrh	r2, [r7, #18]
 8009a6c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	3302      	adds	r3, #2
 8009a72:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	3302      	adds	r3, #2
 8009a78:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	3301      	adds	r3, #1
 8009a84:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1dd      	bne.n	8009a4e <USB_WritePMA+0x3a>
  }
}
 8009a92:	bf00      	nop
 8009a94:	bf00      	nop
 8009a96:	372c      	adds	r7, #44	; 0x2c
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b08b      	sub	sp, #44	; 0x2c
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	4611      	mov	r1, r2
 8009aac:	461a      	mov	r2, r3
 8009aae:	460b      	mov	r3, r1
 8009ab0:	80fb      	strh	r3, [r7, #6]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009ab6:	88bb      	ldrh	r3, [r7, #4]
 8009ab8:	085b      	lsrs	r3, r3, #1
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ac6:	88fb      	ldrh	r3, [r7, #6]
 8009ac8:	005a      	lsls	r2, r3, #1
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ad2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad8:	e01b      	b.n	8009b12 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	3302      	adds	r3, #2
 8009ae6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	3301      	adds	r3, #1
 8009af4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	0a1b      	lsrs	r3, r3, #8
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	3301      	adds	r3, #1
 8009b04:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	3302      	adds	r3, #2
 8009b0a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	627b      	str	r3, [r7, #36]	; 0x24
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e0      	bne.n	8009ada <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009b18:	88bb      	ldrh	r3, [r7, #4]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d007      	beq.n	8009b34 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	701a      	strb	r2, [r3, #0]
  }
}
 8009b34:	bf00      	nop
 8009b36:	372c      	adds	r7, #44	; 0x2c
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	7c1b      	ldrb	r3, [r3, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d115      	bne.n	8009b84 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	2181      	movs	r1, #129	; 0x81
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 fe62 	bl	800b82a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b70:	2202      	movs	r2, #2
 8009b72:	2101      	movs	r1, #1
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f001 fe58 	bl	800b82a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009b82:	e012      	b.n	8009baa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009b84:	2340      	movs	r3, #64	; 0x40
 8009b86:	2202      	movs	r2, #2
 8009b88:	2181      	movs	r1, #129	; 0x81
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f001 fe4d 	bl	800b82a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009b96:	2340      	movs	r3, #64	; 0x40
 8009b98:	2202      	movs	r2, #2
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f001 fe44 	bl	800b82a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009baa:	2308      	movs	r3, #8
 8009bac:	2203      	movs	r2, #3
 8009bae:	2182      	movs	r1, #130	; 0x82
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 fe3a 	bl	800b82a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bbc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009bc0:	f001 ff5c 	bl	800ba7c <USBD_static_malloc>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d102      	bne.n	8009bdc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	73fb      	strb	r3, [r7, #15]
 8009bda:	e026      	b.n	8009c2a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009be2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7c1b      	ldrb	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d109      	bne.n	8009c1a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c10:	2101      	movs	r1, #1
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f001 fefb 	bl	800ba0e <USBD_LL_PrepareReceive>
 8009c18:	e007      	b.n	8009c2a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c20:	2340      	movs	r3, #64	; 0x40
 8009c22:	2101      	movs	r1, #1
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 fef2 	bl	800ba0e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009c40:	2300      	movs	r3, #0
 8009c42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009c44:	2181      	movs	r1, #129	; 0x81
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 fe15 	bl	800b876 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009c52:	2101      	movs	r1, #1
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f001 fe0e 	bl	800b876 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009c62:	2182      	movs	r1, #130	; 0x82
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f001 fe06 	bl	800b876 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00e      	beq.n	8009c98 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f001 ff04 	bl	800ba98 <USBD_static_free>
    pdev->pClassData = NULL;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b086      	sub	sp, #24
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d039      	beq.n	8009d40 <USBD_CDC_Setup+0x9e>
 8009ccc:	2b20      	cmp	r3, #32
 8009cce:	d17f      	bne.n	8009dd0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	88db      	ldrh	r3, [r3, #6]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d029      	beq.n	8009d2c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	b25b      	sxtb	r3, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	da11      	bge.n	8009d06 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009cee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	88d2      	ldrh	r2, [r2, #6]
 8009cf4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009cf6:	6939      	ldr	r1, [r7, #16]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	88db      	ldrh	r3, [r3, #6]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f001 f9e3 	bl	800b0ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009d04:	e06b      	b.n	8009dde <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	785a      	ldrb	r2, [r3, #1]
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	88db      	ldrh	r3, [r3, #6]
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009d1c:	6939      	ldr	r1, [r7, #16]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	88db      	ldrh	r3, [r3, #6]
 8009d22:	461a      	mov	r2, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f001 f9fe 	bl	800b126 <USBD_CtlPrepareRx>
      break;
 8009d2a:	e058      	b.n	8009dde <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	7850      	ldrb	r0, [r2, #1]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	4798      	blx	r3
      break;
 8009d3e:	e04e      	b.n	8009dde <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	785b      	ldrb	r3, [r3, #1]
 8009d44:	2b0b      	cmp	r3, #11
 8009d46:	d02e      	beq.n	8009da6 <USBD_CDC_Setup+0x104>
 8009d48:	2b0b      	cmp	r3, #11
 8009d4a:	dc38      	bgt.n	8009dbe <USBD_CDC_Setup+0x11c>
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <USBD_CDC_Setup+0xb4>
 8009d50:	2b0a      	cmp	r3, #10
 8009d52:	d014      	beq.n	8009d7e <USBD_CDC_Setup+0xdc>
 8009d54:	e033      	b.n	8009dbe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d107      	bne.n	8009d70 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009d60:	f107 030c 	add.w	r3, r7, #12
 8009d64:	2202      	movs	r2, #2
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f001 f9ae 	bl	800b0ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d6e:	e02e      	b.n	8009dce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f001 f93e 	bl	800aff4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d78:	2302      	movs	r3, #2
 8009d7a:	75fb      	strb	r3, [r7, #23]
          break;
 8009d7c:	e027      	b.n	8009dce <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d107      	bne.n	8009d98 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d88:	f107 030f 	add.w	r3, r7, #15
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 f99a 	bl	800b0ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d96:	e01a      	b.n	8009dce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f001 f92a 	bl	800aff4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009da0:	2302      	movs	r3, #2
 8009da2:	75fb      	strb	r3, [r7, #23]
          break;
 8009da4:	e013      	b.n	8009dce <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d00d      	beq.n	8009dcc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f001 f91e 	bl	800aff4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009db8:	2302      	movs	r3, #2
 8009dba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009dbc:	e006      	b.n	8009dcc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f001 f917 	bl	800aff4 <USBD_CtlError>
          ret = USBD_FAIL;
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8009dca:	e000      	b.n	8009dce <USBD_CDC_Setup+0x12c>
          break;
 8009dcc:	bf00      	nop
      }
      break;
 8009dce:	e006      	b.n	8009dde <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009dd0:	6839      	ldr	r1, [r7, #0]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f001 f90e 	bl	800aff4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009dd8:	2302      	movs	r3, #2
 8009dda:	75fb      	strb	r3, [r7, #23]
      break;
 8009ddc:	bf00      	nop
  }

  return ret;
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dfa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e02:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d03a      	beq.n	8009e84 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009e0e:	78fa      	ldrb	r2, [r7, #3]
 8009e10:	6879      	ldr	r1, [r7, #4]
 8009e12:	4613      	mov	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	440b      	add	r3, r1
 8009e1c:	331c      	adds	r3, #28
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d029      	beq.n	8009e78 <USBD_CDC_DataIn+0x90>
 8009e24:	78fa      	ldrb	r2, [r7, #3]
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	331c      	adds	r3, #28
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	78f9      	ldrb	r1, [r7, #3]
 8009e38:	68b8      	ldr	r0, [r7, #8]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	440b      	add	r3, r1
 8009e40:	00db      	lsls	r3, r3, #3
 8009e42:	4403      	add	r3, r0
 8009e44:	3338      	adds	r3, #56	; 0x38
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e4c:	fb01 f303 	mul.w	r3, r1, r3
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d110      	bne.n	8009e78 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009e56:	78fa      	ldrb	r2, [r7, #3]
 8009e58:	6879      	ldr	r1, [r7, #4]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4413      	add	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	440b      	add	r3, r1
 8009e64:	331c      	adds	r3, #28
 8009e66:	2200      	movs	r2, #0
 8009e68:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e6a:	78f9      	ldrb	r1, [r7, #3]
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2200      	movs	r2, #0
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 fda9 	bl	800b9c8 <USBD_LL_Transmit>
 8009e76:	e003      	b.n	8009e80 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	e000      	b.n	8009e86 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009e84:	2302      	movs	r3, #2
  }
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	460b      	mov	r3, r1
 8009e98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 fdd4 	bl	800ba54 <USBD_LL_GetRxDataSize>
 8009eac:	4602      	mov	r2, r0
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00d      	beq.n	8009eda <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009ed2:	4611      	mov	r1, r2
 8009ed4:	4798      	blx	r3

    return USBD_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e000      	b.n	8009edc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009eda:	2302      	movs	r3, #2
  }
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d015      	beq.n	8009f2a <USBD_CDC_EP0_RxReady+0x46>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f04:	2bff      	cmp	r3, #255	; 0xff
 8009f06:	d010      	beq.n	8009f2a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009f16:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f1e:	b292      	uxth	r2, r2
 8009f20:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	22ff      	movs	r2, #255	; 0xff
 8009f26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2243      	movs	r2, #67	; 0x43
 8009f40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009f42:	4b03      	ldr	r3, [pc, #12]	; (8009f50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	20000094 	.word	0x20000094

08009f54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2243      	movs	r2, #67	; 0x43
 8009f60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009f62:	4b03      	ldr	r3, [pc, #12]	; (8009f70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	20000050 	.word	0x20000050

08009f74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2243      	movs	r2, #67	; 0x43
 8009f80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009f82:	4b03      	ldr	r3, [pc, #12]	; (8009f90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	200000d8 	.word	0x200000d8

08009f94 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	220a      	movs	r2, #10
 8009fa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009fa2:	4b03      	ldr	r3, [pc, #12]	; (8009fb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	2000000c 	.word	0x2000000c

08009fb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d005      	beq.n	8009fd4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b087      	sub	sp, #28
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	60b9      	str	r1, [r7, #8]
 8009fec:	4613      	mov	r3, r2
 8009fee:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ff6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a000:	88fa      	ldrh	r2, [r7, #6]
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	371c      	adds	r7, #28
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a016:	b480      	push	{r7}
 800a018:	b085      	sub	sp, #20
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a026:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a04c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a054:	2b00      	cmp	r3, #0
 800a056:	d017      	beq.n	800a088 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	7c1b      	ldrb	r3, [r3, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d109      	bne.n	800a074 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a06a:	2101      	movs	r1, #1
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f001 fcce 	bl	800ba0e <USBD_LL_PrepareReceive>
 800a072:	e007      	b.n	800a084 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a07a:	2340      	movs	r3, #64	; 0x40
 800a07c:	2101      	movs	r1, #1
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f001 fcc5 	bl	800ba0e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	e000      	b.n	800a08a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a088:	2302      	movs	r3, #2
  }
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	4613      	mov	r3, r2
 800a09e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	e01a      	b.n	800a0e0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d003      	beq.n	800a0bc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	79fa      	ldrb	r2, [r7, #7]
 800a0d6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f001 fb31 	bl	800b740 <USBD_LL_Init>

  return USBD_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d006      	beq.n	800a10a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	73fb      	strb	r3, [r7, #15]
 800a108:	e001      	b.n	800a10e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a10a:	2302      	movs	r3, #2
 800a10c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f001 fb65 	bl	800b7f4 <USBD_LL_Start>

  return USBD_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	460b      	mov	r3, r1
 800a154:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a156:	2302      	movs	r3, #2
 800a158:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00c      	beq.n	800a17e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	78fa      	ldrb	r2, [r7, #3]
 800a16e:	4611      	mov	r1, r2
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	4798      	blx	r3
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	460b      	mov	r3, r1
 800a192:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	78fa      	ldrb	r2, [r7, #3]
 800a19e:	4611      	mov	r1, r2
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	4798      	blx	r3

  return USBD_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 feda 	bl	800af7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a1e2:	f003 031f 	and.w	r3, r3, #31
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d016      	beq.n	800a218 <USBD_LL_SetupStage+0x6a>
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d81c      	bhi.n	800a228 <USBD_LL_SetupStage+0x7a>
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <USBD_LL_SetupStage+0x4a>
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d008      	beq.n	800a208 <USBD_LL_SetupStage+0x5a>
 800a1f6:	e017      	b.n	800a228 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f9cd 	bl	800a5a0 <USBD_StdDevReq>
      break;
 800a206:	e01a      	b.n	800a23e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fa2f 	bl	800a674 <USBD_StdItfReq>
      break;
 800a216:	e012      	b.n	800a23e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a21e:	4619      	mov	r1, r3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fa6f 	bl	800a704 <USBD_StdEPReq>
      break;
 800a226:	e00a      	b.n	800a23e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a22e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a232:	b2db      	uxtb	r3, r3
 800a234:	4619      	mov	r1, r3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f001 fb3c 	bl	800b8b4 <USBD_LL_StallEP>
      break;
 800a23c:	bf00      	nop
  }

  return USBD_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	460b      	mov	r3, r1
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a256:	7afb      	ldrb	r3, [r7, #11]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d14b      	bne.n	800a2f4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a262:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	d134      	bne.n	800a2d8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	68da      	ldr	r2, [r3, #12]
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	429a      	cmp	r2, r3
 800a278:	d919      	bls.n	800a2ae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	1ad2      	subs	r2, r2, r3
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	68da      	ldr	r2, [r3, #12]
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a290:	429a      	cmp	r2, r3
 800a292:	d203      	bcs.n	800a29c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a298:	b29b      	uxth	r3, r3
 800a29a:	e002      	b.n	800a2a2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 ff5b 	bl	800b162 <USBD_CtlContinueRx>
 800a2ac:	e038      	b.n	800a320 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2c0:	2b03      	cmp	r3, #3
 800a2c2:	d105      	bne.n	800a2d0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f000 ff58 	bl	800b186 <USBD_CtlSendStatus>
 800a2d6:	e023      	b.n	800a320 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2de:	2b05      	cmp	r3, #5
 800a2e0:	d11e      	bne.n	800a320 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f001 fae1 	bl	800b8b4 <USBD_LL_StallEP>
 800a2f2:	e015      	b.n	800a320 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00d      	beq.n	800a31c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a306:	2b03      	cmp	r3, #3
 800a308:	d108      	bne.n	800a31c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	7afa      	ldrb	r2, [r7, #11]
 800a314:	4611      	mov	r1, r2
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	4798      	blx	r3
 800a31a:	e001      	b.n	800a320 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a31c:	2302      	movs	r3, #2
 800a31e:	e000      	b.n	800a322 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b086      	sub	sp, #24
 800a32e:	af00      	add	r7, sp, #0
 800a330:	60f8      	str	r0, [r7, #12]
 800a332:	460b      	mov	r3, r1
 800a334:	607a      	str	r2, [r7, #4]
 800a336:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a338:	7afb      	ldrb	r3, [r7, #11]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d17f      	bne.n	800a43e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3314      	adds	r3, #20
 800a342:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d15c      	bne.n	800a408 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	429a      	cmp	r2, r3
 800a358:	d915      	bls.n	800a386 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	68da      	ldr	r2, [r3, #12]
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	1ad2      	subs	r2, r2, r3
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	461a      	mov	r2, r3
 800a370:	6879      	ldr	r1, [r7, #4]
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 fec5 	bl	800b102 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a378:	2300      	movs	r3, #0
 800a37a:	2200      	movs	r2, #0
 800a37c:	2100      	movs	r1, #0
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f001 fb45 	bl	800ba0e <USBD_LL_PrepareReceive>
 800a384:	e04e      	b.n	800a424 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	6912      	ldr	r2, [r2, #16]
 800a38e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a392:	fb01 f202 	mul.w	r2, r1, r2
 800a396:	1a9b      	subs	r3, r3, r2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d11c      	bne.n	800a3d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	689a      	ldr	r2, [r3, #8]
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d316      	bcc.n	800a3d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d20f      	bcs.n	800a3d6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f000 fea1 	bl	800b102 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f001 fb1d 	bl	800ba0e <USBD_LL_PrepareReceive>
 800a3d4:	e026      	b.n	800a424 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00a      	beq.n	800a3f8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	d105      	bne.n	800a3f8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a3f8:	2180      	movs	r1, #128	; 0x80
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f001 fa5a 	bl	800b8b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 fed3 	bl	800b1ac <USBD_CtlReceiveStatus>
 800a406:	e00d      	b.n	800a424 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a40e:	2b04      	cmp	r3, #4
 800a410:	d004      	beq.n	800a41c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a41c:	2180      	movs	r1, #128	; 0x80
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f001 fa48 	bl	800b8b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d11d      	bne.n	800a46a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7ff fe80 	bl	800a134 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a43c:	e015      	b.n	800a46a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00d      	beq.n	800a466 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a450:	2b03      	cmp	r3, #3
 800a452:	d108      	bne.n	800a466 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	7afa      	ldrb	r2, [r7, #11]
 800a45e:	4611      	mov	r1, r2
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	4798      	blx	r3
 800a464:	e001      	b.n	800a46a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a466:	2302      	movs	r3, #2
 800a468:	e000      	b.n	800a46c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3718      	adds	r7, #24
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a47c:	2340      	movs	r3, #64	; 0x40
 800a47e:	2200      	movs	r2, #0
 800a480:	2100      	movs	r1, #0
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 f9d1 	bl	800b82a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2240      	movs	r2, #64	; 0x40
 800a494:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a498:	2340      	movs	r3, #64	; 0x40
 800a49a:	2200      	movs	r2, #0
 800a49c:	2180      	movs	r1, #128	; 0x80
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f001 f9c3 	bl	800b82a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2240      	movs	r2, #64	; 0x40
 800a4ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d009      	beq.n	800a4ec <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	6852      	ldr	r2, [r2, #4]
 800a4e4:	b2d2      	uxtb	r2, r2
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	4798      	blx	r3
  }

  return USBD_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b083      	sub	sp, #12
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	460b      	mov	r3, r1
 800a500:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	78fa      	ldrb	r2, [r7, #3]
 800a506:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2204      	movs	r2, #4
 800a52e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d105      	bne.n	800a55e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d10b      	bne.n	800a596 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d005      	beq.n	800a596 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5b6:	2b40      	cmp	r3, #64	; 0x40
 800a5b8:	d005      	beq.n	800a5c6 <USBD_StdDevReq+0x26>
 800a5ba:	2b40      	cmp	r3, #64	; 0x40
 800a5bc:	d84f      	bhi.n	800a65e <USBD_StdDevReq+0xbe>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d009      	beq.n	800a5d6 <USBD_StdDevReq+0x36>
 800a5c2:	2b20      	cmp	r3, #32
 800a5c4:	d14b      	bne.n	800a65e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	4798      	blx	r3
      break;
 800a5d4:	e048      	b.n	800a668 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	785b      	ldrb	r3, [r3, #1]
 800a5da:	2b09      	cmp	r3, #9
 800a5dc:	d839      	bhi.n	800a652 <USBD_StdDevReq+0xb2>
 800a5de:	a201      	add	r2, pc, #4	; (adr r2, 800a5e4 <USBD_StdDevReq+0x44>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a635 	.word	0x0800a635
 800a5e8:	0800a649 	.word	0x0800a649
 800a5ec:	0800a653 	.word	0x0800a653
 800a5f0:	0800a63f 	.word	0x0800a63f
 800a5f4:	0800a653 	.word	0x0800a653
 800a5f8:	0800a617 	.word	0x0800a617
 800a5fc:	0800a60d 	.word	0x0800a60d
 800a600:	0800a653 	.word	0x0800a653
 800a604:	0800a62b 	.word	0x0800a62b
 800a608:	0800a621 	.word	0x0800a621
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f9dc 	bl	800a9cc <USBD_GetDescriptor>
          break;
 800a614:	e022      	b.n	800a65c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fb3f 	bl	800ac9c <USBD_SetAddress>
          break;
 800a61e:	e01d      	b.n	800a65c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a620:	6839      	ldr	r1, [r7, #0]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fb7e 	bl	800ad24 <USBD_SetConfig>
          break;
 800a628:	e018      	b.n	800a65c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a62a:	6839      	ldr	r1, [r7, #0]
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 fc07 	bl	800ae40 <USBD_GetConfig>
          break;
 800a632:	e013      	b.n	800a65c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a634:	6839      	ldr	r1, [r7, #0]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 fc37 	bl	800aeaa <USBD_GetStatus>
          break;
 800a63c:	e00e      	b.n	800a65c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fc65 	bl	800af10 <USBD_SetFeature>
          break;
 800a646:	e009      	b.n	800a65c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fc74 	bl	800af38 <USBD_ClrFeature>
          break;
 800a650:	e004      	b.n	800a65c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a652:	6839      	ldr	r1, [r7, #0]
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fccd 	bl	800aff4 <USBD_CtlError>
          break;
 800a65a:	bf00      	nop
      }
      break;
 800a65c:	e004      	b.n	800a668 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fcc7 	bl	800aff4 <USBD_CtlError>
      break;
 800a666:	bf00      	nop
  }

  return ret;
 800a668:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop

0800a674 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a68a:	2b40      	cmp	r3, #64	; 0x40
 800a68c:	d005      	beq.n	800a69a <USBD_StdItfReq+0x26>
 800a68e:	2b40      	cmp	r3, #64	; 0x40
 800a690:	d82e      	bhi.n	800a6f0 <USBD_StdItfReq+0x7c>
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <USBD_StdItfReq+0x26>
 800a696:	2b20      	cmp	r3, #32
 800a698:	d12a      	bne.n	800a6f0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d81d      	bhi.n	800a6e2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	889b      	ldrh	r3, [r3, #4]
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d813      	bhi.n	800a6d8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	4798      	blx	r3
 800a6be:	4603      	mov	r3, r0
 800a6c0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	88db      	ldrh	r3, [r3, #6]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d110      	bne.n	800a6ec <USBD_StdItfReq+0x78>
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10d      	bne.n	800a6ec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fd58 	bl	800b186 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6d6:	e009      	b.n	800a6ec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fc8a 	bl	800aff4 <USBD_CtlError>
          break;
 800a6e0:	e004      	b.n	800a6ec <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fc85 	bl	800aff4 <USBD_CtlError>
          break;
 800a6ea:	e000      	b.n	800a6ee <USBD_StdItfReq+0x7a>
          break;
 800a6ec:	bf00      	nop
      }
      break;
 800a6ee:	e004      	b.n	800a6fa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fc7e 	bl	800aff4 <USBD_CtlError>
      break;
 800a6f8:	bf00      	nop
  }

  return USBD_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	889b      	ldrh	r3, [r3, #4]
 800a716:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a720:	2b40      	cmp	r3, #64	; 0x40
 800a722:	d007      	beq.n	800a734 <USBD_StdEPReq+0x30>
 800a724:	2b40      	cmp	r3, #64	; 0x40
 800a726:	f200 8146 	bhi.w	800a9b6 <USBD_StdEPReq+0x2b2>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00a      	beq.n	800a744 <USBD_StdEPReq+0x40>
 800a72e:	2b20      	cmp	r3, #32
 800a730:	f040 8141 	bne.w	800a9b6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	4798      	blx	r3
      break;
 800a742:	e13d      	b.n	800a9c0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a74c:	2b20      	cmp	r3, #32
 800a74e:	d10a      	bne.n	800a766 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	4798      	blx	r3
 800a75e:	4603      	mov	r3, r0
 800a760:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	e12d      	b.n	800a9c2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	785b      	ldrb	r3, [r3, #1]
 800a76a:	2b03      	cmp	r3, #3
 800a76c:	d007      	beq.n	800a77e <USBD_StdEPReq+0x7a>
 800a76e:	2b03      	cmp	r3, #3
 800a770:	f300 811b 	bgt.w	800a9aa <USBD_StdEPReq+0x2a6>
 800a774:	2b00      	cmp	r3, #0
 800a776:	d072      	beq.n	800a85e <USBD_StdEPReq+0x15a>
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d03a      	beq.n	800a7f2 <USBD_StdEPReq+0xee>
 800a77c:	e115      	b.n	800a9aa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a784:	2b02      	cmp	r3, #2
 800a786:	d002      	beq.n	800a78e <USBD_StdEPReq+0x8a>
 800a788:	2b03      	cmp	r3, #3
 800a78a:	d015      	beq.n	800a7b8 <USBD_StdEPReq+0xb4>
 800a78c:	e02b      	b.n	800a7e6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00c      	beq.n	800a7ae <USBD_StdEPReq+0xaa>
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	2b80      	cmp	r3, #128	; 0x80
 800a798:	d009      	beq.n	800a7ae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f001 f888 	bl	800b8b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a7a4:	2180      	movs	r1, #128	; 0x80
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f001 f884 	bl	800b8b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7ac:	e020      	b.n	800a7f0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fc1f 	bl	800aff4 <USBD_CtlError>
              break;
 800a7b6:	e01b      	b.n	800a7f0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	885b      	ldrh	r3, [r3, #2]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10e      	bne.n	800a7de <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00b      	beq.n	800a7de <USBD_StdEPReq+0xda>
 800a7c6:	7bbb      	ldrb	r3, [r7, #14]
 800a7c8:	2b80      	cmp	r3, #128	; 0x80
 800a7ca:	d008      	beq.n	800a7de <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	88db      	ldrh	r3, [r3, #6]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d104      	bne.n	800a7de <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 f86b 	bl	800b8b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fcd1 	bl	800b186 <USBD_CtlSendStatus>

              break;
 800a7e4:	e004      	b.n	800a7f0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fc03 	bl	800aff4 <USBD_CtlError>
              break;
 800a7ee:	bf00      	nop
          }
          break;
 800a7f0:	e0e0      	b.n	800a9b4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d002      	beq.n	800a802 <USBD_StdEPReq+0xfe>
 800a7fc:	2b03      	cmp	r3, #3
 800a7fe:	d015      	beq.n	800a82c <USBD_StdEPReq+0x128>
 800a800:	e026      	b.n	800a850 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00c      	beq.n	800a822 <USBD_StdEPReq+0x11e>
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2b80      	cmp	r3, #128	; 0x80
 800a80c:	d009      	beq.n	800a822 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f001 f84e 	bl	800b8b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a818:	2180      	movs	r1, #128	; 0x80
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f001 f84a 	bl	800b8b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a820:	e01c      	b.n	800a85c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fbe5 	bl	800aff4 <USBD_CtlError>
              break;
 800a82a:	e017      	b.n	800a85c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	885b      	ldrh	r3, [r3, #2]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d112      	bne.n	800a85a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a834:	7bbb      	ldrb	r3, [r7, #14]
 800a836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d004      	beq.n	800a848 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a83e:	7bbb      	ldrb	r3, [r7, #14]
 800a840:	4619      	mov	r1, r3
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f001 f855 	bl	800b8f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fc9c 	bl	800b186 <USBD_CtlSendStatus>
              }
              break;
 800a84e:	e004      	b.n	800a85a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fbce 	bl	800aff4 <USBD_CtlError>
              break;
 800a858:	e000      	b.n	800a85c <USBD_StdEPReq+0x158>
              break;
 800a85a:	bf00      	nop
          }
          break;
 800a85c:	e0aa      	b.n	800a9b4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a864:	2b02      	cmp	r3, #2
 800a866:	d002      	beq.n	800a86e <USBD_StdEPReq+0x16a>
 800a868:	2b03      	cmp	r3, #3
 800a86a:	d032      	beq.n	800a8d2 <USBD_StdEPReq+0x1ce>
 800a86c:	e097      	b.n	800a99e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d007      	beq.n	800a884 <USBD_StdEPReq+0x180>
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	2b80      	cmp	r3, #128	; 0x80
 800a878:	d004      	beq.n	800a884 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a87a:	6839      	ldr	r1, [r7, #0]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fbb9 	bl	800aff4 <USBD_CtlError>
                break;
 800a882:	e091      	b.n	800a9a8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	da0b      	bge.n	800a8a4 <USBD_StdEPReq+0x1a0>
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a892:	4613      	mov	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	3310      	adds	r3, #16
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	4413      	add	r3, r2
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	e00b      	b.n	800a8bc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4413      	add	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fbfd 	bl	800b0ca <USBD_CtlSendData>
              break;
 800a8d0:	e06a      	b.n	800a9a8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	da11      	bge.n	800a8fe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	f003 020f 	and.w	r2, r3, #15
 800a8e0:	6879      	ldr	r1, [r7, #4]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	440b      	add	r3, r1
 800a8ec:	3318      	adds	r3, #24
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d117      	bne.n	800a924 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fb7c 	bl	800aff4 <USBD_CtlError>
                  break;
 800a8fc:	e054      	b.n	800a9a8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a8fe:	7bbb      	ldrb	r3, [r7, #14]
 800a900:	f003 020f 	and.w	r2, r3, #15
 800a904:	6879      	ldr	r1, [r7, #4]
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	440b      	add	r3, r1
 800a910:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d104      	bne.n	800a924 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a91a:	6839      	ldr	r1, [r7, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fb69 	bl	800aff4 <USBD_CtlError>
                  break;
 800a922:	e041      	b.n	800a9a8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	da0b      	bge.n	800a944 <USBD_StdEPReq+0x240>
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a932:	4613      	mov	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	3310      	adds	r3, #16
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	4413      	add	r3, r2
 800a940:	3304      	adds	r3, #4
 800a942:	e00b      	b.n	800a95c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a94a:	4613      	mov	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4413      	add	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	4413      	add	r3, r2
 800a95a:	3304      	adds	r3, #4
 800a95c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <USBD_StdEPReq+0x266>
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	2b80      	cmp	r3, #128	; 0x80
 800a968:	d103      	bne.n	800a972 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	2200      	movs	r2, #0
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	e00e      	b.n	800a990 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	4619      	mov	r1, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 ffda 	bl	800b930 <USBD_LL_IsStallEP>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2201      	movs	r2, #1
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	e002      	b.n	800a990 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	2202      	movs	r2, #2
 800a994:	4619      	mov	r1, r3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fb97 	bl	800b0ca <USBD_CtlSendData>
              break;
 800a99c:	e004      	b.n	800a9a8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fb27 	bl	800aff4 <USBD_CtlError>
              break;
 800a9a6:	bf00      	nop
          }
          break;
 800a9a8:	e004      	b.n	800a9b4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fb21 	bl	800aff4 <USBD_CtlError>
          break;
 800a9b2:	bf00      	nop
      }
      break;
 800a9b4:	e004      	b.n	800a9c0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fb1b 	bl	800aff4 <USBD_CtlError>
      break;
 800a9be:	bf00      	nop
  }

  return ret;
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	885b      	ldrh	r3, [r3, #2]
 800a9e6:	0a1b      	lsrs	r3, r3, #8
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	2b06      	cmp	r3, #6
 800a9ee:	f200 8128 	bhi.w	800ac42 <USBD_GetDescriptor+0x276>
 800a9f2:	a201      	add	r2, pc, #4	; (adr r2, 800a9f8 <USBD_GetDescriptor+0x2c>)
 800a9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f8:	0800aa15 	.word	0x0800aa15
 800a9fc:	0800aa2d 	.word	0x0800aa2d
 800aa00:	0800aa6d 	.word	0x0800aa6d
 800aa04:	0800ac43 	.word	0x0800ac43
 800aa08:	0800ac43 	.word	0x0800ac43
 800aa0c:	0800abe3 	.word	0x0800abe3
 800aa10:	0800ac0f 	.word	0x0800ac0f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	7c12      	ldrb	r2, [r2, #16]
 800aa20:	f107 0108 	add.w	r1, r7, #8
 800aa24:	4610      	mov	r0, r2
 800aa26:	4798      	blx	r3
 800aa28:	60f8      	str	r0, [r7, #12]
      break;
 800aa2a:	e112      	b.n	800ac52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	7c1b      	ldrb	r3, [r3, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10d      	bne.n	800aa50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3c:	f107 0208 	add.w	r2, r7, #8
 800aa40:	4610      	mov	r0, r2
 800aa42:	4798      	blx	r3
 800aa44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	2202      	movs	r2, #2
 800aa4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa4e:	e100      	b.n	800ac52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa58:	f107 0208 	add.w	r2, r7, #8
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	4798      	blx	r3
 800aa60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3301      	adds	r3, #1
 800aa66:	2202      	movs	r2, #2
 800aa68:	701a      	strb	r2, [r3, #0]
      break;
 800aa6a:	e0f2      	b.n	800ac52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	885b      	ldrh	r3, [r3, #2]
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b05      	cmp	r3, #5
 800aa74:	f200 80ac 	bhi.w	800abd0 <USBD_GetDescriptor+0x204>
 800aa78:	a201      	add	r2, pc, #4	; (adr r2, 800aa80 <USBD_GetDescriptor+0xb4>)
 800aa7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7e:	bf00      	nop
 800aa80:	0800aa99 	.word	0x0800aa99
 800aa84:	0800aacd 	.word	0x0800aacd
 800aa88:	0800ab01 	.word	0x0800ab01
 800aa8c:	0800ab35 	.word	0x0800ab35
 800aa90:	0800ab69 	.word	0x0800ab69
 800aa94:	0800ab9d 	.word	0x0800ab9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00b      	beq.n	800aabc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	7c12      	ldrb	r2, [r2, #16]
 800aab0:	f107 0108 	add.w	r1, r7, #8
 800aab4:	4610      	mov	r0, r2
 800aab6:	4798      	blx	r3
 800aab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaba:	e091      	b.n	800abe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fa98 	bl	800aff4 <USBD_CtlError>
            err++;
 800aac4:	7afb      	ldrb	r3, [r7, #11]
 800aac6:	3301      	adds	r3, #1
 800aac8:	72fb      	strb	r3, [r7, #11]
          break;
 800aaca:	e089      	b.n	800abe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00b      	beq.n	800aaf0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	7c12      	ldrb	r2, [r2, #16]
 800aae4:	f107 0108 	add.w	r1, r7, #8
 800aae8:	4610      	mov	r0, r2
 800aaea:	4798      	blx	r3
 800aaec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaee:	e077      	b.n	800abe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fa7e 	bl	800aff4 <USBD_CtlError>
            err++;
 800aaf8:	7afb      	ldrb	r3, [r7, #11]
 800aafa:	3301      	adds	r3, #1
 800aafc:	72fb      	strb	r3, [r7, #11]
          break;
 800aafe:	e06f      	b.n	800abe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00b      	beq.n	800ab24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	7c12      	ldrb	r2, [r2, #16]
 800ab18:	f107 0108 	add.w	r1, r7, #8
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	4798      	blx	r3
 800ab20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab22:	e05d      	b.n	800abe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fa64 	bl	800aff4 <USBD_CtlError>
            err++;
 800ab2c:	7afb      	ldrb	r3, [r7, #11]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	72fb      	strb	r3, [r7, #11]
          break;
 800ab32:	e055      	b.n	800abe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	7c12      	ldrb	r2, [r2, #16]
 800ab4c:	f107 0108 	add.w	r1, r7, #8
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
 800ab54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab56:	e043      	b.n	800abe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fa4a 	bl	800aff4 <USBD_CtlError>
            err++;
 800ab60:	7afb      	ldrb	r3, [r7, #11]
 800ab62:	3301      	adds	r3, #1
 800ab64:	72fb      	strb	r3, [r7, #11]
          break;
 800ab66:	e03b      	b.n	800abe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	7c12      	ldrb	r2, [r2, #16]
 800ab80:	f107 0108 	add.w	r1, r7, #8
 800ab84:	4610      	mov	r0, r2
 800ab86:	4798      	blx	r3
 800ab88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab8a:	e029      	b.n	800abe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fa30 	bl	800aff4 <USBD_CtlError>
            err++;
 800ab94:	7afb      	ldrb	r3, [r7, #11]
 800ab96:	3301      	adds	r3, #1
 800ab98:	72fb      	strb	r3, [r7, #11]
          break;
 800ab9a:	e021      	b.n	800abe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	7c12      	ldrb	r2, [r2, #16]
 800abb4:	f107 0108 	add.w	r1, r7, #8
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3
 800abbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abbe:	e00f      	b.n	800abe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa16 	bl	800aff4 <USBD_CtlError>
            err++;
 800abc8:	7afb      	ldrb	r3, [r7, #11]
 800abca:	3301      	adds	r3, #1
 800abcc:	72fb      	strb	r3, [r7, #11]
          break;
 800abce:	e007      	b.n	800abe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fa0e 	bl	800aff4 <USBD_CtlError>
          err++;
 800abd8:	7afb      	ldrb	r3, [r7, #11]
 800abda:	3301      	adds	r3, #1
 800abdc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800abde:	e038      	b.n	800ac52 <USBD_GetDescriptor+0x286>
 800abe0:	e037      	b.n	800ac52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	7c1b      	ldrb	r3, [r3, #16]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d109      	bne.n	800abfe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf2:	f107 0208 	add.w	r2, r7, #8
 800abf6:	4610      	mov	r0, r2
 800abf8:	4798      	blx	r3
 800abfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abfc:	e029      	b.n	800ac52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800abfe:	6839      	ldr	r1, [r7, #0]
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f9f7 	bl	800aff4 <USBD_CtlError>
        err++;
 800ac06:	7afb      	ldrb	r3, [r7, #11]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	72fb      	strb	r3, [r7, #11]
      break;
 800ac0c:	e021      	b.n	800ac52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	7c1b      	ldrb	r3, [r3, #16]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10d      	bne.n	800ac32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	f107 0208 	add.w	r2, r7, #8
 800ac22:	4610      	mov	r0, r2
 800ac24:	4798      	blx	r3
 800ac26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	2207      	movs	r2, #7
 800ac2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac30:	e00f      	b.n	800ac52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f9dd 	bl	800aff4 <USBD_CtlError>
        err++;
 800ac3a:	7afb      	ldrb	r3, [r7, #11]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	72fb      	strb	r3, [r7, #11]
      break;
 800ac40:	e007      	b.n	800ac52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac42:	6839      	ldr	r1, [r7, #0]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f9d5 	bl	800aff4 <USBD_CtlError>
      err++;
 800ac4a:	7afb      	ldrb	r3, [r7, #11]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ac50:	bf00      	nop
  }

  if (err != 0U)
 800ac52:	7afb      	ldrb	r3, [r7, #11]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d11c      	bne.n	800ac92 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ac58:	893b      	ldrh	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d011      	beq.n	800ac82 <USBD_GetDescriptor+0x2b6>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	88db      	ldrh	r3, [r3, #6]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00d      	beq.n	800ac82 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	88da      	ldrh	r2, [r3, #6]
 800ac6a:	893b      	ldrh	r3, [r7, #8]
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	bf28      	it	cs
 800ac70:	4613      	movcs	r3, r2
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac76:	893b      	ldrh	r3, [r7, #8]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	68f9      	ldr	r1, [r7, #12]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 fa24 	bl	800b0ca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	88db      	ldrh	r3, [r3, #6]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d104      	bne.n	800ac94 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fa7b 	bl	800b186 <USBD_CtlSendStatus>
 800ac90:	e000      	b.n	800ac94 <USBD_GetDescriptor+0x2c8>
    return;
 800ac92:	bf00      	nop
    }
  }
}
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop

0800ac9c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	889b      	ldrh	r3, [r3, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d130      	bne.n	800ad10 <USBD_SetAddress+0x74>
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	88db      	ldrh	r3, [r3, #6]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d12c      	bne.n	800ad10 <USBD_SetAddress+0x74>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	885b      	ldrh	r3, [r3, #2]
 800acba:	2b7f      	cmp	r3, #127	; 0x7f
 800acbc:	d828      	bhi.n	800ad10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	885b      	ldrh	r3, [r3, #2]
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d104      	bne.n	800acde <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f98c 	bl	800aff4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acdc:	e01d      	b.n	800ad1a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	7bfa      	ldrb	r2, [r7, #15]
 800ace2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
 800ace8:	4619      	mov	r1, r3
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fe4d 	bl	800b98a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fa48 	bl	800b186 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800acf6:	7bfb      	ldrb	r3, [r7, #15]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d004      	beq.n	800ad06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2202      	movs	r2, #2
 800ad00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad04:	e009      	b.n	800ad1a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad0e:	e004      	b.n	800ad1a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 f96e 	bl	800aff4 <USBD_CtlError>
  }
}
 800ad18:	bf00      	nop
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	885b      	ldrh	r3, [r3, #2]
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	4b41      	ldr	r3, [pc, #260]	; (800ae3c <USBD_SetConfig+0x118>)
 800ad36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad38:	4b40      	ldr	r3, [pc, #256]	; (800ae3c <USBD_SetConfig+0x118>)
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d904      	bls.n	800ad4a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f956 	bl	800aff4 <USBD_CtlError>
 800ad48:	e075      	b.n	800ae36 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d002      	beq.n	800ad5a <USBD_SetConfig+0x36>
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d023      	beq.n	800ada0 <USBD_SetConfig+0x7c>
 800ad58:	e062      	b.n	800ae20 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ad5a:	4b38      	ldr	r3, [pc, #224]	; (800ae3c <USBD_SetConfig+0x118>)
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d01a      	beq.n	800ad98 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ad62:	4b36      	ldr	r3, [pc, #216]	; (800ae3c <USBD_SetConfig+0x118>)
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2203      	movs	r2, #3
 800ad70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ad74:	4b31      	ldr	r3, [pc, #196]	; (800ae3c <USBD_SetConfig+0x118>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff f9e5 	bl	800a14a <USBD_SetClassConfig>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d104      	bne.n	800ad90 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f933 	bl	800aff4 <USBD_CtlError>
            return;
 800ad8e:	e052      	b.n	800ae36 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f9f8 	bl	800b186 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ad96:	e04e      	b.n	800ae36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f9f4 	bl	800b186 <USBD_CtlSendStatus>
        break;
 800ad9e:	e04a      	b.n	800ae36 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ada0:	4b26      	ldr	r3, [pc, #152]	; (800ae3c <USBD_SetConfig+0x118>)
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d112      	bne.n	800adce <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2202      	movs	r2, #2
 800adac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800adb0:	4b22      	ldr	r3, [pc, #136]	; (800ae3c <USBD_SetConfig+0x118>)
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800adba:	4b20      	ldr	r3, [pc, #128]	; (800ae3c <USBD_SetConfig+0x118>)
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff f9e1 	bl	800a188 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f9dd 	bl	800b186 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800adcc:	e033      	b.n	800ae36 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800adce:	4b1b      	ldr	r3, [pc, #108]	; (800ae3c <USBD_SetConfig+0x118>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	429a      	cmp	r2, r3
 800adda:	d01d      	beq.n	800ae18 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	4619      	mov	r1, r3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff f9cf 	bl	800a188 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800adea:	4b14      	ldr	r3, [pc, #80]	; (800ae3c <USBD_SetConfig+0x118>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800adf4:	4b11      	ldr	r3, [pc, #68]	; (800ae3c <USBD_SetConfig+0x118>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff f9a5 	bl	800a14a <USBD_SetClassConfig>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d104      	bne.n	800ae10 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f8f3 	bl	800aff4 <USBD_CtlError>
            return;
 800ae0e:	e012      	b.n	800ae36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f9b8 	bl	800b186 <USBD_CtlSendStatus>
        break;
 800ae16:	e00e      	b.n	800ae36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f9b4 	bl	800b186 <USBD_CtlSendStatus>
        break;
 800ae1e:	e00a      	b.n	800ae36 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f8e6 	bl	800aff4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ae28:	4b04      	ldr	r3, [pc, #16]	; (800ae3c <USBD_SetConfig+0x118>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff f9aa 	bl	800a188 <USBD_ClrClassConfig>
        break;
 800ae34:	bf00      	nop
    }
  }
}
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	200004a8 	.word	0x200004a8

0800ae40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	88db      	ldrh	r3, [r3, #6]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d004      	beq.n	800ae5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f8cd 	bl	800aff4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae5a:	e022      	b.n	800aea2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	dc02      	bgt.n	800ae6c <USBD_GetConfig+0x2c>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	dc03      	bgt.n	800ae72 <USBD_GetConfig+0x32>
 800ae6a:	e015      	b.n	800ae98 <USBD_GetConfig+0x58>
 800ae6c:	2b03      	cmp	r3, #3
 800ae6e:	d00b      	beq.n	800ae88 <USBD_GetConfig+0x48>
 800ae70:	e012      	b.n	800ae98 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	3308      	adds	r3, #8
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f922 	bl	800b0ca <USBD_CtlSendData>
        break;
 800ae86:	e00c      	b.n	800aea2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	4619      	mov	r1, r3
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f91a 	bl	800b0ca <USBD_CtlSendData>
        break;
 800ae96:	e004      	b.n	800aea2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f8aa 	bl	800aff4 <USBD_CtlError>
        break;
 800aea0:	bf00      	nop
}
 800aea2:	bf00      	nop
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b082      	sub	sp, #8
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
 800aeb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeba:	3b01      	subs	r3, #1
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d81e      	bhi.n	800aefe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	88db      	ldrh	r3, [r3, #6]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d004      	beq.n	800aed2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f892 	bl	800aff4 <USBD_CtlError>
        break;
 800aed0:	e01a      	b.n	800af08 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d005      	beq.n	800aeee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	f043 0202 	orr.w	r2, r3, #2
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	330c      	adds	r3, #12
 800aef2:	2202      	movs	r2, #2
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f8e7 	bl	800b0ca <USBD_CtlSendData>
      break;
 800aefc:	e004      	b.n	800af08 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f877 	bl	800aff4 <USBD_CtlError>
      break;
 800af06:	bf00      	nop
  }
}
 800af08:	bf00      	nop
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	885b      	ldrh	r3, [r3, #2]
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d106      	bne.n	800af30 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f92b 	bl	800b186 <USBD_CtlSendStatus>
  }
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af48:	3b01      	subs	r3, #1
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d80b      	bhi.n	800af66 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	885b      	ldrh	r3, [r3, #2]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d10c      	bne.n	800af70 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f911 	bl	800b186 <USBD_CtlSendStatus>
      }
      break;
 800af64:	e004      	b.n	800af70 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800af66:	6839      	ldr	r1, [r7, #0]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 f843 	bl	800aff4 <USBD_CtlError>
      break;
 800af6e:	e000      	b.n	800af72 <USBD_ClrFeature+0x3a>
      break;
 800af70:	bf00      	nop
  }
}
 800af72:	bf00      	nop
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b083      	sub	sp, #12
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	781a      	ldrb	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	785a      	ldrb	r2, [r3, #1]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	3302      	adds	r3, #2
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	3303      	adds	r3, #3
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	021b      	lsls	r3, r3, #8
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	4413      	add	r3, r2
 800afaa:	b29a      	uxth	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	3304      	adds	r3, #4
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	3305      	adds	r3, #5
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	021b      	lsls	r3, r3, #8
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	4413      	add	r3, r2
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	3306      	adds	r3, #6
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	3307      	adds	r3, #7
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	b29b      	uxth	r3, r3
 800afdc:	021b      	lsls	r3, r3, #8
 800afde:	b29b      	uxth	r3, r3
 800afe0:	4413      	add	r3, r2
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	80da      	strh	r2, [r3, #6]

}
 800afe8:	bf00      	nop
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800affe:	2180      	movs	r1, #128	; 0x80
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 fc57 	bl	800b8b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b006:	2100      	movs	r1, #0
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fc53 	bl	800b8b4 <USBD_LL_StallEP>
}
 800b00e:	bf00      	nop
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b086      	sub	sp, #24
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	60f8      	str	r0, [r7, #12]
 800b01e:	60b9      	str	r1, [r7, #8]
 800b020:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d032      	beq.n	800b092 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 f834 	bl	800b09a <USBD_GetLen>
 800b032:	4603      	mov	r3, r0
 800b034:	3301      	adds	r3, #1
 800b036:	b29b      	uxth	r3, r3
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	b29a      	uxth	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b040:	7dfb      	ldrb	r3, [r7, #23]
 800b042:	1c5a      	adds	r2, r3, #1
 800b044:	75fa      	strb	r2, [r7, #23]
 800b046:	461a      	mov	r2, r3
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	4413      	add	r3, r2
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	7812      	ldrb	r2, [r2, #0]
 800b050:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b052:	7dfb      	ldrb	r3, [r7, #23]
 800b054:	1c5a      	adds	r2, r3, #1
 800b056:	75fa      	strb	r2, [r7, #23]
 800b058:	461a      	mov	r2, r3
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	4413      	add	r3, r2
 800b05e:	2203      	movs	r2, #3
 800b060:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b062:	e012      	b.n	800b08a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	1c5a      	adds	r2, r3, #1
 800b068:	60fa      	str	r2, [r7, #12]
 800b06a:	7dfa      	ldrb	r2, [r7, #23]
 800b06c:	1c51      	adds	r1, r2, #1
 800b06e:	75f9      	strb	r1, [r7, #23]
 800b070:	4611      	mov	r1, r2
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	440a      	add	r2, r1
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	75fa      	strb	r2, [r7, #23]
 800b080:	461a      	mov	r2, r3
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	4413      	add	r3, r2
 800b086:	2200      	movs	r2, #0
 800b088:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1e8      	bne.n	800b064 <USBD_GetString+0x4e>
    }
  }
}
 800b092:	bf00      	nop
 800b094:	3718      	adds	r7, #24
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b085      	sub	sp, #20
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b0a6:	e005      	b.n	800b0b4 <USBD_GetLen+0x1a>
  {
    len++;
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1f5      	bne.n	800b0a8 <USBD_GetLen+0xe>
  }

  return len;
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2202      	movs	r2, #2
 800b0dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b0e0:	88fa      	ldrh	r2, [r7, #6]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b0e6:	88fa      	ldrh	r2, [r7, #6]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0ec:	88fb      	ldrh	r3, [r7, #6]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 fc68 	bl	800b9c8 <USBD_LL_Transmit>

  return USBD_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	60b9      	str	r1, [r7, #8]
 800b10c:	4613      	mov	r3, r2
 800b10e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b110:	88fb      	ldrh	r3, [r7, #6]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	2100      	movs	r1, #0
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f000 fc56 	bl	800b9c8 <USBD_LL_Transmit>

  return USBD_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60f8      	str	r0, [r7, #12]
 800b12e:	60b9      	str	r1, [r7, #8]
 800b130:	4613      	mov	r3, r2
 800b132:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2203      	movs	r2, #3
 800b138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b13c:	88fa      	ldrh	r2, [r7, #6]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b144:	88fa      	ldrh	r2, [r7, #6]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b14c:	88fb      	ldrh	r3, [r7, #6]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	2100      	movs	r1, #0
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f000 fc5b 	bl	800ba0e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	4613      	mov	r3, r2
 800b16e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b170:	88fb      	ldrh	r3, [r7, #6]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	2100      	movs	r1, #0
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f000 fc49 	bl	800ba0e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b082      	sub	sp, #8
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2204      	movs	r2, #4
 800b192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b196:	2300      	movs	r3, #0
 800b198:	2200      	movs	r2, #0
 800b19a:	2100      	movs	r1, #0
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fc13 	bl	800b9c8 <USBD_LL_Transmit>

  return USBD_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2205      	movs	r2, #5
 800b1b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1bc:	2300      	movs	r3, #0
 800b1be:	2200      	movs	r2, #0
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fc23 	bl	800ba0e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	4912      	ldr	r1, [pc, #72]	; (800b224 <MX_USB_DEVICE_Init+0x50>)
 800b1dc:	4812      	ldr	r0, [pc, #72]	; (800b228 <MX_USB_DEVICE_Init+0x54>)
 800b1de:	f7fe ff58 	bl	800a092 <USBD_Init>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d001      	beq.n	800b1ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1e8:	f7f6 f8a8 	bl	800133c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1ec:	490f      	ldr	r1, [pc, #60]	; (800b22c <MX_USB_DEVICE_Init+0x58>)
 800b1ee:	480e      	ldr	r0, [pc, #56]	; (800b228 <MX_USB_DEVICE_Init+0x54>)
 800b1f0:	f7fe ff7a 	bl	800a0e8 <USBD_RegisterClass>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b1fa:	f7f6 f89f 	bl	800133c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b1fe:	490c      	ldr	r1, [pc, #48]	; (800b230 <MX_USB_DEVICE_Init+0x5c>)
 800b200:	4809      	ldr	r0, [pc, #36]	; (800b228 <MX_USB_DEVICE_Init+0x54>)
 800b202:	f7fe fed7 	bl	8009fb4 <USBD_CDC_RegisterInterface>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d001      	beq.n	800b210 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b20c:	f7f6 f896 	bl	800133c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b210:	4805      	ldr	r0, [pc, #20]	; (800b228 <MX_USB_DEVICE_Init+0x54>)
 800b212:	f7fe ff83 	bl	800a11c <USBD_Start>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b21c:	f7f6 f88e 	bl	800133c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b220:	bf00      	nop
 800b222:	bd80      	pop	{r7, pc}
 800b224:	2000012c 	.word	0x2000012c
 800b228:	200004ac 	.word	0x200004ac
 800b22c:	20000018 	.word	0x20000018
 800b230:	2000011c 	.word	0x2000011c

0800b234 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b238:	2200      	movs	r2, #0
 800b23a:	4905      	ldr	r1, [pc, #20]	; (800b250 <CDC_Init_FS+0x1c>)
 800b23c:	4805      	ldr	r0, [pc, #20]	; (800b254 <CDC_Init_FS+0x20>)
 800b23e:	f7fe fed0 	bl	8009fe2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b242:	4905      	ldr	r1, [pc, #20]	; (800b258 <CDC_Init_FS+0x24>)
 800b244:	4803      	ldr	r0, [pc, #12]	; (800b254 <CDC_Init_FS+0x20>)
 800b246:	f7fe fee6 	bl	800a016 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b24a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	20000b70 	.word	0x20000b70
 800b254:	200004ac 	.word	0x200004ac
 800b258:	20000770 	.word	0x20000770

0800b25c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b25c:	b480      	push	{r7}
 800b25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b260:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b262:	4618      	mov	r0, r3
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	4603      	mov	r3, r0
 800b274:	6039      	str	r1, [r7, #0]
 800b276:	71fb      	strb	r3, [r7, #7]
 800b278:	4613      	mov	r3, r2
 800b27a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b27c:	79fb      	ldrb	r3, [r7, #7]
 800b27e:	2b23      	cmp	r3, #35	; 0x23
 800b280:	d84a      	bhi.n	800b318 <CDC_Control_FS+0xac>
 800b282:	a201      	add	r2, pc, #4	; (adr r2, 800b288 <CDC_Control_FS+0x1c>)
 800b284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b288:	0800b319 	.word	0x0800b319
 800b28c:	0800b319 	.word	0x0800b319
 800b290:	0800b319 	.word	0x0800b319
 800b294:	0800b319 	.word	0x0800b319
 800b298:	0800b319 	.word	0x0800b319
 800b29c:	0800b319 	.word	0x0800b319
 800b2a0:	0800b319 	.word	0x0800b319
 800b2a4:	0800b319 	.word	0x0800b319
 800b2a8:	0800b319 	.word	0x0800b319
 800b2ac:	0800b319 	.word	0x0800b319
 800b2b0:	0800b319 	.word	0x0800b319
 800b2b4:	0800b319 	.word	0x0800b319
 800b2b8:	0800b319 	.word	0x0800b319
 800b2bc:	0800b319 	.word	0x0800b319
 800b2c0:	0800b319 	.word	0x0800b319
 800b2c4:	0800b319 	.word	0x0800b319
 800b2c8:	0800b319 	.word	0x0800b319
 800b2cc:	0800b319 	.word	0x0800b319
 800b2d0:	0800b319 	.word	0x0800b319
 800b2d4:	0800b319 	.word	0x0800b319
 800b2d8:	0800b319 	.word	0x0800b319
 800b2dc:	0800b319 	.word	0x0800b319
 800b2e0:	0800b319 	.word	0x0800b319
 800b2e4:	0800b319 	.word	0x0800b319
 800b2e8:	0800b319 	.word	0x0800b319
 800b2ec:	0800b319 	.word	0x0800b319
 800b2f0:	0800b319 	.word	0x0800b319
 800b2f4:	0800b319 	.word	0x0800b319
 800b2f8:	0800b319 	.word	0x0800b319
 800b2fc:	0800b319 	.word	0x0800b319
 800b300:	0800b319 	.word	0x0800b319
 800b304:	0800b319 	.word	0x0800b319
 800b308:	0800b319 	.word	0x0800b319
 800b30c:	0800b319 	.word	0x0800b319
 800b310:	0800b319 	.word	0x0800b319
 800b314:	0800b319 	.word	0x0800b319
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b318:	bf00      	nop
  }

  return (USBD_OK);
 800b31a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	4805      	ldr	r0, [pc, #20]	; (800b34c <CDC_Receive_FS+0x24>)
 800b336:	f7fe fe6e 	bl	800a016 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b33a:	4804      	ldr	r0, [pc, #16]	; (800b34c <CDC_Receive_FS+0x24>)
 800b33c:	f7fe fe7f 	bl	800a03e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b340:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b342:	4618      	mov	r0, r3
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	200004ac 	.word	0x200004ac

0800b350 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	2212      	movs	r2, #18
 800b360:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b362:	4b03      	ldr	r3, [pc, #12]	; (800b370 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b364:	4618      	mov	r0, r3
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	20000148 	.word	0x20000148

0800b374 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	6039      	str	r1, [r7, #0]
 800b37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2204      	movs	r2, #4
 800b384:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b386:	4b03      	ldr	r3, [pc, #12]	; (800b394 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	2000015c 	.word	0x2000015c

0800b398 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	6039      	str	r1, [r7, #0]
 800b3a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3a4:	79fb      	ldrb	r3, [r7, #7]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d105      	bne.n	800b3b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	4907      	ldr	r1, [pc, #28]	; (800b3cc <USBD_FS_ProductStrDescriptor+0x34>)
 800b3ae:	4808      	ldr	r0, [pc, #32]	; (800b3d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b3b0:	f7ff fe31 	bl	800b016 <USBD_GetString>
 800b3b4:	e004      	b.n	800b3c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	4904      	ldr	r1, [pc, #16]	; (800b3cc <USBD_FS_ProductStrDescriptor+0x34>)
 800b3ba:	4805      	ldr	r0, [pc, #20]	; (800b3d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b3bc:	f7ff fe2b 	bl	800b016 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3c0:	4b02      	ldr	r3, [pc, #8]	; (800b3cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	20000f70 	.word	0x20000f70
 800b3d0:	0800e8b0 	.word	0x0800e8b0

0800b3d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	6039      	str	r1, [r7, #0]
 800b3de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	4904      	ldr	r1, [pc, #16]	; (800b3f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b3e4:	4804      	ldr	r0, [pc, #16]	; (800b3f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b3e6:	f7ff fe16 	bl	800b016 <USBD_GetString>
  return USBD_StrDesc;
 800b3ea:	4b02      	ldr	r3, [pc, #8]	; (800b3f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	20000f70 	.word	0x20000f70
 800b3f8:	0800e8c8 	.word	0x0800e8c8

0800b3fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	4603      	mov	r3, r0
 800b404:	6039      	str	r1, [r7, #0]
 800b406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	221a      	movs	r2, #26
 800b40c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b40e:	f000 f843 	bl	800b498 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b412:	4b02      	ldr	r3, [pc, #8]	; (800b41c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b414:	4618      	mov	r0, r3
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	20000160 	.word	0x20000160

0800b420 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	4603      	mov	r3, r0
 800b428:	6039      	str	r1, [r7, #0]
 800b42a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b42c:	79fb      	ldrb	r3, [r7, #7]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d105      	bne.n	800b43e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	4907      	ldr	r1, [pc, #28]	; (800b454 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b436:	4808      	ldr	r0, [pc, #32]	; (800b458 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b438:	f7ff fded 	bl	800b016 <USBD_GetString>
 800b43c:	e004      	b.n	800b448 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	4904      	ldr	r1, [pc, #16]	; (800b454 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b442:	4805      	ldr	r0, [pc, #20]	; (800b458 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b444:	f7ff fde7 	bl	800b016 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b448:	4b02      	ldr	r3, [pc, #8]	; (800b454 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	20000f70 	.word	0x20000f70
 800b458:	0800e8dc 	.word	0x0800e8dc

0800b45c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	4603      	mov	r3, r0
 800b464:	6039      	str	r1, [r7, #0]
 800b466:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b468:	79fb      	ldrb	r3, [r7, #7]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d105      	bne.n	800b47a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	4907      	ldr	r1, [pc, #28]	; (800b490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b472:	4808      	ldr	r0, [pc, #32]	; (800b494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b474:	f7ff fdcf 	bl	800b016 <USBD_GetString>
 800b478:	e004      	b.n	800b484 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	4904      	ldr	r1, [pc, #16]	; (800b490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b47e:	4805      	ldr	r0, [pc, #20]	; (800b494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b480:	f7ff fdc9 	bl	800b016 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b484:	4b02      	ldr	r3, [pc, #8]	; (800b490 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b486:	4618      	mov	r0, r3
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	20000f70 	.word	0x20000f70
 800b494:	0800e8e8 	.word	0x0800e8e8

0800b498 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b49e:	4b0f      	ldr	r3, [pc, #60]	; (800b4dc <Get_SerialNum+0x44>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b4a4:	4b0e      	ldr	r3, [pc, #56]	; (800b4e0 <Get_SerialNum+0x48>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b4aa:	4b0e      	ldr	r3, [pc, #56]	; (800b4e4 <Get_SerialNum+0x4c>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d009      	beq.n	800b4d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b4be:	2208      	movs	r2, #8
 800b4c0:	4909      	ldr	r1, [pc, #36]	; (800b4e8 <Get_SerialNum+0x50>)
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 f814 	bl	800b4f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b4c8:	2204      	movs	r2, #4
 800b4ca:	4908      	ldr	r1, [pc, #32]	; (800b4ec <Get_SerialNum+0x54>)
 800b4cc:	68b8      	ldr	r0, [r7, #8]
 800b4ce:	f000 f80f 	bl	800b4f0 <IntToUnicode>
  }
}
 800b4d2:	bf00      	nop
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	1ffff7ac 	.word	0x1ffff7ac
 800b4e0:	1ffff7b0 	.word	0x1ffff7b0
 800b4e4:	1ffff7b4 	.word	0x1ffff7b4
 800b4e8:	20000162 	.word	0x20000162
 800b4ec:	20000172 	.word	0x20000172

0800b4f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b087      	sub	sp, #28
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b502:	2300      	movs	r3, #0
 800b504:	75fb      	strb	r3, [r7, #23]
 800b506:	e027      	b.n	800b558 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	0f1b      	lsrs	r3, r3, #28
 800b50c:	2b09      	cmp	r3, #9
 800b50e:	d80b      	bhi.n	800b528 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	0f1b      	lsrs	r3, r3, #28
 800b514:	b2da      	uxtb	r2, r3
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	005b      	lsls	r3, r3, #1
 800b51a:	4619      	mov	r1, r3
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	440b      	add	r3, r1
 800b520:	3230      	adds	r2, #48	; 0x30
 800b522:	b2d2      	uxtb	r2, r2
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	e00a      	b.n	800b53e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	0f1b      	lsrs	r3, r3, #28
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	005b      	lsls	r3, r3, #1
 800b532:	4619      	mov	r1, r3
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	440b      	add	r3, r1
 800b538:	3237      	adds	r2, #55	; 0x37
 800b53a:	b2d2      	uxtb	r2, r2
 800b53c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	011b      	lsls	r3, r3, #4
 800b542:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b544:	7dfb      	ldrb	r3, [r7, #23]
 800b546:	005b      	lsls	r3, r3, #1
 800b548:	3301      	adds	r3, #1
 800b54a:	68ba      	ldr	r2, [r7, #8]
 800b54c:	4413      	add	r3, r2
 800b54e:	2200      	movs	r2, #0
 800b550:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b552:	7dfb      	ldrb	r3, [r7, #23]
 800b554:	3301      	adds	r3, #1
 800b556:	75fb      	strb	r3, [r7, #23]
 800b558:	7dfa      	ldrb	r2, [r7, #23]
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d3d3      	bcc.n	800b508 <IntToUnicode+0x18>
  }
}
 800b560:	bf00      	nop
 800b562:	bf00      	nop
 800b564:	371c      	adds	r7, #28
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
	...

0800b570 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b08a      	sub	sp, #40	; 0x28
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b578:	f107 0314 	add.w	r3, r7, #20
 800b57c:	2200      	movs	r2, #0
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	605a      	str	r2, [r3, #4]
 800b582:	609a      	str	r2, [r3, #8]
 800b584:	60da      	str	r2, [r3, #12]
 800b586:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a1c      	ldr	r2, [pc, #112]	; (800b600 <HAL_PCD_MspInit+0x90>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d131      	bne.n	800b5f6 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b592:	4b1c      	ldr	r3, [pc, #112]	; (800b604 <HAL_PCD_MspInit+0x94>)
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	4a1b      	ldr	r2, [pc, #108]	; (800b604 <HAL_PCD_MspInit+0x94>)
 800b598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b59c:	6153      	str	r3, [r2, #20]
 800b59e:	4b19      	ldr	r3, [pc, #100]	; (800b604 <HAL_PCD_MspInit+0x94>)
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5a6:	613b      	str	r3, [r7, #16]
 800b5a8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800b5aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b5ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b5bc:	230e      	movs	r3, #14
 800b5be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5c0:	f107 0314 	add.w	r3, r7, #20
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b5ca:	f7f6 fa7b 	bl	8001ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b5ce:	4b0d      	ldr	r3, [pc, #52]	; (800b604 <HAL_PCD_MspInit+0x94>)
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	4a0c      	ldr	r2, [pc, #48]	; (800b604 <HAL_PCD_MspInit+0x94>)
 800b5d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5d8:	61d3      	str	r3, [r2, #28]
 800b5da:	4b0a      	ldr	r3, [pc, #40]	; (800b604 <HAL_PCD_MspInit+0x94>)
 800b5dc:	69db      	ldr	r3, [r3, #28]
 800b5de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	2014      	movs	r0, #20
 800b5ec:	f7f6 fa33 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800b5f0:	2014      	movs	r0, #20
 800b5f2:	f7f6 fa4c 	bl	8001a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b5f6:	bf00      	nop
 800b5f8:	3728      	adds	r7, #40	; 0x28
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	40005c00 	.word	0x40005c00
 800b604:	40021000 	.word	0x40021000

0800b608 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b61c:	4619      	mov	r1, r3
 800b61e:	4610      	mov	r0, r2
 800b620:	f7fe fdc5 	bl	800a1ae <USBD_LL_SetupStage>
}
 800b624:	bf00      	nop
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	460b      	mov	r3, r1
 800b636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b63e:	78fa      	ldrb	r2, [r7, #3]
 800b640:	6879      	ldr	r1, [r7, #4]
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	440b      	add	r3, r1
 800b64c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	78fb      	ldrb	r3, [r7, #3]
 800b654:	4619      	mov	r1, r3
 800b656:	f7fe fdf7 	bl	800a248 <USBD_LL_DataOutStage>
}
 800b65a:	bf00      	nop
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b674:	78fa      	ldrb	r2, [r7, #3]
 800b676:	6879      	ldr	r1, [r7, #4]
 800b678:	4613      	mov	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	4413      	add	r3, r2
 800b67e:	00db      	lsls	r3, r3, #3
 800b680:	440b      	add	r3, r1
 800b682:	333c      	adds	r3, #60	; 0x3c
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	78fb      	ldrb	r3, [r7, #3]
 800b688:	4619      	mov	r1, r3
 800b68a:	f7fe fe4e 	bl	800a32a <USBD_LL_DataInStage>
}
 800b68e:	bf00      	nop
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b082      	sub	sp, #8
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fe ff61 	bl	800a56c <USBD_LL_SOF>
}
 800b6aa:	bf00      	nop
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b084      	sub	sp, #16
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d001      	beq.n	800b6ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b6c6:	f7f5 fe39 	bl	800133c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b6d0:	7bfa      	ldrb	r2, [r7, #15]
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fe ff0e 	bl	800a4f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fe fec7 	bl	800a474 <USBD_LL_Reset>
}
 800b6e6:	bf00      	nop
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
	...

0800b6f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fe ff09 	bl	800a516 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d005      	beq.n	800b718 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b70c:	4b04      	ldr	r3, [pc, #16]	; (800b720 <HAL_PCD_SuspendCallback+0x30>)
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	4a03      	ldr	r2, [pc, #12]	; (800b720 <HAL_PCD_SuspendCallback+0x30>)
 800b712:	f043 0306 	orr.w	r3, r3, #6
 800b716:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	e000ed00 	.word	0xe000ed00

0800b724 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b732:	4618      	mov	r0, r3
 800b734:	f7fe ff04 	bl	800a540 <USBD_LL_Resume>
}
 800b738:	bf00      	nop
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b748:	4a28      	ldr	r2, [pc, #160]	; (800b7ec <USBD_LL_Init+0xac>)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a26      	ldr	r2, [pc, #152]	; (800b7ec <USBD_LL_Init+0xac>)
 800b754:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b758:	4b24      	ldr	r3, [pc, #144]	; (800b7ec <USBD_LL_Init+0xac>)
 800b75a:	4a25      	ldr	r2, [pc, #148]	; (800b7f0 <USBD_LL_Init+0xb0>)
 800b75c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b75e:	4b23      	ldr	r3, [pc, #140]	; (800b7ec <USBD_LL_Init+0xac>)
 800b760:	2208      	movs	r2, #8
 800b762:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b764:	4b21      	ldr	r3, [pc, #132]	; (800b7ec <USBD_LL_Init+0xac>)
 800b766:	2202      	movs	r2, #2
 800b768:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b76a:	4b20      	ldr	r3, [pc, #128]	; (800b7ec <USBD_LL_Init+0xac>)
 800b76c:	2202      	movs	r2, #2
 800b76e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b770:	4b1e      	ldr	r3, [pc, #120]	; (800b7ec <USBD_LL_Init+0xac>)
 800b772:	2200      	movs	r2, #0
 800b774:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b776:	4b1d      	ldr	r3, [pc, #116]	; (800b7ec <USBD_LL_Init+0xac>)
 800b778:	2200      	movs	r2, #0
 800b77a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b77c:	481b      	ldr	r0, [pc, #108]	; (800b7ec <USBD_LL_Init+0xac>)
 800b77e:	f7f7 f972 	bl	8002a66 <HAL_PCD_Init>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b788:	f7f5 fdd8 	bl	800133c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b792:	2318      	movs	r3, #24
 800b794:	2200      	movs	r2, #0
 800b796:	2100      	movs	r1, #0
 800b798:	f7f8 fdfb 	bl	8004392 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7a2:	2358      	movs	r3, #88	; 0x58
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	2180      	movs	r1, #128	; 0x80
 800b7a8:	f7f8 fdf3 	bl	8004392 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7b2:	23c0      	movs	r3, #192	; 0xc0
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	2181      	movs	r1, #129	; 0x81
 800b7b8:	f7f8 fdeb 	bl	8004392 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	f7f8 fde2 	bl	8004392 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7d8:	2200      	movs	r2, #0
 800b7da:	2182      	movs	r1, #130	; 0x82
 800b7dc:	f7f8 fdd9 	bl	8004392 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20001170 	.word	0x20001170
 800b7f0:	40005c00 	.word	0x40005c00

0800b7f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7f7 f9fd 	bl	8002c0a <HAL_PCD_Start>
 800b810:	4603      	mov	r3, r0
 800b812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b814:	7bfb      	ldrb	r3, [r7, #15]
 800b816:	4618      	mov	r0, r3
 800b818:	f000 f954 	bl	800bac4 <USBD_Get_USB_Status>
 800b81c:	4603      	mov	r3, r0
 800b81e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b820:	7bbb      	ldrb	r3, [r7, #14]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b084      	sub	sp, #16
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	4608      	mov	r0, r1
 800b834:	4611      	mov	r1, r2
 800b836:	461a      	mov	r2, r3
 800b838:	4603      	mov	r3, r0
 800b83a:	70fb      	strb	r3, [r7, #3]
 800b83c:	460b      	mov	r3, r1
 800b83e:	70bb      	strb	r3, [r7, #2]
 800b840:	4613      	mov	r3, r2
 800b842:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b844:	2300      	movs	r3, #0
 800b846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b852:	78bb      	ldrb	r3, [r7, #2]
 800b854:	883a      	ldrh	r2, [r7, #0]
 800b856:	78f9      	ldrb	r1, [r7, #3]
 800b858:	f7f7 faf6 	bl	8002e48 <HAL_PCD_EP_Open>
 800b85c:	4603      	mov	r3, r0
 800b85e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b860:	7bfb      	ldrb	r3, [r7, #15]
 800b862:	4618      	mov	r0, r3
 800b864:	f000 f92e 	bl	800bac4 <USBD_Get_USB_Status>
 800b868:	4603      	mov	r3, r0
 800b86a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b86c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b084      	sub	sp, #16
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	460b      	mov	r3, r1
 800b880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b886:	2300      	movs	r3, #0
 800b888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b890:	78fa      	ldrb	r2, [r7, #3]
 800b892:	4611      	mov	r1, r2
 800b894:	4618      	mov	r0, r3
 800b896:	f7f7 fb34 	bl	8002f02 <HAL_PCD_EP_Close>
 800b89a:	4603      	mov	r3, r0
 800b89c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b89e:	7bfb      	ldrb	r3, [r7, #15]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f000 f90f 	bl	800bac4 <USBD_Get_USB_Status>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8ce:	78fa      	ldrb	r2, [r7, #3]
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7f7 fbdd 	bl	8003092 <HAL_PCD_EP_SetStall>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 f8f0 	bl	800bac4 <USBD_Get_USB_Status>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b084      	sub	sp, #16
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b90c:	78fa      	ldrb	r2, [r7, #3]
 800b90e:	4611      	mov	r1, r2
 800b910:	4618      	mov	r0, r3
 800b912:	f7f7 fc10 	bl	8003136 <HAL_PCD_EP_ClrStall>
 800b916:	4603      	mov	r3, r0
 800b918:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f000 f8d1 	bl	800bac4 <USBD_Get_USB_Status>
 800b922:	4603      	mov	r3, r0
 800b924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b926:	7bbb      	ldrb	r3, [r7, #14]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b942:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	da0c      	bge.n	800b966 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b94c:	78fb      	ldrb	r3, [r7, #3]
 800b94e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b952:	68f9      	ldr	r1, [r7, #12]
 800b954:	1c5a      	adds	r2, r3, #1
 800b956:	4613      	mov	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	00db      	lsls	r3, r3, #3
 800b95e:	440b      	add	r3, r1
 800b960:	3302      	adds	r3, #2
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	e00b      	b.n	800b97e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b966:	78fb      	ldrb	r3, [r7, #3]
 800b968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b96c:	68f9      	ldr	r1, [r7, #12]
 800b96e:	4613      	mov	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4413      	add	r3, r2
 800b974:	00db      	lsls	r3, r3, #3
 800b976:	440b      	add	r3, r1
 800b978:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b97c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b084      	sub	sp, #16
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	460b      	mov	r3, r1
 800b994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9a4:	78fa      	ldrb	r2, [r7, #3]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7f7 fa28 	bl	8002dfe <HAL_PCD_SetAddress>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 f885 	bl	800bac4 <USBD_Get_USB_Status>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	607a      	str	r2, [r7, #4]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	72fb      	strb	r3, [r7, #11]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9ea:	893b      	ldrh	r3, [r7, #8]
 800b9ec:	7af9      	ldrb	r1, [r7, #11]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	f7f7 fb18 	bl	8003024 <HAL_PCD_EP_Transmit>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9f8:	7dfb      	ldrb	r3, [r7, #23]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 f862 	bl	800bac4 <USBD_Get_USB_Status>
 800ba00:	4603      	mov	r3, r0
 800ba02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba04:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3718      	adds	r7, #24
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b086      	sub	sp, #24
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	60f8      	str	r0, [r7, #12]
 800ba16:	607a      	str	r2, [r7, #4]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	72fb      	strb	r3, [r7, #11]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba30:	893b      	ldrh	r3, [r7, #8]
 800ba32:	7af9      	ldrb	r1, [r7, #11]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	f7f7 faac 	bl	8002f92 <HAL_PCD_EP_Receive>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 f83f 	bl	800bac4 <USBD_Get_USB_Status>
 800ba46:	4603      	mov	r3, r0
 800ba48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba66:	78fa      	ldrb	r2, [r7, #3]
 800ba68:	4611      	mov	r1, r2
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7f7 fac2 	bl	8002ff4 <HAL_PCD_EP_GetRxCount>
 800ba70:	4603      	mov	r3, r0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
	...

0800ba7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ba84:	4b03      	ldr	r3, [pc, #12]	; (800ba94 <USBD_static_malloc+0x18>)
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	2000145c 	.word	0x2000145c

0800ba98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]

}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	460b      	mov	r3, r1
 800bab6:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	4603      	mov	r3, r0
 800bacc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d817      	bhi.n	800bb08 <USBD_Get_USB_Status+0x44>
 800bad8:	a201      	add	r2, pc, #4	; (adr r2, 800bae0 <USBD_Get_USB_Status+0x1c>)
 800bada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bade:	bf00      	nop
 800bae0:	0800baf1 	.word	0x0800baf1
 800bae4:	0800baf7 	.word	0x0800baf7
 800bae8:	0800bafd 	.word	0x0800bafd
 800baec:	0800bb03 	.word	0x0800bb03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73fb      	strb	r3, [r7, #15]
    break;
 800baf4:	e00b      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800baf6:	2302      	movs	r3, #2
 800baf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bafa:	e008      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bafc:	2301      	movs	r3, #1
 800bafe:	73fb      	strb	r3, [r7, #15]
    break;
 800bb00:	e005      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb02:	2302      	movs	r3, #2
 800bb04:	73fb      	strb	r3, [r7, #15]
    break;
 800bb06:	e002      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb08:	2302      	movs	r3, #2
 800bb0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb0c:	bf00      	nop
  }
  return usb_status;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <__cvt>:
 800bb1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb20:	ec55 4b10 	vmov	r4, r5, d0
 800bb24:	2d00      	cmp	r5, #0
 800bb26:	460e      	mov	r6, r1
 800bb28:	4619      	mov	r1, r3
 800bb2a:	462b      	mov	r3, r5
 800bb2c:	bfbb      	ittet	lt
 800bb2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb32:	461d      	movlt	r5, r3
 800bb34:	2300      	movge	r3, #0
 800bb36:	232d      	movlt	r3, #45	; 0x2d
 800bb38:	700b      	strb	r3, [r1, #0]
 800bb3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb40:	4691      	mov	r9, r2
 800bb42:	f023 0820 	bic.w	r8, r3, #32
 800bb46:	bfbc      	itt	lt
 800bb48:	4622      	movlt	r2, r4
 800bb4a:	4614      	movlt	r4, r2
 800bb4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb50:	d005      	beq.n	800bb5e <__cvt+0x42>
 800bb52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb56:	d100      	bne.n	800bb5a <__cvt+0x3e>
 800bb58:	3601      	adds	r6, #1
 800bb5a:	2102      	movs	r1, #2
 800bb5c:	e000      	b.n	800bb60 <__cvt+0x44>
 800bb5e:	2103      	movs	r1, #3
 800bb60:	ab03      	add	r3, sp, #12
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	ab02      	add	r3, sp, #8
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	ec45 4b10 	vmov	d0, r4, r5
 800bb6c:	4653      	mov	r3, sl
 800bb6e:	4632      	mov	r2, r6
 800bb70:	f000 fe7e 	bl	800c870 <_dtoa_r>
 800bb74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb78:	4607      	mov	r7, r0
 800bb7a:	d102      	bne.n	800bb82 <__cvt+0x66>
 800bb7c:	f019 0f01 	tst.w	r9, #1
 800bb80:	d022      	beq.n	800bbc8 <__cvt+0xac>
 800bb82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb86:	eb07 0906 	add.w	r9, r7, r6
 800bb8a:	d110      	bne.n	800bbae <__cvt+0x92>
 800bb8c:	783b      	ldrb	r3, [r7, #0]
 800bb8e:	2b30      	cmp	r3, #48	; 0x30
 800bb90:	d10a      	bne.n	800bba8 <__cvt+0x8c>
 800bb92:	2200      	movs	r2, #0
 800bb94:	2300      	movs	r3, #0
 800bb96:	4620      	mov	r0, r4
 800bb98:	4629      	mov	r1, r5
 800bb9a:	f7f4 ff95 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb9e:	b918      	cbnz	r0, 800bba8 <__cvt+0x8c>
 800bba0:	f1c6 0601 	rsb	r6, r6, #1
 800bba4:	f8ca 6000 	str.w	r6, [sl]
 800bba8:	f8da 3000 	ldr.w	r3, [sl]
 800bbac:	4499      	add	r9, r3
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	f7f4 ff87 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbba:	b108      	cbz	r0, 800bbc0 <__cvt+0xa4>
 800bbbc:	f8cd 900c 	str.w	r9, [sp, #12]
 800bbc0:	2230      	movs	r2, #48	; 0x30
 800bbc2:	9b03      	ldr	r3, [sp, #12]
 800bbc4:	454b      	cmp	r3, r9
 800bbc6:	d307      	bcc.n	800bbd8 <__cvt+0xbc>
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbcc:	1bdb      	subs	r3, r3, r7
 800bbce:	4638      	mov	r0, r7
 800bbd0:	6013      	str	r3, [r2, #0]
 800bbd2:	b004      	add	sp, #16
 800bbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbd8:	1c59      	adds	r1, r3, #1
 800bbda:	9103      	str	r1, [sp, #12]
 800bbdc:	701a      	strb	r2, [r3, #0]
 800bbde:	e7f0      	b.n	800bbc2 <__cvt+0xa6>

0800bbe0 <__exponent>:
 800bbe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2900      	cmp	r1, #0
 800bbe6:	bfb8      	it	lt
 800bbe8:	4249      	neglt	r1, r1
 800bbea:	f803 2b02 	strb.w	r2, [r3], #2
 800bbee:	bfb4      	ite	lt
 800bbf0:	222d      	movlt	r2, #45	; 0x2d
 800bbf2:	222b      	movge	r2, #43	; 0x2b
 800bbf4:	2909      	cmp	r1, #9
 800bbf6:	7042      	strb	r2, [r0, #1]
 800bbf8:	dd2a      	ble.n	800bc50 <__exponent+0x70>
 800bbfa:	f10d 0207 	add.w	r2, sp, #7
 800bbfe:	4617      	mov	r7, r2
 800bc00:	260a      	movs	r6, #10
 800bc02:	4694      	mov	ip, r2
 800bc04:	fb91 f5f6 	sdiv	r5, r1, r6
 800bc08:	fb06 1415 	mls	r4, r6, r5, r1
 800bc0c:	3430      	adds	r4, #48	; 0x30
 800bc0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bc12:	460c      	mov	r4, r1
 800bc14:	2c63      	cmp	r4, #99	; 0x63
 800bc16:	f102 32ff 	add.w	r2, r2, #4294967295
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	dcf1      	bgt.n	800bc02 <__exponent+0x22>
 800bc1e:	3130      	adds	r1, #48	; 0x30
 800bc20:	f1ac 0402 	sub.w	r4, ip, #2
 800bc24:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bc28:	1c41      	adds	r1, r0, #1
 800bc2a:	4622      	mov	r2, r4
 800bc2c:	42ba      	cmp	r2, r7
 800bc2e:	d30a      	bcc.n	800bc46 <__exponent+0x66>
 800bc30:	f10d 0209 	add.w	r2, sp, #9
 800bc34:	eba2 020c 	sub.w	r2, r2, ip
 800bc38:	42bc      	cmp	r4, r7
 800bc3a:	bf88      	it	hi
 800bc3c:	2200      	movhi	r2, #0
 800bc3e:	4413      	add	r3, r2
 800bc40:	1a18      	subs	r0, r3, r0
 800bc42:	b003      	add	sp, #12
 800bc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc46:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bc4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bc4e:	e7ed      	b.n	800bc2c <__exponent+0x4c>
 800bc50:	2330      	movs	r3, #48	; 0x30
 800bc52:	3130      	adds	r1, #48	; 0x30
 800bc54:	7083      	strb	r3, [r0, #2]
 800bc56:	70c1      	strb	r1, [r0, #3]
 800bc58:	1d03      	adds	r3, r0, #4
 800bc5a:	e7f1      	b.n	800bc40 <__exponent+0x60>

0800bc5c <_printf_float>:
 800bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc60:	ed2d 8b02 	vpush	{d8}
 800bc64:	b08d      	sub	sp, #52	; 0x34
 800bc66:	460c      	mov	r4, r1
 800bc68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc6c:	4616      	mov	r6, r2
 800bc6e:	461f      	mov	r7, r3
 800bc70:	4605      	mov	r5, r0
 800bc72:	f000 fcfb 	bl	800c66c <_localeconv_r>
 800bc76:	f8d0 a000 	ldr.w	sl, [r0]
 800bc7a:	4650      	mov	r0, sl
 800bc7c:	f7f4 faf8 	bl	8000270 <strlen>
 800bc80:	2300      	movs	r3, #0
 800bc82:	930a      	str	r3, [sp, #40]	; 0x28
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	9305      	str	r3, [sp, #20]
 800bc88:	f8d8 3000 	ldr.w	r3, [r8]
 800bc8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bc90:	3307      	adds	r3, #7
 800bc92:	f023 0307 	bic.w	r3, r3, #7
 800bc96:	f103 0208 	add.w	r2, r3, #8
 800bc9a:	f8c8 2000 	str.w	r2, [r8]
 800bc9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bca2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bca6:	9307      	str	r3, [sp, #28]
 800bca8:	f8cd 8018 	str.w	r8, [sp, #24]
 800bcac:	ee08 0a10 	vmov	s16, r0
 800bcb0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bcb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcb8:	4b9e      	ldr	r3, [pc, #632]	; (800bf34 <_printf_float+0x2d8>)
 800bcba:	f04f 32ff 	mov.w	r2, #4294967295
 800bcbe:	f7f4 ff35 	bl	8000b2c <__aeabi_dcmpun>
 800bcc2:	bb88      	cbnz	r0, 800bd28 <_printf_float+0xcc>
 800bcc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcc8:	4b9a      	ldr	r3, [pc, #616]	; (800bf34 <_printf_float+0x2d8>)
 800bcca:	f04f 32ff 	mov.w	r2, #4294967295
 800bcce:	f7f4 ff0f 	bl	8000af0 <__aeabi_dcmple>
 800bcd2:	bb48      	cbnz	r0, 800bd28 <_printf_float+0xcc>
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	4640      	mov	r0, r8
 800bcda:	4649      	mov	r1, r9
 800bcdc:	f7f4 fefe 	bl	8000adc <__aeabi_dcmplt>
 800bce0:	b110      	cbz	r0, 800bce8 <_printf_float+0x8c>
 800bce2:	232d      	movs	r3, #45	; 0x2d
 800bce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bce8:	4a93      	ldr	r2, [pc, #588]	; (800bf38 <_printf_float+0x2dc>)
 800bcea:	4b94      	ldr	r3, [pc, #592]	; (800bf3c <_printf_float+0x2e0>)
 800bcec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bcf0:	bf94      	ite	ls
 800bcf2:	4690      	movls	r8, r2
 800bcf4:	4698      	movhi	r8, r3
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	6123      	str	r3, [r4, #16]
 800bcfa:	9b05      	ldr	r3, [sp, #20]
 800bcfc:	f023 0304 	bic.w	r3, r3, #4
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	f04f 0900 	mov.w	r9, #0
 800bd06:	9700      	str	r7, [sp, #0]
 800bd08:	4633      	mov	r3, r6
 800bd0a:	aa0b      	add	r2, sp, #44	; 0x2c
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f000 f9da 	bl	800c0c8 <_printf_common>
 800bd14:	3001      	adds	r0, #1
 800bd16:	f040 8090 	bne.w	800be3a <_printf_float+0x1de>
 800bd1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1e:	b00d      	add	sp, #52	; 0x34
 800bd20:	ecbd 8b02 	vpop	{d8}
 800bd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd28:	4642      	mov	r2, r8
 800bd2a:	464b      	mov	r3, r9
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	4649      	mov	r1, r9
 800bd30:	f7f4 fefc 	bl	8000b2c <__aeabi_dcmpun>
 800bd34:	b140      	cbz	r0, 800bd48 <_printf_float+0xec>
 800bd36:	464b      	mov	r3, r9
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	bfbc      	itt	lt
 800bd3c:	232d      	movlt	r3, #45	; 0x2d
 800bd3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd42:	4a7f      	ldr	r2, [pc, #508]	; (800bf40 <_printf_float+0x2e4>)
 800bd44:	4b7f      	ldr	r3, [pc, #508]	; (800bf44 <_printf_float+0x2e8>)
 800bd46:	e7d1      	b.n	800bcec <_printf_float+0x90>
 800bd48:	6863      	ldr	r3, [r4, #4]
 800bd4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd4e:	9206      	str	r2, [sp, #24]
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	d13f      	bne.n	800bdd4 <_printf_float+0x178>
 800bd54:	2306      	movs	r3, #6
 800bd56:	6063      	str	r3, [r4, #4]
 800bd58:	9b05      	ldr	r3, [sp, #20]
 800bd5a:	6861      	ldr	r1, [r4, #4]
 800bd5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd60:	2300      	movs	r3, #0
 800bd62:	9303      	str	r3, [sp, #12]
 800bd64:	ab0a      	add	r3, sp, #40	; 0x28
 800bd66:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd6a:	ab09      	add	r3, sp, #36	; 0x24
 800bd6c:	ec49 8b10 	vmov	d0, r8, r9
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	6022      	str	r2, [r4, #0]
 800bd74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f7ff fecf 	bl	800bb1c <__cvt>
 800bd7e:	9b06      	ldr	r3, [sp, #24]
 800bd80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd82:	2b47      	cmp	r3, #71	; 0x47
 800bd84:	4680      	mov	r8, r0
 800bd86:	d108      	bne.n	800bd9a <_printf_float+0x13e>
 800bd88:	1cc8      	adds	r0, r1, #3
 800bd8a:	db02      	blt.n	800bd92 <_printf_float+0x136>
 800bd8c:	6863      	ldr	r3, [r4, #4]
 800bd8e:	4299      	cmp	r1, r3
 800bd90:	dd41      	ble.n	800be16 <_printf_float+0x1ba>
 800bd92:	f1ab 0302 	sub.w	r3, fp, #2
 800bd96:	fa5f fb83 	uxtb.w	fp, r3
 800bd9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd9e:	d820      	bhi.n	800bde2 <_printf_float+0x186>
 800bda0:	3901      	subs	r1, #1
 800bda2:	465a      	mov	r2, fp
 800bda4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bda8:	9109      	str	r1, [sp, #36]	; 0x24
 800bdaa:	f7ff ff19 	bl	800bbe0 <__exponent>
 800bdae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdb0:	1813      	adds	r3, r2, r0
 800bdb2:	2a01      	cmp	r2, #1
 800bdb4:	4681      	mov	r9, r0
 800bdb6:	6123      	str	r3, [r4, #16]
 800bdb8:	dc02      	bgt.n	800bdc0 <_printf_float+0x164>
 800bdba:	6822      	ldr	r2, [r4, #0]
 800bdbc:	07d2      	lsls	r2, r2, #31
 800bdbe:	d501      	bpl.n	800bdc4 <_printf_float+0x168>
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	6123      	str	r3, [r4, #16]
 800bdc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d09c      	beq.n	800bd06 <_printf_float+0xaa>
 800bdcc:	232d      	movs	r3, #45	; 0x2d
 800bdce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdd2:	e798      	b.n	800bd06 <_printf_float+0xaa>
 800bdd4:	9a06      	ldr	r2, [sp, #24]
 800bdd6:	2a47      	cmp	r2, #71	; 0x47
 800bdd8:	d1be      	bne.n	800bd58 <_printf_float+0xfc>
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1bc      	bne.n	800bd58 <_printf_float+0xfc>
 800bdde:	2301      	movs	r3, #1
 800bde0:	e7b9      	b.n	800bd56 <_printf_float+0xfa>
 800bde2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bde6:	d118      	bne.n	800be1a <_printf_float+0x1be>
 800bde8:	2900      	cmp	r1, #0
 800bdea:	6863      	ldr	r3, [r4, #4]
 800bdec:	dd0b      	ble.n	800be06 <_printf_float+0x1aa>
 800bdee:	6121      	str	r1, [r4, #16]
 800bdf0:	b913      	cbnz	r3, 800bdf8 <_printf_float+0x19c>
 800bdf2:	6822      	ldr	r2, [r4, #0]
 800bdf4:	07d0      	lsls	r0, r2, #31
 800bdf6:	d502      	bpl.n	800bdfe <_printf_float+0x1a2>
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	440b      	add	r3, r1
 800bdfc:	6123      	str	r3, [r4, #16]
 800bdfe:	65a1      	str	r1, [r4, #88]	; 0x58
 800be00:	f04f 0900 	mov.w	r9, #0
 800be04:	e7de      	b.n	800bdc4 <_printf_float+0x168>
 800be06:	b913      	cbnz	r3, 800be0e <_printf_float+0x1b2>
 800be08:	6822      	ldr	r2, [r4, #0]
 800be0a:	07d2      	lsls	r2, r2, #31
 800be0c:	d501      	bpl.n	800be12 <_printf_float+0x1b6>
 800be0e:	3302      	adds	r3, #2
 800be10:	e7f4      	b.n	800bdfc <_printf_float+0x1a0>
 800be12:	2301      	movs	r3, #1
 800be14:	e7f2      	b.n	800bdfc <_printf_float+0x1a0>
 800be16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800be1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be1c:	4299      	cmp	r1, r3
 800be1e:	db05      	blt.n	800be2c <_printf_float+0x1d0>
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	6121      	str	r1, [r4, #16]
 800be24:	07d8      	lsls	r0, r3, #31
 800be26:	d5ea      	bpl.n	800bdfe <_printf_float+0x1a2>
 800be28:	1c4b      	adds	r3, r1, #1
 800be2a:	e7e7      	b.n	800bdfc <_printf_float+0x1a0>
 800be2c:	2900      	cmp	r1, #0
 800be2e:	bfd4      	ite	le
 800be30:	f1c1 0202 	rsble	r2, r1, #2
 800be34:	2201      	movgt	r2, #1
 800be36:	4413      	add	r3, r2
 800be38:	e7e0      	b.n	800bdfc <_printf_float+0x1a0>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	055a      	lsls	r2, r3, #21
 800be3e:	d407      	bmi.n	800be50 <_printf_float+0x1f4>
 800be40:	6923      	ldr	r3, [r4, #16]
 800be42:	4642      	mov	r2, r8
 800be44:	4631      	mov	r1, r6
 800be46:	4628      	mov	r0, r5
 800be48:	47b8      	blx	r7
 800be4a:	3001      	adds	r0, #1
 800be4c:	d12c      	bne.n	800bea8 <_printf_float+0x24c>
 800be4e:	e764      	b.n	800bd1a <_printf_float+0xbe>
 800be50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be54:	f240 80e0 	bls.w	800c018 <_printf_float+0x3bc>
 800be58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be5c:	2200      	movs	r2, #0
 800be5e:	2300      	movs	r3, #0
 800be60:	f7f4 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 800be64:	2800      	cmp	r0, #0
 800be66:	d034      	beq.n	800bed2 <_printf_float+0x276>
 800be68:	4a37      	ldr	r2, [pc, #220]	; (800bf48 <_printf_float+0x2ec>)
 800be6a:	2301      	movs	r3, #1
 800be6c:	4631      	mov	r1, r6
 800be6e:	4628      	mov	r0, r5
 800be70:	47b8      	blx	r7
 800be72:	3001      	adds	r0, #1
 800be74:	f43f af51 	beq.w	800bd1a <_printf_float+0xbe>
 800be78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be7c:	429a      	cmp	r2, r3
 800be7e:	db02      	blt.n	800be86 <_printf_float+0x22a>
 800be80:	6823      	ldr	r3, [r4, #0]
 800be82:	07d8      	lsls	r0, r3, #31
 800be84:	d510      	bpl.n	800bea8 <_printf_float+0x24c>
 800be86:	ee18 3a10 	vmov	r3, s16
 800be8a:	4652      	mov	r2, sl
 800be8c:	4631      	mov	r1, r6
 800be8e:	4628      	mov	r0, r5
 800be90:	47b8      	blx	r7
 800be92:	3001      	adds	r0, #1
 800be94:	f43f af41 	beq.w	800bd1a <_printf_float+0xbe>
 800be98:	f04f 0800 	mov.w	r8, #0
 800be9c:	f104 091a 	add.w	r9, r4, #26
 800bea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bea2:	3b01      	subs	r3, #1
 800bea4:	4543      	cmp	r3, r8
 800bea6:	dc09      	bgt.n	800bebc <_printf_float+0x260>
 800bea8:	6823      	ldr	r3, [r4, #0]
 800beaa:	079b      	lsls	r3, r3, #30
 800beac:	f100 8107 	bmi.w	800c0be <_printf_float+0x462>
 800beb0:	68e0      	ldr	r0, [r4, #12]
 800beb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beb4:	4298      	cmp	r0, r3
 800beb6:	bfb8      	it	lt
 800beb8:	4618      	movlt	r0, r3
 800beba:	e730      	b.n	800bd1e <_printf_float+0xc2>
 800bebc:	2301      	movs	r3, #1
 800bebe:	464a      	mov	r2, r9
 800bec0:	4631      	mov	r1, r6
 800bec2:	4628      	mov	r0, r5
 800bec4:	47b8      	blx	r7
 800bec6:	3001      	adds	r0, #1
 800bec8:	f43f af27 	beq.w	800bd1a <_printf_float+0xbe>
 800becc:	f108 0801 	add.w	r8, r8, #1
 800bed0:	e7e6      	b.n	800bea0 <_printf_float+0x244>
 800bed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	dc39      	bgt.n	800bf4c <_printf_float+0x2f0>
 800bed8:	4a1b      	ldr	r2, [pc, #108]	; (800bf48 <_printf_float+0x2ec>)
 800beda:	2301      	movs	r3, #1
 800bedc:	4631      	mov	r1, r6
 800bede:	4628      	mov	r0, r5
 800bee0:	47b8      	blx	r7
 800bee2:	3001      	adds	r0, #1
 800bee4:	f43f af19 	beq.w	800bd1a <_printf_float+0xbe>
 800bee8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800beec:	4313      	orrs	r3, r2
 800beee:	d102      	bne.n	800bef6 <_printf_float+0x29a>
 800bef0:	6823      	ldr	r3, [r4, #0]
 800bef2:	07d9      	lsls	r1, r3, #31
 800bef4:	d5d8      	bpl.n	800bea8 <_printf_float+0x24c>
 800bef6:	ee18 3a10 	vmov	r3, s16
 800befa:	4652      	mov	r2, sl
 800befc:	4631      	mov	r1, r6
 800befe:	4628      	mov	r0, r5
 800bf00:	47b8      	blx	r7
 800bf02:	3001      	adds	r0, #1
 800bf04:	f43f af09 	beq.w	800bd1a <_printf_float+0xbe>
 800bf08:	f04f 0900 	mov.w	r9, #0
 800bf0c:	f104 0a1a 	add.w	sl, r4, #26
 800bf10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf12:	425b      	negs	r3, r3
 800bf14:	454b      	cmp	r3, r9
 800bf16:	dc01      	bgt.n	800bf1c <_printf_float+0x2c0>
 800bf18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf1a:	e792      	b.n	800be42 <_printf_float+0x1e6>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	4652      	mov	r2, sl
 800bf20:	4631      	mov	r1, r6
 800bf22:	4628      	mov	r0, r5
 800bf24:	47b8      	blx	r7
 800bf26:	3001      	adds	r0, #1
 800bf28:	f43f aef7 	beq.w	800bd1a <_printf_float+0xbe>
 800bf2c:	f109 0901 	add.w	r9, r9, #1
 800bf30:	e7ee      	b.n	800bf10 <_printf_float+0x2b4>
 800bf32:	bf00      	nop
 800bf34:	7fefffff 	.word	0x7fefffff
 800bf38:	0800e930 	.word	0x0800e930
 800bf3c:	0800e934 	.word	0x0800e934
 800bf40:	0800e938 	.word	0x0800e938
 800bf44:	0800e93c 	.word	0x0800e93c
 800bf48:	0800e940 	.word	0x0800e940
 800bf4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf50:	429a      	cmp	r2, r3
 800bf52:	bfa8      	it	ge
 800bf54:	461a      	movge	r2, r3
 800bf56:	2a00      	cmp	r2, #0
 800bf58:	4691      	mov	r9, r2
 800bf5a:	dc37      	bgt.n	800bfcc <_printf_float+0x370>
 800bf5c:	f04f 0b00 	mov.w	fp, #0
 800bf60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf64:	f104 021a 	add.w	r2, r4, #26
 800bf68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf6a:	9305      	str	r3, [sp, #20]
 800bf6c:	eba3 0309 	sub.w	r3, r3, r9
 800bf70:	455b      	cmp	r3, fp
 800bf72:	dc33      	bgt.n	800bfdc <_printf_float+0x380>
 800bf74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	db3b      	blt.n	800bff4 <_printf_float+0x398>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	07da      	lsls	r2, r3, #31
 800bf80:	d438      	bmi.n	800bff4 <_printf_float+0x398>
 800bf82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bf86:	eba2 0903 	sub.w	r9, r2, r3
 800bf8a:	9b05      	ldr	r3, [sp, #20]
 800bf8c:	1ad2      	subs	r2, r2, r3
 800bf8e:	4591      	cmp	r9, r2
 800bf90:	bfa8      	it	ge
 800bf92:	4691      	movge	r9, r2
 800bf94:	f1b9 0f00 	cmp.w	r9, #0
 800bf98:	dc35      	bgt.n	800c006 <_printf_float+0x3aa>
 800bf9a:	f04f 0800 	mov.w	r8, #0
 800bf9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfa2:	f104 0a1a 	add.w	sl, r4, #26
 800bfa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfaa:	1a9b      	subs	r3, r3, r2
 800bfac:	eba3 0309 	sub.w	r3, r3, r9
 800bfb0:	4543      	cmp	r3, r8
 800bfb2:	f77f af79 	ble.w	800bea8 <_printf_float+0x24c>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	4652      	mov	r2, sl
 800bfba:	4631      	mov	r1, r6
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	47b8      	blx	r7
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	f43f aeaa 	beq.w	800bd1a <_printf_float+0xbe>
 800bfc6:	f108 0801 	add.w	r8, r8, #1
 800bfca:	e7ec      	b.n	800bfa6 <_printf_float+0x34a>
 800bfcc:	4613      	mov	r3, r2
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4642      	mov	r2, r8
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	47b8      	blx	r7
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	d1c0      	bne.n	800bf5c <_printf_float+0x300>
 800bfda:	e69e      	b.n	800bd1a <_printf_float+0xbe>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	9205      	str	r2, [sp, #20]
 800bfe4:	47b8      	blx	r7
 800bfe6:	3001      	adds	r0, #1
 800bfe8:	f43f ae97 	beq.w	800bd1a <_printf_float+0xbe>
 800bfec:	9a05      	ldr	r2, [sp, #20]
 800bfee:	f10b 0b01 	add.w	fp, fp, #1
 800bff2:	e7b9      	b.n	800bf68 <_printf_float+0x30c>
 800bff4:	ee18 3a10 	vmov	r3, s16
 800bff8:	4652      	mov	r2, sl
 800bffa:	4631      	mov	r1, r6
 800bffc:	4628      	mov	r0, r5
 800bffe:	47b8      	blx	r7
 800c000:	3001      	adds	r0, #1
 800c002:	d1be      	bne.n	800bf82 <_printf_float+0x326>
 800c004:	e689      	b.n	800bd1a <_printf_float+0xbe>
 800c006:	9a05      	ldr	r2, [sp, #20]
 800c008:	464b      	mov	r3, r9
 800c00a:	4442      	add	r2, r8
 800c00c:	4631      	mov	r1, r6
 800c00e:	4628      	mov	r0, r5
 800c010:	47b8      	blx	r7
 800c012:	3001      	adds	r0, #1
 800c014:	d1c1      	bne.n	800bf9a <_printf_float+0x33e>
 800c016:	e680      	b.n	800bd1a <_printf_float+0xbe>
 800c018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c01a:	2a01      	cmp	r2, #1
 800c01c:	dc01      	bgt.n	800c022 <_printf_float+0x3c6>
 800c01e:	07db      	lsls	r3, r3, #31
 800c020:	d53a      	bpl.n	800c098 <_printf_float+0x43c>
 800c022:	2301      	movs	r3, #1
 800c024:	4642      	mov	r2, r8
 800c026:	4631      	mov	r1, r6
 800c028:	4628      	mov	r0, r5
 800c02a:	47b8      	blx	r7
 800c02c:	3001      	adds	r0, #1
 800c02e:	f43f ae74 	beq.w	800bd1a <_printf_float+0xbe>
 800c032:	ee18 3a10 	vmov	r3, s16
 800c036:	4652      	mov	r2, sl
 800c038:	4631      	mov	r1, r6
 800c03a:	4628      	mov	r0, r5
 800c03c:	47b8      	blx	r7
 800c03e:	3001      	adds	r0, #1
 800c040:	f43f ae6b 	beq.w	800bd1a <_printf_float+0xbe>
 800c044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c048:	2200      	movs	r2, #0
 800c04a:	2300      	movs	r3, #0
 800c04c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c050:	f7f4 fd3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c054:	b9d8      	cbnz	r0, 800c08e <_printf_float+0x432>
 800c056:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c05a:	f108 0201 	add.w	r2, r8, #1
 800c05e:	4631      	mov	r1, r6
 800c060:	4628      	mov	r0, r5
 800c062:	47b8      	blx	r7
 800c064:	3001      	adds	r0, #1
 800c066:	d10e      	bne.n	800c086 <_printf_float+0x42a>
 800c068:	e657      	b.n	800bd1a <_printf_float+0xbe>
 800c06a:	2301      	movs	r3, #1
 800c06c:	4652      	mov	r2, sl
 800c06e:	4631      	mov	r1, r6
 800c070:	4628      	mov	r0, r5
 800c072:	47b8      	blx	r7
 800c074:	3001      	adds	r0, #1
 800c076:	f43f ae50 	beq.w	800bd1a <_printf_float+0xbe>
 800c07a:	f108 0801 	add.w	r8, r8, #1
 800c07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c080:	3b01      	subs	r3, #1
 800c082:	4543      	cmp	r3, r8
 800c084:	dcf1      	bgt.n	800c06a <_printf_float+0x40e>
 800c086:	464b      	mov	r3, r9
 800c088:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c08c:	e6da      	b.n	800be44 <_printf_float+0x1e8>
 800c08e:	f04f 0800 	mov.w	r8, #0
 800c092:	f104 0a1a 	add.w	sl, r4, #26
 800c096:	e7f2      	b.n	800c07e <_printf_float+0x422>
 800c098:	2301      	movs	r3, #1
 800c09a:	4642      	mov	r2, r8
 800c09c:	e7df      	b.n	800c05e <_printf_float+0x402>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	464a      	mov	r2, r9
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	47b8      	blx	r7
 800c0a8:	3001      	adds	r0, #1
 800c0aa:	f43f ae36 	beq.w	800bd1a <_printf_float+0xbe>
 800c0ae:	f108 0801 	add.w	r8, r8, #1
 800c0b2:	68e3      	ldr	r3, [r4, #12]
 800c0b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c0b6:	1a5b      	subs	r3, r3, r1
 800c0b8:	4543      	cmp	r3, r8
 800c0ba:	dcf0      	bgt.n	800c09e <_printf_float+0x442>
 800c0bc:	e6f8      	b.n	800beb0 <_printf_float+0x254>
 800c0be:	f04f 0800 	mov.w	r8, #0
 800c0c2:	f104 0919 	add.w	r9, r4, #25
 800c0c6:	e7f4      	b.n	800c0b2 <_printf_float+0x456>

0800c0c8 <_printf_common>:
 800c0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0cc:	4616      	mov	r6, r2
 800c0ce:	4699      	mov	r9, r3
 800c0d0:	688a      	ldr	r2, [r1, #8]
 800c0d2:	690b      	ldr	r3, [r1, #16]
 800c0d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	bfb8      	it	lt
 800c0dc:	4613      	movlt	r3, r2
 800c0de:	6033      	str	r3, [r6, #0]
 800c0e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	b10a      	cbz	r2, 800c0ee <_printf_common+0x26>
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	6033      	str	r3, [r6, #0]
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	0699      	lsls	r1, r3, #26
 800c0f2:	bf42      	ittt	mi
 800c0f4:	6833      	ldrmi	r3, [r6, #0]
 800c0f6:	3302      	addmi	r3, #2
 800c0f8:	6033      	strmi	r3, [r6, #0]
 800c0fa:	6825      	ldr	r5, [r4, #0]
 800c0fc:	f015 0506 	ands.w	r5, r5, #6
 800c100:	d106      	bne.n	800c110 <_printf_common+0x48>
 800c102:	f104 0a19 	add.w	sl, r4, #25
 800c106:	68e3      	ldr	r3, [r4, #12]
 800c108:	6832      	ldr	r2, [r6, #0]
 800c10a:	1a9b      	subs	r3, r3, r2
 800c10c:	42ab      	cmp	r3, r5
 800c10e:	dc26      	bgt.n	800c15e <_printf_common+0x96>
 800c110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c114:	1e13      	subs	r3, r2, #0
 800c116:	6822      	ldr	r2, [r4, #0]
 800c118:	bf18      	it	ne
 800c11a:	2301      	movne	r3, #1
 800c11c:	0692      	lsls	r2, r2, #26
 800c11e:	d42b      	bmi.n	800c178 <_printf_common+0xb0>
 800c120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c124:	4649      	mov	r1, r9
 800c126:	4638      	mov	r0, r7
 800c128:	47c0      	blx	r8
 800c12a:	3001      	adds	r0, #1
 800c12c:	d01e      	beq.n	800c16c <_printf_common+0xa4>
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	6922      	ldr	r2, [r4, #16]
 800c132:	f003 0306 	and.w	r3, r3, #6
 800c136:	2b04      	cmp	r3, #4
 800c138:	bf02      	ittt	eq
 800c13a:	68e5      	ldreq	r5, [r4, #12]
 800c13c:	6833      	ldreq	r3, [r6, #0]
 800c13e:	1aed      	subeq	r5, r5, r3
 800c140:	68a3      	ldr	r3, [r4, #8]
 800c142:	bf0c      	ite	eq
 800c144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c148:	2500      	movne	r5, #0
 800c14a:	4293      	cmp	r3, r2
 800c14c:	bfc4      	itt	gt
 800c14e:	1a9b      	subgt	r3, r3, r2
 800c150:	18ed      	addgt	r5, r5, r3
 800c152:	2600      	movs	r6, #0
 800c154:	341a      	adds	r4, #26
 800c156:	42b5      	cmp	r5, r6
 800c158:	d11a      	bne.n	800c190 <_printf_common+0xc8>
 800c15a:	2000      	movs	r0, #0
 800c15c:	e008      	b.n	800c170 <_printf_common+0xa8>
 800c15e:	2301      	movs	r3, #1
 800c160:	4652      	mov	r2, sl
 800c162:	4649      	mov	r1, r9
 800c164:	4638      	mov	r0, r7
 800c166:	47c0      	blx	r8
 800c168:	3001      	adds	r0, #1
 800c16a:	d103      	bne.n	800c174 <_printf_common+0xac>
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c174:	3501      	adds	r5, #1
 800c176:	e7c6      	b.n	800c106 <_printf_common+0x3e>
 800c178:	18e1      	adds	r1, r4, r3
 800c17a:	1c5a      	adds	r2, r3, #1
 800c17c:	2030      	movs	r0, #48	; 0x30
 800c17e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c182:	4422      	add	r2, r4
 800c184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c18c:	3302      	adds	r3, #2
 800c18e:	e7c7      	b.n	800c120 <_printf_common+0x58>
 800c190:	2301      	movs	r3, #1
 800c192:	4622      	mov	r2, r4
 800c194:	4649      	mov	r1, r9
 800c196:	4638      	mov	r0, r7
 800c198:	47c0      	blx	r8
 800c19a:	3001      	adds	r0, #1
 800c19c:	d0e6      	beq.n	800c16c <_printf_common+0xa4>
 800c19e:	3601      	adds	r6, #1
 800c1a0:	e7d9      	b.n	800c156 <_printf_common+0x8e>
	...

0800c1a4 <_printf_i>:
 800c1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a8:	7e0f      	ldrb	r7, [r1, #24]
 800c1aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1ac:	2f78      	cmp	r7, #120	; 0x78
 800c1ae:	4691      	mov	r9, r2
 800c1b0:	4680      	mov	r8, r0
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	469a      	mov	sl, r3
 800c1b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c1ba:	d807      	bhi.n	800c1cc <_printf_i+0x28>
 800c1bc:	2f62      	cmp	r7, #98	; 0x62
 800c1be:	d80a      	bhi.n	800c1d6 <_printf_i+0x32>
 800c1c0:	2f00      	cmp	r7, #0
 800c1c2:	f000 80d4 	beq.w	800c36e <_printf_i+0x1ca>
 800c1c6:	2f58      	cmp	r7, #88	; 0x58
 800c1c8:	f000 80c0 	beq.w	800c34c <_printf_i+0x1a8>
 800c1cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1d4:	e03a      	b.n	800c24c <_printf_i+0xa8>
 800c1d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1da:	2b15      	cmp	r3, #21
 800c1dc:	d8f6      	bhi.n	800c1cc <_printf_i+0x28>
 800c1de:	a101      	add	r1, pc, #4	; (adr r1, 800c1e4 <_printf_i+0x40>)
 800c1e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1e4:	0800c23d 	.word	0x0800c23d
 800c1e8:	0800c251 	.word	0x0800c251
 800c1ec:	0800c1cd 	.word	0x0800c1cd
 800c1f0:	0800c1cd 	.word	0x0800c1cd
 800c1f4:	0800c1cd 	.word	0x0800c1cd
 800c1f8:	0800c1cd 	.word	0x0800c1cd
 800c1fc:	0800c251 	.word	0x0800c251
 800c200:	0800c1cd 	.word	0x0800c1cd
 800c204:	0800c1cd 	.word	0x0800c1cd
 800c208:	0800c1cd 	.word	0x0800c1cd
 800c20c:	0800c1cd 	.word	0x0800c1cd
 800c210:	0800c355 	.word	0x0800c355
 800c214:	0800c27d 	.word	0x0800c27d
 800c218:	0800c30f 	.word	0x0800c30f
 800c21c:	0800c1cd 	.word	0x0800c1cd
 800c220:	0800c1cd 	.word	0x0800c1cd
 800c224:	0800c377 	.word	0x0800c377
 800c228:	0800c1cd 	.word	0x0800c1cd
 800c22c:	0800c27d 	.word	0x0800c27d
 800c230:	0800c1cd 	.word	0x0800c1cd
 800c234:	0800c1cd 	.word	0x0800c1cd
 800c238:	0800c317 	.word	0x0800c317
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	1d1a      	adds	r2, r3, #4
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	602a      	str	r2, [r5, #0]
 800c244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c24c:	2301      	movs	r3, #1
 800c24e:	e09f      	b.n	800c390 <_printf_i+0x1ec>
 800c250:	6820      	ldr	r0, [r4, #0]
 800c252:	682b      	ldr	r3, [r5, #0]
 800c254:	0607      	lsls	r7, r0, #24
 800c256:	f103 0104 	add.w	r1, r3, #4
 800c25a:	6029      	str	r1, [r5, #0]
 800c25c:	d501      	bpl.n	800c262 <_printf_i+0xbe>
 800c25e:	681e      	ldr	r6, [r3, #0]
 800c260:	e003      	b.n	800c26a <_printf_i+0xc6>
 800c262:	0646      	lsls	r6, r0, #25
 800c264:	d5fb      	bpl.n	800c25e <_printf_i+0xba>
 800c266:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c26a:	2e00      	cmp	r6, #0
 800c26c:	da03      	bge.n	800c276 <_printf_i+0xd2>
 800c26e:	232d      	movs	r3, #45	; 0x2d
 800c270:	4276      	negs	r6, r6
 800c272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c276:	485a      	ldr	r0, [pc, #360]	; (800c3e0 <_printf_i+0x23c>)
 800c278:	230a      	movs	r3, #10
 800c27a:	e012      	b.n	800c2a2 <_printf_i+0xfe>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	6820      	ldr	r0, [r4, #0]
 800c280:	1d19      	adds	r1, r3, #4
 800c282:	6029      	str	r1, [r5, #0]
 800c284:	0605      	lsls	r5, r0, #24
 800c286:	d501      	bpl.n	800c28c <_printf_i+0xe8>
 800c288:	681e      	ldr	r6, [r3, #0]
 800c28a:	e002      	b.n	800c292 <_printf_i+0xee>
 800c28c:	0641      	lsls	r1, r0, #25
 800c28e:	d5fb      	bpl.n	800c288 <_printf_i+0xe4>
 800c290:	881e      	ldrh	r6, [r3, #0]
 800c292:	4853      	ldr	r0, [pc, #332]	; (800c3e0 <_printf_i+0x23c>)
 800c294:	2f6f      	cmp	r7, #111	; 0x6f
 800c296:	bf0c      	ite	eq
 800c298:	2308      	moveq	r3, #8
 800c29a:	230a      	movne	r3, #10
 800c29c:	2100      	movs	r1, #0
 800c29e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2a2:	6865      	ldr	r5, [r4, #4]
 800c2a4:	60a5      	str	r5, [r4, #8]
 800c2a6:	2d00      	cmp	r5, #0
 800c2a8:	bfa2      	ittt	ge
 800c2aa:	6821      	ldrge	r1, [r4, #0]
 800c2ac:	f021 0104 	bicge.w	r1, r1, #4
 800c2b0:	6021      	strge	r1, [r4, #0]
 800c2b2:	b90e      	cbnz	r6, 800c2b8 <_printf_i+0x114>
 800c2b4:	2d00      	cmp	r5, #0
 800c2b6:	d04b      	beq.n	800c350 <_printf_i+0x1ac>
 800c2b8:	4615      	mov	r5, r2
 800c2ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800c2be:	fb03 6711 	mls	r7, r3, r1, r6
 800c2c2:	5dc7      	ldrb	r7, [r0, r7]
 800c2c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2c8:	4637      	mov	r7, r6
 800c2ca:	42bb      	cmp	r3, r7
 800c2cc:	460e      	mov	r6, r1
 800c2ce:	d9f4      	bls.n	800c2ba <_printf_i+0x116>
 800c2d0:	2b08      	cmp	r3, #8
 800c2d2:	d10b      	bne.n	800c2ec <_printf_i+0x148>
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	07de      	lsls	r6, r3, #31
 800c2d8:	d508      	bpl.n	800c2ec <_printf_i+0x148>
 800c2da:	6923      	ldr	r3, [r4, #16]
 800c2dc:	6861      	ldr	r1, [r4, #4]
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	bfde      	ittt	le
 800c2e2:	2330      	movle	r3, #48	; 0x30
 800c2e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2ec:	1b52      	subs	r2, r2, r5
 800c2ee:	6122      	str	r2, [r4, #16]
 800c2f0:	f8cd a000 	str.w	sl, [sp]
 800c2f4:	464b      	mov	r3, r9
 800c2f6:	aa03      	add	r2, sp, #12
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	f7ff fee4 	bl	800c0c8 <_printf_common>
 800c300:	3001      	adds	r0, #1
 800c302:	d14a      	bne.n	800c39a <_printf_i+0x1f6>
 800c304:	f04f 30ff 	mov.w	r0, #4294967295
 800c308:	b004      	add	sp, #16
 800c30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	f043 0320 	orr.w	r3, r3, #32
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	4833      	ldr	r0, [pc, #204]	; (800c3e4 <_printf_i+0x240>)
 800c318:	2778      	movs	r7, #120	; 0x78
 800c31a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c31e:	6823      	ldr	r3, [r4, #0]
 800c320:	6829      	ldr	r1, [r5, #0]
 800c322:	061f      	lsls	r7, r3, #24
 800c324:	f851 6b04 	ldr.w	r6, [r1], #4
 800c328:	d402      	bmi.n	800c330 <_printf_i+0x18c>
 800c32a:	065f      	lsls	r7, r3, #25
 800c32c:	bf48      	it	mi
 800c32e:	b2b6      	uxthmi	r6, r6
 800c330:	07df      	lsls	r7, r3, #31
 800c332:	bf48      	it	mi
 800c334:	f043 0320 	orrmi.w	r3, r3, #32
 800c338:	6029      	str	r1, [r5, #0]
 800c33a:	bf48      	it	mi
 800c33c:	6023      	strmi	r3, [r4, #0]
 800c33e:	b91e      	cbnz	r6, 800c348 <_printf_i+0x1a4>
 800c340:	6823      	ldr	r3, [r4, #0]
 800c342:	f023 0320 	bic.w	r3, r3, #32
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	2310      	movs	r3, #16
 800c34a:	e7a7      	b.n	800c29c <_printf_i+0xf8>
 800c34c:	4824      	ldr	r0, [pc, #144]	; (800c3e0 <_printf_i+0x23c>)
 800c34e:	e7e4      	b.n	800c31a <_printf_i+0x176>
 800c350:	4615      	mov	r5, r2
 800c352:	e7bd      	b.n	800c2d0 <_printf_i+0x12c>
 800c354:	682b      	ldr	r3, [r5, #0]
 800c356:	6826      	ldr	r6, [r4, #0]
 800c358:	6961      	ldr	r1, [r4, #20]
 800c35a:	1d18      	adds	r0, r3, #4
 800c35c:	6028      	str	r0, [r5, #0]
 800c35e:	0635      	lsls	r5, r6, #24
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	d501      	bpl.n	800c368 <_printf_i+0x1c4>
 800c364:	6019      	str	r1, [r3, #0]
 800c366:	e002      	b.n	800c36e <_printf_i+0x1ca>
 800c368:	0670      	lsls	r0, r6, #25
 800c36a:	d5fb      	bpl.n	800c364 <_printf_i+0x1c0>
 800c36c:	8019      	strh	r1, [r3, #0]
 800c36e:	2300      	movs	r3, #0
 800c370:	6123      	str	r3, [r4, #16]
 800c372:	4615      	mov	r5, r2
 800c374:	e7bc      	b.n	800c2f0 <_printf_i+0x14c>
 800c376:	682b      	ldr	r3, [r5, #0]
 800c378:	1d1a      	adds	r2, r3, #4
 800c37a:	602a      	str	r2, [r5, #0]
 800c37c:	681d      	ldr	r5, [r3, #0]
 800c37e:	6862      	ldr	r2, [r4, #4]
 800c380:	2100      	movs	r1, #0
 800c382:	4628      	mov	r0, r5
 800c384:	f7f3 ff24 	bl	80001d0 <memchr>
 800c388:	b108      	cbz	r0, 800c38e <_printf_i+0x1ea>
 800c38a:	1b40      	subs	r0, r0, r5
 800c38c:	6060      	str	r0, [r4, #4]
 800c38e:	6863      	ldr	r3, [r4, #4]
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	2300      	movs	r3, #0
 800c394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c398:	e7aa      	b.n	800c2f0 <_printf_i+0x14c>
 800c39a:	6923      	ldr	r3, [r4, #16]
 800c39c:	462a      	mov	r2, r5
 800c39e:	4649      	mov	r1, r9
 800c3a0:	4640      	mov	r0, r8
 800c3a2:	47d0      	blx	sl
 800c3a4:	3001      	adds	r0, #1
 800c3a6:	d0ad      	beq.n	800c304 <_printf_i+0x160>
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	079b      	lsls	r3, r3, #30
 800c3ac:	d413      	bmi.n	800c3d6 <_printf_i+0x232>
 800c3ae:	68e0      	ldr	r0, [r4, #12]
 800c3b0:	9b03      	ldr	r3, [sp, #12]
 800c3b2:	4298      	cmp	r0, r3
 800c3b4:	bfb8      	it	lt
 800c3b6:	4618      	movlt	r0, r3
 800c3b8:	e7a6      	b.n	800c308 <_printf_i+0x164>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	4632      	mov	r2, r6
 800c3be:	4649      	mov	r1, r9
 800c3c0:	4640      	mov	r0, r8
 800c3c2:	47d0      	blx	sl
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	d09d      	beq.n	800c304 <_printf_i+0x160>
 800c3c8:	3501      	adds	r5, #1
 800c3ca:	68e3      	ldr	r3, [r4, #12]
 800c3cc:	9903      	ldr	r1, [sp, #12]
 800c3ce:	1a5b      	subs	r3, r3, r1
 800c3d0:	42ab      	cmp	r3, r5
 800c3d2:	dcf2      	bgt.n	800c3ba <_printf_i+0x216>
 800c3d4:	e7eb      	b.n	800c3ae <_printf_i+0x20a>
 800c3d6:	2500      	movs	r5, #0
 800c3d8:	f104 0619 	add.w	r6, r4, #25
 800c3dc:	e7f5      	b.n	800c3ca <_printf_i+0x226>
 800c3de:	bf00      	nop
 800c3e0:	0800e942 	.word	0x0800e942
 800c3e4:	0800e953 	.word	0x0800e953

0800c3e8 <std>:
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	b510      	push	{r4, lr}
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c3f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3f6:	6083      	str	r3, [r0, #8]
 800c3f8:	8181      	strh	r1, [r0, #12]
 800c3fa:	6643      	str	r3, [r0, #100]	; 0x64
 800c3fc:	81c2      	strh	r2, [r0, #14]
 800c3fe:	6183      	str	r3, [r0, #24]
 800c400:	4619      	mov	r1, r3
 800c402:	2208      	movs	r2, #8
 800c404:	305c      	adds	r0, #92	; 0x5c
 800c406:	f000 f928 	bl	800c65a <memset>
 800c40a:	4b0d      	ldr	r3, [pc, #52]	; (800c440 <std+0x58>)
 800c40c:	6263      	str	r3, [r4, #36]	; 0x24
 800c40e:	4b0d      	ldr	r3, [pc, #52]	; (800c444 <std+0x5c>)
 800c410:	62a3      	str	r3, [r4, #40]	; 0x28
 800c412:	4b0d      	ldr	r3, [pc, #52]	; (800c448 <std+0x60>)
 800c414:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c416:	4b0d      	ldr	r3, [pc, #52]	; (800c44c <std+0x64>)
 800c418:	6323      	str	r3, [r4, #48]	; 0x30
 800c41a:	4b0d      	ldr	r3, [pc, #52]	; (800c450 <std+0x68>)
 800c41c:	6224      	str	r4, [r4, #32]
 800c41e:	429c      	cmp	r4, r3
 800c420:	d006      	beq.n	800c430 <std+0x48>
 800c422:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c426:	4294      	cmp	r4, r2
 800c428:	d002      	beq.n	800c430 <std+0x48>
 800c42a:	33d0      	adds	r3, #208	; 0xd0
 800c42c:	429c      	cmp	r4, r3
 800c42e:	d105      	bne.n	800c43c <std+0x54>
 800c430:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c438:	f000 b98c 	b.w	800c754 <__retarget_lock_init_recursive>
 800c43c:	bd10      	pop	{r4, pc}
 800c43e:	bf00      	nop
 800c440:	0800c5d5 	.word	0x0800c5d5
 800c444:	0800c5f7 	.word	0x0800c5f7
 800c448:	0800c62f 	.word	0x0800c62f
 800c44c:	0800c653 	.word	0x0800c653
 800c450:	2000167c 	.word	0x2000167c

0800c454 <stdio_exit_handler>:
 800c454:	4a02      	ldr	r2, [pc, #8]	; (800c460 <stdio_exit_handler+0xc>)
 800c456:	4903      	ldr	r1, [pc, #12]	; (800c464 <stdio_exit_handler+0x10>)
 800c458:	4803      	ldr	r0, [pc, #12]	; (800c468 <stdio_exit_handler+0x14>)
 800c45a:	f000 b869 	b.w	800c530 <_fwalk_sglue>
 800c45e:	bf00      	nop
 800c460:	2000017c 	.word	0x2000017c
 800c464:	0800e109 	.word	0x0800e109
 800c468:	20000188 	.word	0x20000188

0800c46c <cleanup_stdio>:
 800c46c:	6841      	ldr	r1, [r0, #4]
 800c46e:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <cleanup_stdio+0x34>)
 800c470:	4299      	cmp	r1, r3
 800c472:	b510      	push	{r4, lr}
 800c474:	4604      	mov	r4, r0
 800c476:	d001      	beq.n	800c47c <cleanup_stdio+0x10>
 800c478:	f001 fe46 	bl	800e108 <_fflush_r>
 800c47c:	68a1      	ldr	r1, [r4, #8]
 800c47e:	4b09      	ldr	r3, [pc, #36]	; (800c4a4 <cleanup_stdio+0x38>)
 800c480:	4299      	cmp	r1, r3
 800c482:	d002      	beq.n	800c48a <cleanup_stdio+0x1e>
 800c484:	4620      	mov	r0, r4
 800c486:	f001 fe3f 	bl	800e108 <_fflush_r>
 800c48a:	68e1      	ldr	r1, [r4, #12]
 800c48c:	4b06      	ldr	r3, [pc, #24]	; (800c4a8 <cleanup_stdio+0x3c>)
 800c48e:	4299      	cmp	r1, r3
 800c490:	d004      	beq.n	800c49c <cleanup_stdio+0x30>
 800c492:	4620      	mov	r0, r4
 800c494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c498:	f001 be36 	b.w	800e108 <_fflush_r>
 800c49c:	bd10      	pop	{r4, pc}
 800c49e:	bf00      	nop
 800c4a0:	2000167c 	.word	0x2000167c
 800c4a4:	200016e4 	.word	0x200016e4
 800c4a8:	2000174c 	.word	0x2000174c

0800c4ac <global_stdio_init.part.0>:
 800c4ac:	b510      	push	{r4, lr}
 800c4ae:	4b0b      	ldr	r3, [pc, #44]	; (800c4dc <global_stdio_init.part.0+0x30>)
 800c4b0:	4c0b      	ldr	r4, [pc, #44]	; (800c4e0 <global_stdio_init.part.0+0x34>)
 800c4b2:	4a0c      	ldr	r2, [pc, #48]	; (800c4e4 <global_stdio_init.part.0+0x38>)
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	2104      	movs	r1, #4
 800c4bc:	f7ff ff94 	bl	800c3e8 <std>
 800c4c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	2109      	movs	r1, #9
 800c4c8:	f7ff ff8e 	bl	800c3e8 <std>
 800c4cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c4d0:	2202      	movs	r2, #2
 800c4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4d6:	2112      	movs	r1, #18
 800c4d8:	f7ff bf86 	b.w	800c3e8 <std>
 800c4dc:	200017b4 	.word	0x200017b4
 800c4e0:	2000167c 	.word	0x2000167c
 800c4e4:	0800c455 	.word	0x0800c455

0800c4e8 <__sfp_lock_acquire>:
 800c4e8:	4801      	ldr	r0, [pc, #4]	; (800c4f0 <__sfp_lock_acquire+0x8>)
 800c4ea:	f000 b934 	b.w	800c756 <__retarget_lock_acquire_recursive>
 800c4ee:	bf00      	nop
 800c4f0:	200017bd 	.word	0x200017bd

0800c4f4 <__sfp_lock_release>:
 800c4f4:	4801      	ldr	r0, [pc, #4]	; (800c4fc <__sfp_lock_release+0x8>)
 800c4f6:	f000 b92f 	b.w	800c758 <__retarget_lock_release_recursive>
 800c4fa:	bf00      	nop
 800c4fc:	200017bd 	.word	0x200017bd

0800c500 <__sinit>:
 800c500:	b510      	push	{r4, lr}
 800c502:	4604      	mov	r4, r0
 800c504:	f7ff fff0 	bl	800c4e8 <__sfp_lock_acquire>
 800c508:	6a23      	ldr	r3, [r4, #32]
 800c50a:	b11b      	cbz	r3, 800c514 <__sinit+0x14>
 800c50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c510:	f7ff bff0 	b.w	800c4f4 <__sfp_lock_release>
 800c514:	4b04      	ldr	r3, [pc, #16]	; (800c528 <__sinit+0x28>)
 800c516:	6223      	str	r3, [r4, #32]
 800c518:	4b04      	ldr	r3, [pc, #16]	; (800c52c <__sinit+0x2c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1f5      	bne.n	800c50c <__sinit+0xc>
 800c520:	f7ff ffc4 	bl	800c4ac <global_stdio_init.part.0>
 800c524:	e7f2      	b.n	800c50c <__sinit+0xc>
 800c526:	bf00      	nop
 800c528:	0800c46d 	.word	0x0800c46d
 800c52c:	200017b4 	.word	0x200017b4

0800c530 <_fwalk_sglue>:
 800c530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c534:	4607      	mov	r7, r0
 800c536:	4688      	mov	r8, r1
 800c538:	4614      	mov	r4, r2
 800c53a:	2600      	movs	r6, #0
 800c53c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c540:	f1b9 0901 	subs.w	r9, r9, #1
 800c544:	d505      	bpl.n	800c552 <_fwalk_sglue+0x22>
 800c546:	6824      	ldr	r4, [r4, #0]
 800c548:	2c00      	cmp	r4, #0
 800c54a:	d1f7      	bne.n	800c53c <_fwalk_sglue+0xc>
 800c54c:	4630      	mov	r0, r6
 800c54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c552:	89ab      	ldrh	r3, [r5, #12]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d907      	bls.n	800c568 <_fwalk_sglue+0x38>
 800c558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c55c:	3301      	adds	r3, #1
 800c55e:	d003      	beq.n	800c568 <_fwalk_sglue+0x38>
 800c560:	4629      	mov	r1, r5
 800c562:	4638      	mov	r0, r7
 800c564:	47c0      	blx	r8
 800c566:	4306      	orrs	r6, r0
 800c568:	3568      	adds	r5, #104	; 0x68
 800c56a:	e7e9      	b.n	800c540 <_fwalk_sglue+0x10>

0800c56c <sniprintf>:
 800c56c:	b40c      	push	{r2, r3}
 800c56e:	b530      	push	{r4, r5, lr}
 800c570:	4b17      	ldr	r3, [pc, #92]	; (800c5d0 <sniprintf+0x64>)
 800c572:	1e0c      	subs	r4, r1, #0
 800c574:	681d      	ldr	r5, [r3, #0]
 800c576:	b09d      	sub	sp, #116	; 0x74
 800c578:	da08      	bge.n	800c58c <sniprintf+0x20>
 800c57a:	238b      	movs	r3, #139	; 0x8b
 800c57c:	602b      	str	r3, [r5, #0]
 800c57e:	f04f 30ff 	mov.w	r0, #4294967295
 800c582:	b01d      	add	sp, #116	; 0x74
 800c584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c588:	b002      	add	sp, #8
 800c58a:	4770      	bx	lr
 800c58c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c590:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c594:	bf14      	ite	ne
 800c596:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c59a:	4623      	moveq	r3, r4
 800c59c:	9304      	str	r3, [sp, #16]
 800c59e:	9307      	str	r3, [sp, #28]
 800c5a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c5a4:	9002      	str	r0, [sp, #8]
 800c5a6:	9006      	str	r0, [sp, #24]
 800c5a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c5ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c5ae:	ab21      	add	r3, sp, #132	; 0x84
 800c5b0:	a902      	add	r1, sp, #8
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	9301      	str	r3, [sp, #4]
 800c5b6:	f001 fc23 	bl	800de00 <_svfiprintf_r>
 800c5ba:	1c43      	adds	r3, r0, #1
 800c5bc:	bfbc      	itt	lt
 800c5be:	238b      	movlt	r3, #139	; 0x8b
 800c5c0:	602b      	strlt	r3, [r5, #0]
 800c5c2:	2c00      	cmp	r4, #0
 800c5c4:	d0dd      	beq.n	800c582 <sniprintf+0x16>
 800c5c6:	9b02      	ldr	r3, [sp, #8]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	701a      	strb	r2, [r3, #0]
 800c5cc:	e7d9      	b.n	800c582 <sniprintf+0x16>
 800c5ce:	bf00      	nop
 800c5d0:	200001d4 	.word	0x200001d4

0800c5d4 <__sread>:
 800c5d4:	b510      	push	{r4, lr}
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5dc:	f000 f86c 	bl	800c6b8 <_read_r>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	bfab      	itete	ge
 800c5e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5e6:	89a3      	ldrhlt	r3, [r4, #12]
 800c5e8:	181b      	addge	r3, r3, r0
 800c5ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5ee:	bfac      	ite	ge
 800c5f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5f2:	81a3      	strhlt	r3, [r4, #12]
 800c5f4:	bd10      	pop	{r4, pc}

0800c5f6 <__swrite>:
 800c5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fa:	461f      	mov	r7, r3
 800c5fc:	898b      	ldrh	r3, [r1, #12]
 800c5fe:	05db      	lsls	r3, r3, #23
 800c600:	4605      	mov	r5, r0
 800c602:	460c      	mov	r4, r1
 800c604:	4616      	mov	r6, r2
 800c606:	d505      	bpl.n	800c614 <__swrite+0x1e>
 800c608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c60c:	2302      	movs	r3, #2
 800c60e:	2200      	movs	r2, #0
 800c610:	f000 f840 	bl	800c694 <_lseek_r>
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c61a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c61e:	81a3      	strh	r3, [r4, #12]
 800c620:	4632      	mov	r2, r6
 800c622:	463b      	mov	r3, r7
 800c624:	4628      	mov	r0, r5
 800c626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c62a:	f000 b857 	b.w	800c6dc <_write_r>

0800c62e <__sseek>:
 800c62e:	b510      	push	{r4, lr}
 800c630:	460c      	mov	r4, r1
 800c632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c636:	f000 f82d 	bl	800c694 <_lseek_r>
 800c63a:	1c43      	adds	r3, r0, #1
 800c63c:	89a3      	ldrh	r3, [r4, #12]
 800c63e:	bf15      	itete	ne
 800c640:	6560      	strne	r0, [r4, #84]	; 0x54
 800c642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c64a:	81a3      	strheq	r3, [r4, #12]
 800c64c:	bf18      	it	ne
 800c64e:	81a3      	strhne	r3, [r4, #12]
 800c650:	bd10      	pop	{r4, pc}

0800c652 <__sclose>:
 800c652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c656:	f000 b80d 	b.w	800c674 <_close_r>

0800c65a <memset>:
 800c65a:	4402      	add	r2, r0
 800c65c:	4603      	mov	r3, r0
 800c65e:	4293      	cmp	r3, r2
 800c660:	d100      	bne.n	800c664 <memset+0xa>
 800c662:	4770      	bx	lr
 800c664:	f803 1b01 	strb.w	r1, [r3], #1
 800c668:	e7f9      	b.n	800c65e <memset+0x4>
	...

0800c66c <_localeconv_r>:
 800c66c:	4800      	ldr	r0, [pc, #0]	; (800c670 <_localeconv_r+0x4>)
 800c66e:	4770      	bx	lr
 800c670:	200002c8 	.word	0x200002c8

0800c674 <_close_r>:
 800c674:	b538      	push	{r3, r4, r5, lr}
 800c676:	4d06      	ldr	r5, [pc, #24]	; (800c690 <_close_r+0x1c>)
 800c678:	2300      	movs	r3, #0
 800c67a:	4604      	mov	r4, r0
 800c67c:	4608      	mov	r0, r1
 800c67e:	602b      	str	r3, [r5, #0]
 800c680:	f7f4 ffdd 	bl	800163e <_close>
 800c684:	1c43      	adds	r3, r0, #1
 800c686:	d102      	bne.n	800c68e <_close_r+0x1a>
 800c688:	682b      	ldr	r3, [r5, #0]
 800c68a:	b103      	cbz	r3, 800c68e <_close_r+0x1a>
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	bd38      	pop	{r3, r4, r5, pc}
 800c690:	200017b8 	.word	0x200017b8

0800c694 <_lseek_r>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	4d07      	ldr	r5, [pc, #28]	; (800c6b4 <_lseek_r+0x20>)
 800c698:	4604      	mov	r4, r0
 800c69a:	4608      	mov	r0, r1
 800c69c:	4611      	mov	r1, r2
 800c69e:	2200      	movs	r2, #0
 800c6a0:	602a      	str	r2, [r5, #0]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	f7f4 fff2 	bl	800168c <_lseek>
 800c6a8:	1c43      	adds	r3, r0, #1
 800c6aa:	d102      	bne.n	800c6b2 <_lseek_r+0x1e>
 800c6ac:	682b      	ldr	r3, [r5, #0]
 800c6ae:	b103      	cbz	r3, 800c6b2 <_lseek_r+0x1e>
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	bd38      	pop	{r3, r4, r5, pc}
 800c6b4:	200017b8 	.word	0x200017b8

0800c6b8 <_read_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4d07      	ldr	r5, [pc, #28]	; (800c6d8 <_read_r+0x20>)
 800c6bc:	4604      	mov	r4, r0
 800c6be:	4608      	mov	r0, r1
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	602a      	str	r2, [r5, #0]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	f7f4 ff80 	bl	80015cc <_read>
 800c6cc:	1c43      	adds	r3, r0, #1
 800c6ce:	d102      	bne.n	800c6d6 <_read_r+0x1e>
 800c6d0:	682b      	ldr	r3, [r5, #0]
 800c6d2:	b103      	cbz	r3, 800c6d6 <_read_r+0x1e>
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	bd38      	pop	{r3, r4, r5, pc}
 800c6d8:	200017b8 	.word	0x200017b8

0800c6dc <_write_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4d07      	ldr	r5, [pc, #28]	; (800c6fc <_write_r+0x20>)
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	4608      	mov	r0, r1
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	602a      	str	r2, [r5, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f7f4 ff8b 	bl	8001606 <_write>
 800c6f0:	1c43      	adds	r3, r0, #1
 800c6f2:	d102      	bne.n	800c6fa <_write_r+0x1e>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	b103      	cbz	r3, 800c6fa <_write_r+0x1e>
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
 800c6fc:	200017b8 	.word	0x200017b8

0800c700 <__errno>:
 800c700:	4b01      	ldr	r3, [pc, #4]	; (800c708 <__errno+0x8>)
 800c702:	6818      	ldr	r0, [r3, #0]
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	200001d4 	.word	0x200001d4

0800c70c <__libc_init_array>:
 800c70c:	b570      	push	{r4, r5, r6, lr}
 800c70e:	4d0d      	ldr	r5, [pc, #52]	; (800c744 <__libc_init_array+0x38>)
 800c710:	4c0d      	ldr	r4, [pc, #52]	; (800c748 <__libc_init_array+0x3c>)
 800c712:	1b64      	subs	r4, r4, r5
 800c714:	10a4      	asrs	r4, r4, #2
 800c716:	2600      	movs	r6, #0
 800c718:	42a6      	cmp	r6, r4
 800c71a:	d109      	bne.n	800c730 <__libc_init_array+0x24>
 800c71c:	4d0b      	ldr	r5, [pc, #44]	; (800c74c <__libc_init_array+0x40>)
 800c71e:	4c0c      	ldr	r4, [pc, #48]	; (800c750 <__libc_init_array+0x44>)
 800c720:	f002 f896 	bl	800e850 <_init>
 800c724:	1b64      	subs	r4, r4, r5
 800c726:	10a4      	asrs	r4, r4, #2
 800c728:	2600      	movs	r6, #0
 800c72a:	42a6      	cmp	r6, r4
 800c72c:	d105      	bne.n	800c73a <__libc_init_array+0x2e>
 800c72e:	bd70      	pop	{r4, r5, r6, pc}
 800c730:	f855 3b04 	ldr.w	r3, [r5], #4
 800c734:	4798      	blx	r3
 800c736:	3601      	adds	r6, #1
 800c738:	e7ee      	b.n	800c718 <__libc_init_array+0xc>
 800c73a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c73e:	4798      	blx	r3
 800c740:	3601      	adds	r6, #1
 800c742:	e7f2      	b.n	800c72a <__libc_init_array+0x1e>
 800c744:	0800eca4 	.word	0x0800eca4
 800c748:	0800eca4 	.word	0x0800eca4
 800c74c:	0800eca4 	.word	0x0800eca4
 800c750:	0800eca8 	.word	0x0800eca8

0800c754 <__retarget_lock_init_recursive>:
 800c754:	4770      	bx	lr

0800c756 <__retarget_lock_acquire_recursive>:
 800c756:	4770      	bx	lr

0800c758 <__retarget_lock_release_recursive>:
 800c758:	4770      	bx	lr

0800c75a <quorem>:
 800c75a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75e:	6903      	ldr	r3, [r0, #16]
 800c760:	690c      	ldr	r4, [r1, #16]
 800c762:	42a3      	cmp	r3, r4
 800c764:	4607      	mov	r7, r0
 800c766:	db7e      	blt.n	800c866 <quorem+0x10c>
 800c768:	3c01      	subs	r4, #1
 800c76a:	f101 0814 	add.w	r8, r1, #20
 800c76e:	f100 0514 	add.w	r5, r0, #20
 800c772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c776:	9301      	str	r3, [sp, #4]
 800c778:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c77c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c780:	3301      	adds	r3, #1
 800c782:	429a      	cmp	r2, r3
 800c784:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c788:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c78c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c790:	d331      	bcc.n	800c7f6 <quorem+0x9c>
 800c792:	f04f 0e00 	mov.w	lr, #0
 800c796:	4640      	mov	r0, r8
 800c798:	46ac      	mov	ip, r5
 800c79a:	46f2      	mov	sl, lr
 800c79c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c7a0:	b293      	uxth	r3, r2
 800c7a2:	fb06 e303 	mla	r3, r6, r3, lr
 800c7a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c7aa:	0c1a      	lsrs	r2, r3, #16
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	ebaa 0303 	sub.w	r3, sl, r3
 800c7b2:	f8dc a000 	ldr.w	sl, [ip]
 800c7b6:	fa13 f38a 	uxtah	r3, r3, sl
 800c7ba:	fb06 220e 	mla	r2, r6, lr, r2
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	9b00      	ldr	r3, [sp, #0]
 800c7c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c7c6:	b292      	uxth	r2, r2
 800c7c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c7cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c7d0:	f8bd 3000 	ldrh.w	r3, [sp]
 800c7d4:	4581      	cmp	r9, r0
 800c7d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7da:	f84c 3b04 	str.w	r3, [ip], #4
 800c7de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c7e2:	d2db      	bcs.n	800c79c <quorem+0x42>
 800c7e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c7e8:	b92b      	cbnz	r3, 800c7f6 <quorem+0x9c>
 800c7ea:	9b01      	ldr	r3, [sp, #4]
 800c7ec:	3b04      	subs	r3, #4
 800c7ee:	429d      	cmp	r5, r3
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	d32c      	bcc.n	800c84e <quorem+0xf4>
 800c7f4:	613c      	str	r4, [r7, #16]
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	f001 f9a8 	bl	800db4c <__mcmp>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	db22      	blt.n	800c846 <quorem+0xec>
 800c800:	3601      	adds	r6, #1
 800c802:	4629      	mov	r1, r5
 800c804:	2000      	movs	r0, #0
 800c806:	f858 2b04 	ldr.w	r2, [r8], #4
 800c80a:	f8d1 c000 	ldr.w	ip, [r1]
 800c80e:	b293      	uxth	r3, r2
 800c810:	1ac3      	subs	r3, r0, r3
 800c812:	0c12      	lsrs	r2, r2, #16
 800c814:	fa13 f38c 	uxtah	r3, r3, ip
 800c818:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c81c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c820:	b29b      	uxth	r3, r3
 800c822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c826:	45c1      	cmp	r9, r8
 800c828:	f841 3b04 	str.w	r3, [r1], #4
 800c82c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c830:	d2e9      	bcs.n	800c806 <quorem+0xac>
 800c832:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c83a:	b922      	cbnz	r2, 800c846 <quorem+0xec>
 800c83c:	3b04      	subs	r3, #4
 800c83e:	429d      	cmp	r5, r3
 800c840:	461a      	mov	r2, r3
 800c842:	d30a      	bcc.n	800c85a <quorem+0x100>
 800c844:	613c      	str	r4, [r7, #16]
 800c846:	4630      	mov	r0, r6
 800c848:	b003      	add	sp, #12
 800c84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84e:	6812      	ldr	r2, [r2, #0]
 800c850:	3b04      	subs	r3, #4
 800c852:	2a00      	cmp	r2, #0
 800c854:	d1ce      	bne.n	800c7f4 <quorem+0x9a>
 800c856:	3c01      	subs	r4, #1
 800c858:	e7c9      	b.n	800c7ee <quorem+0x94>
 800c85a:	6812      	ldr	r2, [r2, #0]
 800c85c:	3b04      	subs	r3, #4
 800c85e:	2a00      	cmp	r2, #0
 800c860:	d1f0      	bne.n	800c844 <quorem+0xea>
 800c862:	3c01      	subs	r4, #1
 800c864:	e7eb      	b.n	800c83e <quorem+0xe4>
 800c866:	2000      	movs	r0, #0
 800c868:	e7ee      	b.n	800c848 <quorem+0xee>
 800c86a:	0000      	movs	r0, r0
 800c86c:	0000      	movs	r0, r0
	...

0800c870 <_dtoa_r>:
 800c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c874:	ed2d 8b04 	vpush	{d8-d9}
 800c878:	69c5      	ldr	r5, [r0, #28]
 800c87a:	b093      	sub	sp, #76	; 0x4c
 800c87c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c880:	ec57 6b10 	vmov	r6, r7, d0
 800c884:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c888:	9107      	str	r1, [sp, #28]
 800c88a:	4604      	mov	r4, r0
 800c88c:	920a      	str	r2, [sp, #40]	; 0x28
 800c88e:	930d      	str	r3, [sp, #52]	; 0x34
 800c890:	b975      	cbnz	r5, 800c8b0 <_dtoa_r+0x40>
 800c892:	2010      	movs	r0, #16
 800c894:	f000 fe2a 	bl	800d4ec <malloc>
 800c898:	4602      	mov	r2, r0
 800c89a:	61e0      	str	r0, [r4, #28]
 800c89c:	b920      	cbnz	r0, 800c8a8 <_dtoa_r+0x38>
 800c89e:	4bae      	ldr	r3, [pc, #696]	; (800cb58 <_dtoa_r+0x2e8>)
 800c8a0:	21ef      	movs	r1, #239	; 0xef
 800c8a2:	48ae      	ldr	r0, [pc, #696]	; (800cb5c <_dtoa_r+0x2ec>)
 800c8a4:	f001 fc90 	bl	800e1c8 <__assert_func>
 800c8a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c8ac:	6005      	str	r5, [r0, #0]
 800c8ae:	60c5      	str	r5, [r0, #12]
 800c8b0:	69e3      	ldr	r3, [r4, #28]
 800c8b2:	6819      	ldr	r1, [r3, #0]
 800c8b4:	b151      	cbz	r1, 800c8cc <_dtoa_r+0x5c>
 800c8b6:	685a      	ldr	r2, [r3, #4]
 800c8b8:	604a      	str	r2, [r1, #4]
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	4093      	lsls	r3, r2
 800c8be:	608b      	str	r3, [r1, #8]
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f000 ff07 	bl	800d6d4 <_Bfree>
 800c8c6:	69e3      	ldr	r3, [r4, #28]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	601a      	str	r2, [r3, #0]
 800c8cc:	1e3b      	subs	r3, r7, #0
 800c8ce:	bfbb      	ittet	lt
 800c8d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c8d4:	9303      	strlt	r3, [sp, #12]
 800c8d6:	2300      	movge	r3, #0
 800c8d8:	2201      	movlt	r2, #1
 800c8da:	bfac      	ite	ge
 800c8dc:	f8c8 3000 	strge.w	r3, [r8]
 800c8e0:	f8c8 2000 	strlt.w	r2, [r8]
 800c8e4:	4b9e      	ldr	r3, [pc, #632]	; (800cb60 <_dtoa_r+0x2f0>)
 800c8e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c8ea:	ea33 0308 	bics.w	r3, r3, r8
 800c8ee:	d11b      	bne.n	800c928 <_dtoa_r+0xb8>
 800c8f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c8f6:	6013      	str	r3, [r2, #0]
 800c8f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c8fc:	4333      	orrs	r3, r6
 800c8fe:	f000 8593 	beq.w	800d428 <_dtoa_r+0xbb8>
 800c902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c904:	b963      	cbnz	r3, 800c920 <_dtoa_r+0xb0>
 800c906:	4b97      	ldr	r3, [pc, #604]	; (800cb64 <_dtoa_r+0x2f4>)
 800c908:	e027      	b.n	800c95a <_dtoa_r+0xea>
 800c90a:	4b97      	ldr	r3, [pc, #604]	; (800cb68 <_dtoa_r+0x2f8>)
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	3308      	adds	r3, #8
 800c910:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c912:	6013      	str	r3, [r2, #0]
 800c914:	9800      	ldr	r0, [sp, #0]
 800c916:	b013      	add	sp, #76	; 0x4c
 800c918:	ecbd 8b04 	vpop	{d8-d9}
 800c91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c920:	4b90      	ldr	r3, [pc, #576]	; (800cb64 <_dtoa_r+0x2f4>)
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	3303      	adds	r3, #3
 800c926:	e7f3      	b.n	800c910 <_dtoa_r+0xa0>
 800c928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c92c:	2200      	movs	r2, #0
 800c92e:	ec51 0b17 	vmov	r0, r1, d7
 800c932:	eeb0 8a47 	vmov.f32	s16, s14
 800c936:	eef0 8a67 	vmov.f32	s17, s15
 800c93a:	2300      	movs	r3, #0
 800c93c:	f7f4 f8c4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c940:	4681      	mov	r9, r0
 800c942:	b160      	cbz	r0, 800c95e <_dtoa_r+0xee>
 800c944:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c946:	2301      	movs	r3, #1
 800c948:	6013      	str	r3, [r2, #0]
 800c94a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 8568 	beq.w	800d422 <_dtoa_r+0xbb2>
 800c952:	4b86      	ldr	r3, [pc, #536]	; (800cb6c <_dtoa_r+0x2fc>)
 800c954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c956:	6013      	str	r3, [r2, #0]
 800c958:	3b01      	subs	r3, #1
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	e7da      	b.n	800c914 <_dtoa_r+0xa4>
 800c95e:	aa10      	add	r2, sp, #64	; 0x40
 800c960:	a911      	add	r1, sp, #68	; 0x44
 800c962:	4620      	mov	r0, r4
 800c964:	eeb0 0a48 	vmov.f32	s0, s16
 800c968:	eef0 0a68 	vmov.f32	s1, s17
 800c96c:	f001 f994 	bl	800dc98 <__d2b>
 800c970:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c974:	4682      	mov	sl, r0
 800c976:	2d00      	cmp	r5, #0
 800c978:	d07f      	beq.n	800ca7a <_dtoa_r+0x20a>
 800c97a:	ee18 3a90 	vmov	r3, s17
 800c97e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c982:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c986:	ec51 0b18 	vmov	r0, r1, d8
 800c98a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c98e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c992:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c996:	4619      	mov	r1, r3
 800c998:	2200      	movs	r2, #0
 800c99a:	4b75      	ldr	r3, [pc, #468]	; (800cb70 <_dtoa_r+0x300>)
 800c99c:	f7f3 fc74 	bl	8000288 <__aeabi_dsub>
 800c9a0:	a367      	add	r3, pc, #412	; (adr r3, 800cb40 <_dtoa_r+0x2d0>)
 800c9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a6:	f7f3 fe27 	bl	80005f8 <__aeabi_dmul>
 800c9aa:	a367      	add	r3, pc, #412	; (adr r3, 800cb48 <_dtoa_r+0x2d8>)
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	f7f3 fc6c 	bl	800028c <__adddf3>
 800c9b4:	4606      	mov	r6, r0
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	460f      	mov	r7, r1
 800c9ba:	f7f3 fdb3 	bl	8000524 <__aeabi_i2d>
 800c9be:	a364      	add	r3, pc, #400	; (adr r3, 800cb50 <_dtoa_r+0x2e0>)
 800c9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c4:	f7f3 fe18 	bl	80005f8 <__aeabi_dmul>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	4639      	mov	r1, r7
 800c9d0:	f7f3 fc5c 	bl	800028c <__adddf3>
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	460f      	mov	r7, r1
 800c9d8:	f7f4 f8be 	bl	8000b58 <__aeabi_d2iz>
 800c9dc:	2200      	movs	r2, #0
 800c9de:	4683      	mov	fp, r0
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	f7f4 f879 	bl	8000adc <__aeabi_dcmplt>
 800c9ea:	b148      	cbz	r0, 800ca00 <_dtoa_r+0x190>
 800c9ec:	4658      	mov	r0, fp
 800c9ee:	f7f3 fd99 	bl	8000524 <__aeabi_i2d>
 800c9f2:	4632      	mov	r2, r6
 800c9f4:	463b      	mov	r3, r7
 800c9f6:	f7f4 f867 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9fa:	b908      	cbnz	r0, 800ca00 <_dtoa_r+0x190>
 800c9fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca00:	f1bb 0f16 	cmp.w	fp, #22
 800ca04:	d857      	bhi.n	800cab6 <_dtoa_r+0x246>
 800ca06:	4b5b      	ldr	r3, [pc, #364]	; (800cb74 <_dtoa_r+0x304>)
 800ca08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	ec51 0b18 	vmov	r0, r1, d8
 800ca14:	f7f4 f862 	bl	8000adc <__aeabi_dcmplt>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d04e      	beq.n	800caba <_dtoa_r+0x24a>
 800ca1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca20:	2300      	movs	r3, #0
 800ca22:	930c      	str	r3, [sp, #48]	; 0x30
 800ca24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca26:	1b5b      	subs	r3, r3, r5
 800ca28:	1e5a      	subs	r2, r3, #1
 800ca2a:	bf45      	ittet	mi
 800ca2c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ca30:	9305      	strmi	r3, [sp, #20]
 800ca32:	2300      	movpl	r3, #0
 800ca34:	2300      	movmi	r3, #0
 800ca36:	9206      	str	r2, [sp, #24]
 800ca38:	bf54      	ite	pl
 800ca3a:	9305      	strpl	r3, [sp, #20]
 800ca3c:	9306      	strmi	r3, [sp, #24]
 800ca3e:	f1bb 0f00 	cmp.w	fp, #0
 800ca42:	db3c      	blt.n	800cabe <_dtoa_r+0x24e>
 800ca44:	9b06      	ldr	r3, [sp, #24]
 800ca46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ca4a:	445b      	add	r3, fp
 800ca4c:	9306      	str	r3, [sp, #24]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	9308      	str	r3, [sp, #32]
 800ca52:	9b07      	ldr	r3, [sp, #28]
 800ca54:	2b09      	cmp	r3, #9
 800ca56:	d868      	bhi.n	800cb2a <_dtoa_r+0x2ba>
 800ca58:	2b05      	cmp	r3, #5
 800ca5a:	bfc4      	itt	gt
 800ca5c:	3b04      	subgt	r3, #4
 800ca5e:	9307      	strgt	r3, [sp, #28]
 800ca60:	9b07      	ldr	r3, [sp, #28]
 800ca62:	f1a3 0302 	sub.w	r3, r3, #2
 800ca66:	bfcc      	ite	gt
 800ca68:	2500      	movgt	r5, #0
 800ca6a:	2501      	movle	r5, #1
 800ca6c:	2b03      	cmp	r3, #3
 800ca6e:	f200 8085 	bhi.w	800cb7c <_dtoa_r+0x30c>
 800ca72:	e8df f003 	tbb	[pc, r3]
 800ca76:	3b2e      	.short	0x3b2e
 800ca78:	5839      	.short	0x5839
 800ca7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ca7e:	441d      	add	r5, r3
 800ca80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ca84:	2b20      	cmp	r3, #32
 800ca86:	bfc1      	itttt	gt
 800ca88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ca8c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ca90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ca94:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ca98:	bfd6      	itet	le
 800ca9a:	f1c3 0320 	rsble	r3, r3, #32
 800ca9e:	ea48 0003 	orrgt.w	r0, r8, r3
 800caa2:	fa06 f003 	lslle.w	r0, r6, r3
 800caa6:	f7f3 fd2d 	bl	8000504 <__aeabi_ui2d>
 800caaa:	2201      	movs	r2, #1
 800caac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cab0:	3d01      	subs	r5, #1
 800cab2:	920e      	str	r2, [sp, #56]	; 0x38
 800cab4:	e76f      	b.n	800c996 <_dtoa_r+0x126>
 800cab6:	2301      	movs	r3, #1
 800cab8:	e7b3      	b.n	800ca22 <_dtoa_r+0x1b2>
 800caba:	900c      	str	r0, [sp, #48]	; 0x30
 800cabc:	e7b2      	b.n	800ca24 <_dtoa_r+0x1b4>
 800cabe:	9b05      	ldr	r3, [sp, #20]
 800cac0:	eba3 030b 	sub.w	r3, r3, fp
 800cac4:	9305      	str	r3, [sp, #20]
 800cac6:	f1cb 0300 	rsb	r3, fp, #0
 800caca:	9308      	str	r3, [sp, #32]
 800cacc:	2300      	movs	r3, #0
 800cace:	930b      	str	r3, [sp, #44]	; 0x2c
 800cad0:	e7bf      	b.n	800ca52 <_dtoa_r+0x1e2>
 800cad2:	2300      	movs	r3, #0
 800cad4:	9309      	str	r3, [sp, #36]	; 0x24
 800cad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cad8:	2b00      	cmp	r3, #0
 800cada:	dc52      	bgt.n	800cb82 <_dtoa_r+0x312>
 800cadc:	2301      	movs	r3, #1
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	9304      	str	r3, [sp, #16]
 800cae2:	461a      	mov	r2, r3
 800cae4:	920a      	str	r2, [sp, #40]	; 0x28
 800cae6:	e00b      	b.n	800cb00 <_dtoa_r+0x290>
 800cae8:	2301      	movs	r3, #1
 800caea:	e7f3      	b.n	800cad4 <_dtoa_r+0x264>
 800caec:	2300      	movs	r3, #0
 800caee:	9309      	str	r3, [sp, #36]	; 0x24
 800caf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caf2:	445b      	add	r3, fp
 800caf4:	9301      	str	r3, [sp, #4]
 800caf6:	3301      	adds	r3, #1
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	9304      	str	r3, [sp, #16]
 800cafc:	bfb8      	it	lt
 800cafe:	2301      	movlt	r3, #1
 800cb00:	69e0      	ldr	r0, [r4, #28]
 800cb02:	2100      	movs	r1, #0
 800cb04:	2204      	movs	r2, #4
 800cb06:	f102 0614 	add.w	r6, r2, #20
 800cb0a:	429e      	cmp	r6, r3
 800cb0c:	d93d      	bls.n	800cb8a <_dtoa_r+0x31a>
 800cb0e:	6041      	str	r1, [r0, #4]
 800cb10:	4620      	mov	r0, r4
 800cb12:	f000 fd9f 	bl	800d654 <_Balloc>
 800cb16:	9000      	str	r0, [sp, #0]
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d139      	bne.n	800cb90 <_dtoa_r+0x320>
 800cb1c:	4b16      	ldr	r3, [pc, #88]	; (800cb78 <_dtoa_r+0x308>)
 800cb1e:	4602      	mov	r2, r0
 800cb20:	f240 11af 	movw	r1, #431	; 0x1af
 800cb24:	e6bd      	b.n	800c8a2 <_dtoa_r+0x32>
 800cb26:	2301      	movs	r3, #1
 800cb28:	e7e1      	b.n	800caee <_dtoa_r+0x27e>
 800cb2a:	2501      	movs	r5, #1
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	9307      	str	r3, [sp, #28]
 800cb30:	9509      	str	r5, [sp, #36]	; 0x24
 800cb32:	f04f 33ff 	mov.w	r3, #4294967295
 800cb36:	9301      	str	r3, [sp, #4]
 800cb38:	9304      	str	r3, [sp, #16]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	2312      	movs	r3, #18
 800cb3e:	e7d1      	b.n	800cae4 <_dtoa_r+0x274>
 800cb40:	636f4361 	.word	0x636f4361
 800cb44:	3fd287a7 	.word	0x3fd287a7
 800cb48:	8b60c8b3 	.word	0x8b60c8b3
 800cb4c:	3fc68a28 	.word	0x3fc68a28
 800cb50:	509f79fb 	.word	0x509f79fb
 800cb54:	3fd34413 	.word	0x3fd34413
 800cb58:	0800e971 	.word	0x0800e971
 800cb5c:	0800e988 	.word	0x0800e988
 800cb60:	7ff00000 	.word	0x7ff00000
 800cb64:	0800e96d 	.word	0x0800e96d
 800cb68:	0800e964 	.word	0x0800e964
 800cb6c:	0800e941 	.word	0x0800e941
 800cb70:	3ff80000 	.word	0x3ff80000
 800cb74:	0800ea78 	.word	0x0800ea78
 800cb78:	0800e9e0 	.word	0x0800e9e0
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb80:	e7d7      	b.n	800cb32 <_dtoa_r+0x2c2>
 800cb82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb84:	9301      	str	r3, [sp, #4]
 800cb86:	9304      	str	r3, [sp, #16]
 800cb88:	e7ba      	b.n	800cb00 <_dtoa_r+0x290>
 800cb8a:	3101      	adds	r1, #1
 800cb8c:	0052      	lsls	r2, r2, #1
 800cb8e:	e7ba      	b.n	800cb06 <_dtoa_r+0x296>
 800cb90:	69e3      	ldr	r3, [r4, #28]
 800cb92:	9a00      	ldr	r2, [sp, #0]
 800cb94:	601a      	str	r2, [r3, #0]
 800cb96:	9b04      	ldr	r3, [sp, #16]
 800cb98:	2b0e      	cmp	r3, #14
 800cb9a:	f200 80a8 	bhi.w	800ccee <_dtoa_r+0x47e>
 800cb9e:	2d00      	cmp	r5, #0
 800cba0:	f000 80a5 	beq.w	800ccee <_dtoa_r+0x47e>
 800cba4:	f1bb 0f00 	cmp.w	fp, #0
 800cba8:	dd38      	ble.n	800cc1c <_dtoa_r+0x3ac>
 800cbaa:	4bc0      	ldr	r3, [pc, #768]	; (800ceac <_dtoa_r+0x63c>)
 800cbac:	f00b 020f 	and.w	r2, fp, #15
 800cbb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cbb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cbbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cbc0:	d019      	beq.n	800cbf6 <_dtoa_r+0x386>
 800cbc2:	4bbb      	ldr	r3, [pc, #748]	; (800ceb0 <_dtoa_r+0x640>)
 800cbc4:	ec51 0b18 	vmov	r0, r1, d8
 800cbc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cbcc:	f7f3 fe3e 	bl	800084c <__aeabi_ddiv>
 800cbd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbd4:	f008 080f 	and.w	r8, r8, #15
 800cbd8:	2503      	movs	r5, #3
 800cbda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ceb0 <_dtoa_r+0x640>
 800cbde:	f1b8 0f00 	cmp.w	r8, #0
 800cbe2:	d10a      	bne.n	800cbfa <_dtoa_r+0x38a>
 800cbe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbe8:	4632      	mov	r2, r6
 800cbea:	463b      	mov	r3, r7
 800cbec:	f7f3 fe2e 	bl	800084c <__aeabi_ddiv>
 800cbf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbf4:	e02b      	b.n	800cc4e <_dtoa_r+0x3de>
 800cbf6:	2502      	movs	r5, #2
 800cbf8:	e7ef      	b.n	800cbda <_dtoa_r+0x36a>
 800cbfa:	f018 0f01 	tst.w	r8, #1
 800cbfe:	d008      	beq.n	800cc12 <_dtoa_r+0x3a2>
 800cc00:	4630      	mov	r0, r6
 800cc02:	4639      	mov	r1, r7
 800cc04:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cc08:	f7f3 fcf6 	bl	80005f8 <__aeabi_dmul>
 800cc0c:	3501      	adds	r5, #1
 800cc0e:	4606      	mov	r6, r0
 800cc10:	460f      	mov	r7, r1
 800cc12:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cc16:	f109 0908 	add.w	r9, r9, #8
 800cc1a:	e7e0      	b.n	800cbde <_dtoa_r+0x36e>
 800cc1c:	f000 809f 	beq.w	800cd5e <_dtoa_r+0x4ee>
 800cc20:	f1cb 0600 	rsb	r6, fp, #0
 800cc24:	4ba1      	ldr	r3, [pc, #644]	; (800ceac <_dtoa_r+0x63c>)
 800cc26:	4fa2      	ldr	r7, [pc, #648]	; (800ceb0 <_dtoa_r+0x640>)
 800cc28:	f006 020f 	and.w	r2, r6, #15
 800cc2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc34:	ec51 0b18 	vmov	r0, r1, d8
 800cc38:	f7f3 fcde 	bl	80005f8 <__aeabi_dmul>
 800cc3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc40:	1136      	asrs	r6, r6, #4
 800cc42:	2300      	movs	r3, #0
 800cc44:	2502      	movs	r5, #2
 800cc46:	2e00      	cmp	r6, #0
 800cc48:	d17e      	bne.n	800cd48 <_dtoa_r+0x4d8>
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1d0      	bne.n	800cbf0 <_dtoa_r+0x380>
 800cc4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f000 8084 	beq.w	800cd62 <_dtoa_r+0x4f2>
 800cc5a:	4b96      	ldr	r3, [pc, #600]	; (800ceb4 <_dtoa_r+0x644>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	4640      	mov	r0, r8
 800cc60:	4649      	mov	r1, r9
 800cc62:	f7f3 ff3b 	bl	8000adc <__aeabi_dcmplt>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d07b      	beq.n	800cd62 <_dtoa_r+0x4f2>
 800cc6a:	9b04      	ldr	r3, [sp, #16]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d078      	beq.n	800cd62 <_dtoa_r+0x4f2>
 800cc70:	9b01      	ldr	r3, [sp, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	dd39      	ble.n	800ccea <_dtoa_r+0x47a>
 800cc76:	4b90      	ldr	r3, [pc, #576]	; (800ceb8 <_dtoa_r+0x648>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	4640      	mov	r0, r8
 800cc7c:	4649      	mov	r1, r9
 800cc7e:	f7f3 fcbb 	bl	80005f8 <__aeabi_dmul>
 800cc82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc86:	9e01      	ldr	r6, [sp, #4]
 800cc88:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cc8c:	3501      	adds	r5, #1
 800cc8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cc92:	4628      	mov	r0, r5
 800cc94:	f7f3 fc46 	bl	8000524 <__aeabi_i2d>
 800cc98:	4642      	mov	r2, r8
 800cc9a:	464b      	mov	r3, r9
 800cc9c:	f7f3 fcac 	bl	80005f8 <__aeabi_dmul>
 800cca0:	4b86      	ldr	r3, [pc, #536]	; (800cebc <_dtoa_r+0x64c>)
 800cca2:	2200      	movs	r2, #0
 800cca4:	f7f3 faf2 	bl	800028c <__adddf3>
 800cca8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ccac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccb0:	9303      	str	r3, [sp, #12]
 800ccb2:	2e00      	cmp	r6, #0
 800ccb4:	d158      	bne.n	800cd68 <_dtoa_r+0x4f8>
 800ccb6:	4b82      	ldr	r3, [pc, #520]	; (800cec0 <_dtoa_r+0x650>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	4640      	mov	r0, r8
 800ccbc:	4649      	mov	r1, r9
 800ccbe:	f7f3 fae3 	bl	8000288 <__aeabi_dsub>
 800ccc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccc6:	4680      	mov	r8, r0
 800ccc8:	4689      	mov	r9, r1
 800ccca:	f7f3 ff25 	bl	8000b18 <__aeabi_dcmpgt>
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	f040 8296 	bne.w	800d200 <_dtoa_r+0x990>
 800ccd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ccd8:	4640      	mov	r0, r8
 800ccda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccde:	4649      	mov	r1, r9
 800cce0:	f7f3 fefc 	bl	8000adc <__aeabi_dcmplt>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	f040 8289 	bne.w	800d1fc <_dtoa_r+0x98c>
 800ccea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ccee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f2c0 814e 	blt.w	800cf92 <_dtoa_r+0x722>
 800ccf6:	f1bb 0f0e 	cmp.w	fp, #14
 800ccfa:	f300 814a 	bgt.w	800cf92 <_dtoa_r+0x722>
 800ccfe:	4b6b      	ldr	r3, [pc, #428]	; (800ceac <_dtoa_r+0x63c>)
 800cd00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f280 80dc 	bge.w	800cec8 <_dtoa_r+0x658>
 800cd10:	9b04      	ldr	r3, [sp, #16]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f300 80d8 	bgt.w	800cec8 <_dtoa_r+0x658>
 800cd18:	f040 826f 	bne.w	800d1fa <_dtoa_r+0x98a>
 800cd1c:	4b68      	ldr	r3, [pc, #416]	; (800cec0 <_dtoa_r+0x650>)
 800cd1e:	2200      	movs	r2, #0
 800cd20:	4640      	mov	r0, r8
 800cd22:	4649      	mov	r1, r9
 800cd24:	f7f3 fc68 	bl	80005f8 <__aeabi_dmul>
 800cd28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd2c:	f7f3 feea 	bl	8000b04 <__aeabi_dcmpge>
 800cd30:	9e04      	ldr	r6, [sp, #16]
 800cd32:	4637      	mov	r7, r6
 800cd34:	2800      	cmp	r0, #0
 800cd36:	f040 8245 	bne.w	800d1c4 <_dtoa_r+0x954>
 800cd3a:	9d00      	ldr	r5, [sp, #0]
 800cd3c:	2331      	movs	r3, #49	; 0x31
 800cd3e:	f805 3b01 	strb.w	r3, [r5], #1
 800cd42:	f10b 0b01 	add.w	fp, fp, #1
 800cd46:	e241      	b.n	800d1cc <_dtoa_r+0x95c>
 800cd48:	07f2      	lsls	r2, r6, #31
 800cd4a:	d505      	bpl.n	800cd58 <_dtoa_r+0x4e8>
 800cd4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd50:	f7f3 fc52 	bl	80005f8 <__aeabi_dmul>
 800cd54:	3501      	adds	r5, #1
 800cd56:	2301      	movs	r3, #1
 800cd58:	1076      	asrs	r6, r6, #1
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	e773      	b.n	800cc46 <_dtoa_r+0x3d6>
 800cd5e:	2502      	movs	r5, #2
 800cd60:	e775      	b.n	800cc4e <_dtoa_r+0x3de>
 800cd62:	9e04      	ldr	r6, [sp, #16]
 800cd64:	465f      	mov	r7, fp
 800cd66:	e792      	b.n	800cc8e <_dtoa_r+0x41e>
 800cd68:	9900      	ldr	r1, [sp, #0]
 800cd6a:	4b50      	ldr	r3, [pc, #320]	; (800ceac <_dtoa_r+0x63c>)
 800cd6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd70:	4431      	add	r1, r6
 800cd72:	9102      	str	r1, [sp, #8]
 800cd74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd76:	eeb0 9a47 	vmov.f32	s18, s14
 800cd7a:	eef0 9a67 	vmov.f32	s19, s15
 800cd7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cd82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd86:	2900      	cmp	r1, #0
 800cd88:	d044      	beq.n	800ce14 <_dtoa_r+0x5a4>
 800cd8a:	494e      	ldr	r1, [pc, #312]	; (800cec4 <_dtoa_r+0x654>)
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	f7f3 fd5d 	bl	800084c <__aeabi_ddiv>
 800cd92:	ec53 2b19 	vmov	r2, r3, d9
 800cd96:	f7f3 fa77 	bl	8000288 <__aeabi_dsub>
 800cd9a:	9d00      	ldr	r5, [sp, #0]
 800cd9c:	ec41 0b19 	vmov	d9, r0, r1
 800cda0:	4649      	mov	r1, r9
 800cda2:	4640      	mov	r0, r8
 800cda4:	f7f3 fed8 	bl	8000b58 <__aeabi_d2iz>
 800cda8:	4606      	mov	r6, r0
 800cdaa:	f7f3 fbbb 	bl	8000524 <__aeabi_i2d>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	4640      	mov	r0, r8
 800cdb4:	4649      	mov	r1, r9
 800cdb6:	f7f3 fa67 	bl	8000288 <__aeabi_dsub>
 800cdba:	3630      	adds	r6, #48	; 0x30
 800cdbc:	f805 6b01 	strb.w	r6, [r5], #1
 800cdc0:	ec53 2b19 	vmov	r2, r3, d9
 800cdc4:	4680      	mov	r8, r0
 800cdc6:	4689      	mov	r9, r1
 800cdc8:	f7f3 fe88 	bl	8000adc <__aeabi_dcmplt>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d164      	bne.n	800ce9a <_dtoa_r+0x62a>
 800cdd0:	4642      	mov	r2, r8
 800cdd2:	464b      	mov	r3, r9
 800cdd4:	4937      	ldr	r1, [pc, #220]	; (800ceb4 <_dtoa_r+0x644>)
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	f7f3 fa56 	bl	8000288 <__aeabi_dsub>
 800cddc:	ec53 2b19 	vmov	r2, r3, d9
 800cde0:	f7f3 fe7c 	bl	8000adc <__aeabi_dcmplt>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	f040 80b6 	bne.w	800cf56 <_dtoa_r+0x6e6>
 800cdea:	9b02      	ldr	r3, [sp, #8]
 800cdec:	429d      	cmp	r5, r3
 800cdee:	f43f af7c 	beq.w	800ccea <_dtoa_r+0x47a>
 800cdf2:	4b31      	ldr	r3, [pc, #196]	; (800ceb8 <_dtoa_r+0x648>)
 800cdf4:	ec51 0b19 	vmov	r0, r1, d9
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f7f3 fbfd 	bl	80005f8 <__aeabi_dmul>
 800cdfe:	4b2e      	ldr	r3, [pc, #184]	; (800ceb8 <_dtoa_r+0x648>)
 800ce00:	ec41 0b19 	vmov	d9, r0, r1
 800ce04:	2200      	movs	r2, #0
 800ce06:	4640      	mov	r0, r8
 800ce08:	4649      	mov	r1, r9
 800ce0a:	f7f3 fbf5 	bl	80005f8 <__aeabi_dmul>
 800ce0e:	4680      	mov	r8, r0
 800ce10:	4689      	mov	r9, r1
 800ce12:	e7c5      	b.n	800cda0 <_dtoa_r+0x530>
 800ce14:	ec51 0b17 	vmov	r0, r1, d7
 800ce18:	f7f3 fbee 	bl	80005f8 <__aeabi_dmul>
 800ce1c:	9b02      	ldr	r3, [sp, #8]
 800ce1e:	9d00      	ldr	r5, [sp, #0]
 800ce20:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce22:	ec41 0b19 	vmov	d9, r0, r1
 800ce26:	4649      	mov	r1, r9
 800ce28:	4640      	mov	r0, r8
 800ce2a:	f7f3 fe95 	bl	8000b58 <__aeabi_d2iz>
 800ce2e:	4606      	mov	r6, r0
 800ce30:	f7f3 fb78 	bl	8000524 <__aeabi_i2d>
 800ce34:	3630      	adds	r6, #48	; 0x30
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4640      	mov	r0, r8
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	f7f3 fa23 	bl	8000288 <__aeabi_dsub>
 800ce42:	f805 6b01 	strb.w	r6, [r5], #1
 800ce46:	9b02      	ldr	r3, [sp, #8]
 800ce48:	429d      	cmp	r5, r3
 800ce4a:	4680      	mov	r8, r0
 800ce4c:	4689      	mov	r9, r1
 800ce4e:	f04f 0200 	mov.w	r2, #0
 800ce52:	d124      	bne.n	800ce9e <_dtoa_r+0x62e>
 800ce54:	4b1b      	ldr	r3, [pc, #108]	; (800cec4 <_dtoa_r+0x654>)
 800ce56:	ec51 0b19 	vmov	r0, r1, d9
 800ce5a:	f7f3 fa17 	bl	800028c <__adddf3>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4640      	mov	r0, r8
 800ce64:	4649      	mov	r1, r9
 800ce66:	f7f3 fe57 	bl	8000b18 <__aeabi_dcmpgt>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d173      	bne.n	800cf56 <_dtoa_r+0x6e6>
 800ce6e:	ec53 2b19 	vmov	r2, r3, d9
 800ce72:	4914      	ldr	r1, [pc, #80]	; (800cec4 <_dtoa_r+0x654>)
 800ce74:	2000      	movs	r0, #0
 800ce76:	f7f3 fa07 	bl	8000288 <__aeabi_dsub>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	4640      	mov	r0, r8
 800ce80:	4649      	mov	r1, r9
 800ce82:	f7f3 fe2b 	bl	8000adc <__aeabi_dcmplt>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	f43f af2f 	beq.w	800ccea <_dtoa_r+0x47a>
 800ce8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ce8e:	1e6b      	subs	r3, r5, #1
 800ce90:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ce96:	2b30      	cmp	r3, #48	; 0x30
 800ce98:	d0f8      	beq.n	800ce8c <_dtoa_r+0x61c>
 800ce9a:	46bb      	mov	fp, r7
 800ce9c:	e04a      	b.n	800cf34 <_dtoa_r+0x6c4>
 800ce9e:	4b06      	ldr	r3, [pc, #24]	; (800ceb8 <_dtoa_r+0x648>)
 800cea0:	f7f3 fbaa 	bl	80005f8 <__aeabi_dmul>
 800cea4:	4680      	mov	r8, r0
 800cea6:	4689      	mov	r9, r1
 800cea8:	e7bd      	b.n	800ce26 <_dtoa_r+0x5b6>
 800ceaa:	bf00      	nop
 800ceac:	0800ea78 	.word	0x0800ea78
 800ceb0:	0800ea50 	.word	0x0800ea50
 800ceb4:	3ff00000 	.word	0x3ff00000
 800ceb8:	40240000 	.word	0x40240000
 800cebc:	401c0000 	.word	0x401c0000
 800cec0:	40140000 	.word	0x40140000
 800cec4:	3fe00000 	.word	0x3fe00000
 800cec8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cecc:	9d00      	ldr	r5, [sp, #0]
 800cece:	4642      	mov	r2, r8
 800ced0:	464b      	mov	r3, r9
 800ced2:	4630      	mov	r0, r6
 800ced4:	4639      	mov	r1, r7
 800ced6:	f7f3 fcb9 	bl	800084c <__aeabi_ddiv>
 800ceda:	f7f3 fe3d 	bl	8000b58 <__aeabi_d2iz>
 800cede:	9001      	str	r0, [sp, #4]
 800cee0:	f7f3 fb20 	bl	8000524 <__aeabi_i2d>
 800cee4:	4642      	mov	r2, r8
 800cee6:	464b      	mov	r3, r9
 800cee8:	f7f3 fb86 	bl	80005f8 <__aeabi_dmul>
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	4630      	mov	r0, r6
 800cef2:	4639      	mov	r1, r7
 800cef4:	f7f3 f9c8 	bl	8000288 <__aeabi_dsub>
 800cef8:	9e01      	ldr	r6, [sp, #4]
 800cefa:	9f04      	ldr	r7, [sp, #16]
 800cefc:	3630      	adds	r6, #48	; 0x30
 800cefe:	f805 6b01 	strb.w	r6, [r5], #1
 800cf02:	9e00      	ldr	r6, [sp, #0]
 800cf04:	1bae      	subs	r6, r5, r6
 800cf06:	42b7      	cmp	r7, r6
 800cf08:	4602      	mov	r2, r0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	d134      	bne.n	800cf78 <_dtoa_r+0x708>
 800cf0e:	f7f3 f9bd 	bl	800028c <__adddf3>
 800cf12:	4642      	mov	r2, r8
 800cf14:	464b      	mov	r3, r9
 800cf16:	4606      	mov	r6, r0
 800cf18:	460f      	mov	r7, r1
 800cf1a:	f7f3 fdfd 	bl	8000b18 <__aeabi_dcmpgt>
 800cf1e:	b9c8      	cbnz	r0, 800cf54 <_dtoa_r+0x6e4>
 800cf20:	4642      	mov	r2, r8
 800cf22:	464b      	mov	r3, r9
 800cf24:	4630      	mov	r0, r6
 800cf26:	4639      	mov	r1, r7
 800cf28:	f7f3 fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf2c:	b110      	cbz	r0, 800cf34 <_dtoa_r+0x6c4>
 800cf2e:	9b01      	ldr	r3, [sp, #4]
 800cf30:	07db      	lsls	r3, r3, #31
 800cf32:	d40f      	bmi.n	800cf54 <_dtoa_r+0x6e4>
 800cf34:	4651      	mov	r1, sl
 800cf36:	4620      	mov	r0, r4
 800cf38:	f000 fbcc 	bl	800d6d4 <_Bfree>
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf40:	702b      	strb	r3, [r5, #0]
 800cf42:	f10b 0301 	add.w	r3, fp, #1
 800cf46:	6013      	str	r3, [r2, #0]
 800cf48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f43f ace2 	beq.w	800c914 <_dtoa_r+0xa4>
 800cf50:	601d      	str	r5, [r3, #0]
 800cf52:	e4df      	b.n	800c914 <_dtoa_r+0xa4>
 800cf54:	465f      	mov	r7, fp
 800cf56:	462b      	mov	r3, r5
 800cf58:	461d      	mov	r5, r3
 800cf5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf5e:	2a39      	cmp	r2, #57	; 0x39
 800cf60:	d106      	bne.n	800cf70 <_dtoa_r+0x700>
 800cf62:	9a00      	ldr	r2, [sp, #0]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d1f7      	bne.n	800cf58 <_dtoa_r+0x6e8>
 800cf68:	9900      	ldr	r1, [sp, #0]
 800cf6a:	2230      	movs	r2, #48	; 0x30
 800cf6c:	3701      	adds	r7, #1
 800cf6e:	700a      	strb	r2, [r1, #0]
 800cf70:	781a      	ldrb	r2, [r3, #0]
 800cf72:	3201      	adds	r2, #1
 800cf74:	701a      	strb	r2, [r3, #0]
 800cf76:	e790      	b.n	800ce9a <_dtoa_r+0x62a>
 800cf78:	4ba3      	ldr	r3, [pc, #652]	; (800d208 <_dtoa_r+0x998>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f7f3 fb3c 	bl	80005f8 <__aeabi_dmul>
 800cf80:	2200      	movs	r2, #0
 800cf82:	2300      	movs	r3, #0
 800cf84:	4606      	mov	r6, r0
 800cf86:	460f      	mov	r7, r1
 800cf88:	f7f3 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d09e      	beq.n	800cece <_dtoa_r+0x65e>
 800cf90:	e7d0      	b.n	800cf34 <_dtoa_r+0x6c4>
 800cf92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf94:	2a00      	cmp	r2, #0
 800cf96:	f000 80ca 	beq.w	800d12e <_dtoa_r+0x8be>
 800cf9a:	9a07      	ldr	r2, [sp, #28]
 800cf9c:	2a01      	cmp	r2, #1
 800cf9e:	f300 80ad 	bgt.w	800d0fc <_dtoa_r+0x88c>
 800cfa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfa4:	2a00      	cmp	r2, #0
 800cfa6:	f000 80a5 	beq.w	800d0f4 <_dtoa_r+0x884>
 800cfaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cfae:	9e08      	ldr	r6, [sp, #32]
 800cfb0:	9d05      	ldr	r5, [sp, #20]
 800cfb2:	9a05      	ldr	r2, [sp, #20]
 800cfb4:	441a      	add	r2, r3
 800cfb6:	9205      	str	r2, [sp, #20]
 800cfb8:	9a06      	ldr	r2, [sp, #24]
 800cfba:	2101      	movs	r1, #1
 800cfbc:	441a      	add	r2, r3
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	9206      	str	r2, [sp, #24]
 800cfc2:	f000 fc3d 	bl	800d840 <__i2b>
 800cfc6:	4607      	mov	r7, r0
 800cfc8:	b165      	cbz	r5, 800cfe4 <_dtoa_r+0x774>
 800cfca:	9b06      	ldr	r3, [sp, #24]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	dd09      	ble.n	800cfe4 <_dtoa_r+0x774>
 800cfd0:	42ab      	cmp	r3, r5
 800cfd2:	9a05      	ldr	r2, [sp, #20]
 800cfd4:	bfa8      	it	ge
 800cfd6:	462b      	movge	r3, r5
 800cfd8:	1ad2      	subs	r2, r2, r3
 800cfda:	9205      	str	r2, [sp, #20]
 800cfdc:	9a06      	ldr	r2, [sp, #24]
 800cfde:	1aed      	subs	r5, r5, r3
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	9306      	str	r3, [sp, #24]
 800cfe4:	9b08      	ldr	r3, [sp, #32]
 800cfe6:	b1f3      	cbz	r3, 800d026 <_dtoa_r+0x7b6>
 800cfe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f000 80a3 	beq.w	800d136 <_dtoa_r+0x8c6>
 800cff0:	2e00      	cmp	r6, #0
 800cff2:	dd10      	ble.n	800d016 <_dtoa_r+0x7a6>
 800cff4:	4639      	mov	r1, r7
 800cff6:	4632      	mov	r2, r6
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 fce1 	bl	800d9c0 <__pow5mult>
 800cffe:	4652      	mov	r2, sl
 800d000:	4601      	mov	r1, r0
 800d002:	4607      	mov	r7, r0
 800d004:	4620      	mov	r0, r4
 800d006:	f000 fc31 	bl	800d86c <__multiply>
 800d00a:	4651      	mov	r1, sl
 800d00c:	4680      	mov	r8, r0
 800d00e:	4620      	mov	r0, r4
 800d010:	f000 fb60 	bl	800d6d4 <_Bfree>
 800d014:	46c2      	mov	sl, r8
 800d016:	9b08      	ldr	r3, [sp, #32]
 800d018:	1b9a      	subs	r2, r3, r6
 800d01a:	d004      	beq.n	800d026 <_dtoa_r+0x7b6>
 800d01c:	4651      	mov	r1, sl
 800d01e:	4620      	mov	r0, r4
 800d020:	f000 fcce 	bl	800d9c0 <__pow5mult>
 800d024:	4682      	mov	sl, r0
 800d026:	2101      	movs	r1, #1
 800d028:	4620      	mov	r0, r4
 800d02a:	f000 fc09 	bl	800d840 <__i2b>
 800d02e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d030:	2b00      	cmp	r3, #0
 800d032:	4606      	mov	r6, r0
 800d034:	f340 8081 	ble.w	800d13a <_dtoa_r+0x8ca>
 800d038:	461a      	mov	r2, r3
 800d03a:	4601      	mov	r1, r0
 800d03c:	4620      	mov	r0, r4
 800d03e:	f000 fcbf 	bl	800d9c0 <__pow5mult>
 800d042:	9b07      	ldr	r3, [sp, #28]
 800d044:	2b01      	cmp	r3, #1
 800d046:	4606      	mov	r6, r0
 800d048:	dd7a      	ble.n	800d140 <_dtoa_r+0x8d0>
 800d04a:	f04f 0800 	mov.w	r8, #0
 800d04e:	6933      	ldr	r3, [r6, #16]
 800d050:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d054:	6918      	ldr	r0, [r3, #16]
 800d056:	f000 fba5 	bl	800d7a4 <__hi0bits>
 800d05a:	f1c0 0020 	rsb	r0, r0, #32
 800d05e:	9b06      	ldr	r3, [sp, #24]
 800d060:	4418      	add	r0, r3
 800d062:	f010 001f 	ands.w	r0, r0, #31
 800d066:	f000 8094 	beq.w	800d192 <_dtoa_r+0x922>
 800d06a:	f1c0 0320 	rsb	r3, r0, #32
 800d06e:	2b04      	cmp	r3, #4
 800d070:	f340 8085 	ble.w	800d17e <_dtoa_r+0x90e>
 800d074:	9b05      	ldr	r3, [sp, #20]
 800d076:	f1c0 001c 	rsb	r0, r0, #28
 800d07a:	4403      	add	r3, r0
 800d07c:	9305      	str	r3, [sp, #20]
 800d07e:	9b06      	ldr	r3, [sp, #24]
 800d080:	4403      	add	r3, r0
 800d082:	4405      	add	r5, r0
 800d084:	9306      	str	r3, [sp, #24]
 800d086:	9b05      	ldr	r3, [sp, #20]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	dd05      	ble.n	800d098 <_dtoa_r+0x828>
 800d08c:	4651      	mov	r1, sl
 800d08e:	461a      	mov	r2, r3
 800d090:	4620      	mov	r0, r4
 800d092:	f000 fcef 	bl	800da74 <__lshift>
 800d096:	4682      	mov	sl, r0
 800d098:	9b06      	ldr	r3, [sp, #24]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	dd05      	ble.n	800d0aa <_dtoa_r+0x83a>
 800d09e:	4631      	mov	r1, r6
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f000 fce6 	bl	800da74 <__lshift>
 800d0a8:	4606      	mov	r6, r0
 800d0aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d072      	beq.n	800d196 <_dtoa_r+0x926>
 800d0b0:	4631      	mov	r1, r6
 800d0b2:	4650      	mov	r0, sl
 800d0b4:	f000 fd4a 	bl	800db4c <__mcmp>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	da6c      	bge.n	800d196 <_dtoa_r+0x926>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	4651      	mov	r1, sl
 800d0c0:	220a      	movs	r2, #10
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f000 fb28 	bl	800d718 <__multadd>
 800d0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d0ce:	4682      	mov	sl, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f000 81b0 	beq.w	800d436 <_dtoa_r+0xbc6>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	4639      	mov	r1, r7
 800d0da:	220a      	movs	r2, #10
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f000 fb1b 	bl	800d718 <__multadd>
 800d0e2:	9b01      	ldr	r3, [sp, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	4607      	mov	r7, r0
 800d0e8:	f300 8096 	bgt.w	800d218 <_dtoa_r+0x9a8>
 800d0ec:	9b07      	ldr	r3, [sp, #28]
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	dc59      	bgt.n	800d1a6 <_dtoa_r+0x936>
 800d0f2:	e091      	b.n	800d218 <_dtoa_r+0x9a8>
 800d0f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d0fa:	e758      	b.n	800cfae <_dtoa_r+0x73e>
 800d0fc:	9b04      	ldr	r3, [sp, #16]
 800d0fe:	1e5e      	subs	r6, r3, #1
 800d100:	9b08      	ldr	r3, [sp, #32]
 800d102:	42b3      	cmp	r3, r6
 800d104:	bfbf      	itttt	lt
 800d106:	9b08      	ldrlt	r3, [sp, #32]
 800d108:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d10a:	9608      	strlt	r6, [sp, #32]
 800d10c:	1af3      	sublt	r3, r6, r3
 800d10e:	bfb4      	ite	lt
 800d110:	18d2      	addlt	r2, r2, r3
 800d112:	1b9e      	subge	r6, r3, r6
 800d114:	9b04      	ldr	r3, [sp, #16]
 800d116:	bfbc      	itt	lt
 800d118:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d11a:	2600      	movlt	r6, #0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	bfb7      	itett	lt
 800d120:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d124:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d128:	1a9d      	sublt	r5, r3, r2
 800d12a:	2300      	movlt	r3, #0
 800d12c:	e741      	b.n	800cfb2 <_dtoa_r+0x742>
 800d12e:	9e08      	ldr	r6, [sp, #32]
 800d130:	9d05      	ldr	r5, [sp, #20]
 800d132:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d134:	e748      	b.n	800cfc8 <_dtoa_r+0x758>
 800d136:	9a08      	ldr	r2, [sp, #32]
 800d138:	e770      	b.n	800d01c <_dtoa_r+0x7ac>
 800d13a:	9b07      	ldr	r3, [sp, #28]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	dc19      	bgt.n	800d174 <_dtoa_r+0x904>
 800d140:	9b02      	ldr	r3, [sp, #8]
 800d142:	b9bb      	cbnz	r3, 800d174 <_dtoa_r+0x904>
 800d144:	9b03      	ldr	r3, [sp, #12]
 800d146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d14a:	b99b      	cbnz	r3, 800d174 <_dtoa_r+0x904>
 800d14c:	9b03      	ldr	r3, [sp, #12]
 800d14e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d152:	0d1b      	lsrs	r3, r3, #20
 800d154:	051b      	lsls	r3, r3, #20
 800d156:	b183      	cbz	r3, 800d17a <_dtoa_r+0x90a>
 800d158:	9b05      	ldr	r3, [sp, #20]
 800d15a:	3301      	adds	r3, #1
 800d15c:	9305      	str	r3, [sp, #20]
 800d15e:	9b06      	ldr	r3, [sp, #24]
 800d160:	3301      	adds	r3, #1
 800d162:	9306      	str	r3, [sp, #24]
 800d164:	f04f 0801 	mov.w	r8, #1
 800d168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f47f af6f 	bne.w	800d04e <_dtoa_r+0x7de>
 800d170:	2001      	movs	r0, #1
 800d172:	e774      	b.n	800d05e <_dtoa_r+0x7ee>
 800d174:	f04f 0800 	mov.w	r8, #0
 800d178:	e7f6      	b.n	800d168 <_dtoa_r+0x8f8>
 800d17a:	4698      	mov	r8, r3
 800d17c:	e7f4      	b.n	800d168 <_dtoa_r+0x8f8>
 800d17e:	d082      	beq.n	800d086 <_dtoa_r+0x816>
 800d180:	9a05      	ldr	r2, [sp, #20]
 800d182:	331c      	adds	r3, #28
 800d184:	441a      	add	r2, r3
 800d186:	9205      	str	r2, [sp, #20]
 800d188:	9a06      	ldr	r2, [sp, #24]
 800d18a:	441a      	add	r2, r3
 800d18c:	441d      	add	r5, r3
 800d18e:	9206      	str	r2, [sp, #24]
 800d190:	e779      	b.n	800d086 <_dtoa_r+0x816>
 800d192:	4603      	mov	r3, r0
 800d194:	e7f4      	b.n	800d180 <_dtoa_r+0x910>
 800d196:	9b04      	ldr	r3, [sp, #16]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	dc37      	bgt.n	800d20c <_dtoa_r+0x99c>
 800d19c:	9b07      	ldr	r3, [sp, #28]
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	dd34      	ble.n	800d20c <_dtoa_r+0x99c>
 800d1a2:	9b04      	ldr	r3, [sp, #16]
 800d1a4:	9301      	str	r3, [sp, #4]
 800d1a6:	9b01      	ldr	r3, [sp, #4]
 800d1a8:	b963      	cbnz	r3, 800d1c4 <_dtoa_r+0x954>
 800d1aa:	4631      	mov	r1, r6
 800d1ac:	2205      	movs	r2, #5
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f000 fab2 	bl	800d718 <__multadd>
 800d1b4:	4601      	mov	r1, r0
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	4650      	mov	r0, sl
 800d1ba:	f000 fcc7 	bl	800db4c <__mcmp>
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	f73f adbb 	bgt.w	800cd3a <_dtoa_r+0x4ca>
 800d1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c6:	9d00      	ldr	r5, [sp, #0]
 800d1c8:	ea6f 0b03 	mvn.w	fp, r3
 800d1cc:	f04f 0800 	mov.w	r8, #0
 800d1d0:	4631      	mov	r1, r6
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f000 fa7e 	bl	800d6d4 <_Bfree>
 800d1d8:	2f00      	cmp	r7, #0
 800d1da:	f43f aeab 	beq.w	800cf34 <_dtoa_r+0x6c4>
 800d1de:	f1b8 0f00 	cmp.w	r8, #0
 800d1e2:	d005      	beq.n	800d1f0 <_dtoa_r+0x980>
 800d1e4:	45b8      	cmp	r8, r7
 800d1e6:	d003      	beq.n	800d1f0 <_dtoa_r+0x980>
 800d1e8:	4641      	mov	r1, r8
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f000 fa72 	bl	800d6d4 <_Bfree>
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f000 fa6e 	bl	800d6d4 <_Bfree>
 800d1f8:	e69c      	b.n	800cf34 <_dtoa_r+0x6c4>
 800d1fa:	2600      	movs	r6, #0
 800d1fc:	4637      	mov	r7, r6
 800d1fe:	e7e1      	b.n	800d1c4 <_dtoa_r+0x954>
 800d200:	46bb      	mov	fp, r7
 800d202:	4637      	mov	r7, r6
 800d204:	e599      	b.n	800cd3a <_dtoa_r+0x4ca>
 800d206:	bf00      	nop
 800d208:	40240000 	.word	0x40240000
 800d20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f000 80c8 	beq.w	800d3a4 <_dtoa_r+0xb34>
 800d214:	9b04      	ldr	r3, [sp, #16]
 800d216:	9301      	str	r3, [sp, #4]
 800d218:	2d00      	cmp	r5, #0
 800d21a:	dd05      	ble.n	800d228 <_dtoa_r+0x9b8>
 800d21c:	4639      	mov	r1, r7
 800d21e:	462a      	mov	r2, r5
 800d220:	4620      	mov	r0, r4
 800d222:	f000 fc27 	bl	800da74 <__lshift>
 800d226:	4607      	mov	r7, r0
 800d228:	f1b8 0f00 	cmp.w	r8, #0
 800d22c:	d05b      	beq.n	800d2e6 <_dtoa_r+0xa76>
 800d22e:	6879      	ldr	r1, [r7, #4]
 800d230:	4620      	mov	r0, r4
 800d232:	f000 fa0f 	bl	800d654 <_Balloc>
 800d236:	4605      	mov	r5, r0
 800d238:	b928      	cbnz	r0, 800d246 <_dtoa_r+0x9d6>
 800d23a:	4b83      	ldr	r3, [pc, #524]	; (800d448 <_dtoa_r+0xbd8>)
 800d23c:	4602      	mov	r2, r0
 800d23e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d242:	f7ff bb2e 	b.w	800c8a2 <_dtoa_r+0x32>
 800d246:	693a      	ldr	r2, [r7, #16]
 800d248:	3202      	adds	r2, #2
 800d24a:	0092      	lsls	r2, r2, #2
 800d24c:	f107 010c 	add.w	r1, r7, #12
 800d250:	300c      	adds	r0, #12
 800d252:	f000 ffab 	bl	800e1ac <memcpy>
 800d256:	2201      	movs	r2, #1
 800d258:	4629      	mov	r1, r5
 800d25a:	4620      	mov	r0, r4
 800d25c:	f000 fc0a 	bl	800da74 <__lshift>
 800d260:	9b00      	ldr	r3, [sp, #0]
 800d262:	3301      	adds	r3, #1
 800d264:	9304      	str	r3, [sp, #16]
 800d266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d26a:	4413      	add	r3, r2
 800d26c:	9308      	str	r3, [sp, #32]
 800d26e:	9b02      	ldr	r3, [sp, #8]
 800d270:	f003 0301 	and.w	r3, r3, #1
 800d274:	46b8      	mov	r8, r7
 800d276:	9306      	str	r3, [sp, #24]
 800d278:	4607      	mov	r7, r0
 800d27a:	9b04      	ldr	r3, [sp, #16]
 800d27c:	4631      	mov	r1, r6
 800d27e:	3b01      	subs	r3, #1
 800d280:	4650      	mov	r0, sl
 800d282:	9301      	str	r3, [sp, #4]
 800d284:	f7ff fa69 	bl	800c75a <quorem>
 800d288:	4641      	mov	r1, r8
 800d28a:	9002      	str	r0, [sp, #8]
 800d28c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d290:	4650      	mov	r0, sl
 800d292:	f000 fc5b 	bl	800db4c <__mcmp>
 800d296:	463a      	mov	r2, r7
 800d298:	9005      	str	r0, [sp, #20]
 800d29a:	4631      	mov	r1, r6
 800d29c:	4620      	mov	r0, r4
 800d29e:	f000 fc71 	bl	800db84 <__mdiff>
 800d2a2:	68c2      	ldr	r2, [r0, #12]
 800d2a4:	4605      	mov	r5, r0
 800d2a6:	bb02      	cbnz	r2, 800d2ea <_dtoa_r+0xa7a>
 800d2a8:	4601      	mov	r1, r0
 800d2aa:	4650      	mov	r0, sl
 800d2ac:	f000 fc4e 	bl	800db4c <__mcmp>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	9209      	str	r2, [sp, #36]	; 0x24
 800d2b8:	f000 fa0c 	bl	800d6d4 <_Bfree>
 800d2bc:	9b07      	ldr	r3, [sp, #28]
 800d2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2c0:	9d04      	ldr	r5, [sp, #16]
 800d2c2:	ea43 0102 	orr.w	r1, r3, r2
 800d2c6:	9b06      	ldr	r3, [sp, #24]
 800d2c8:	4319      	orrs	r1, r3
 800d2ca:	d110      	bne.n	800d2ee <_dtoa_r+0xa7e>
 800d2cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d2d0:	d029      	beq.n	800d326 <_dtoa_r+0xab6>
 800d2d2:	9b05      	ldr	r3, [sp, #20]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	dd02      	ble.n	800d2de <_dtoa_r+0xa6e>
 800d2d8:	9b02      	ldr	r3, [sp, #8]
 800d2da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d2de:	9b01      	ldr	r3, [sp, #4]
 800d2e0:	f883 9000 	strb.w	r9, [r3]
 800d2e4:	e774      	b.n	800d1d0 <_dtoa_r+0x960>
 800d2e6:	4638      	mov	r0, r7
 800d2e8:	e7ba      	b.n	800d260 <_dtoa_r+0x9f0>
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	e7e1      	b.n	800d2b2 <_dtoa_r+0xa42>
 800d2ee:	9b05      	ldr	r3, [sp, #20]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	db04      	blt.n	800d2fe <_dtoa_r+0xa8e>
 800d2f4:	9907      	ldr	r1, [sp, #28]
 800d2f6:	430b      	orrs	r3, r1
 800d2f8:	9906      	ldr	r1, [sp, #24]
 800d2fa:	430b      	orrs	r3, r1
 800d2fc:	d120      	bne.n	800d340 <_dtoa_r+0xad0>
 800d2fe:	2a00      	cmp	r2, #0
 800d300:	dded      	ble.n	800d2de <_dtoa_r+0xa6e>
 800d302:	4651      	mov	r1, sl
 800d304:	2201      	movs	r2, #1
 800d306:	4620      	mov	r0, r4
 800d308:	f000 fbb4 	bl	800da74 <__lshift>
 800d30c:	4631      	mov	r1, r6
 800d30e:	4682      	mov	sl, r0
 800d310:	f000 fc1c 	bl	800db4c <__mcmp>
 800d314:	2800      	cmp	r0, #0
 800d316:	dc03      	bgt.n	800d320 <_dtoa_r+0xab0>
 800d318:	d1e1      	bne.n	800d2de <_dtoa_r+0xa6e>
 800d31a:	f019 0f01 	tst.w	r9, #1
 800d31e:	d0de      	beq.n	800d2de <_dtoa_r+0xa6e>
 800d320:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d324:	d1d8      	bne.n	800d2d8 <_dtoa_r+0xa68>
 800d326:	9a01      	ldr	r2, [sp, #4]
 800d328:	2339      	movs	r3, #57	; 0x39
 800d32a:	7013      	strb	r3, [r2, #0]
 800d32c:	462b      	mov	r3, r5
 800d32e:	461d      	mov	r5, r3
 800d330:	3b01      	subs	r3, #1
 800d332:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d336:	2a39      	cmp	r2, #57	; 0x39
 800d338:	d06c      	beq.n	800d414 <_dtoa_r+0xba4>
 800d33a:	3201      	adds	r2, #1
 800d33c:	701a      	strb	r2, [r3, #0]
 800d33e:	e747      	b.n	800d1d0 <_dtoa_r+0x960>
 800d340:	2a00      	cmp	r2, #0
 800d342:	dd07      	ble.n	800d354 <_dtoa_r+0xae4>
 800d344:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d348:	d0ed      	beq.n	800d326 <_dtoa_r+0xab6>
 800d34a:	9a01      	ldr	r2, [sp, #4]
 800d34c:	f109 0301 	add.w	r3, r9, #1
 800d350:	7013      	strb	r3, [r2, #0]
 800d352:	e73d      	b.n	800d1d0 <_dtoa_r+0x960>
 800d354:	9b04      	ldr	r3, [sp, #16]
 800d356:	9a08      	ldr	r2, [sp, #32]
 800d358:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d043      	beq.n	800d3e8 <_dtoa_r+0xb78>
 800d360:	4651      	mov	r1, sl
 800d362:	2300      	movs	r3, #0
 800d364:	220a      	movs	r2, #10
 800d366:	4620      	mov	r0, r4
 800d368:	f000 f9d6 	bl	800d718 <__multadd>
 800d36c:	45b8      	cmp	r8, r7
 800d36e:	4682      	mov	sl, r0
 800d370:	f04f 0300 	mov.w	r3, #0
 800d374:	f04f 020a 	mov.w	r2, #10
 800d378:	4641      	mov	r1, r8
 800d37a:	4620      	mov	r0, r4
 800d37c:	d107      	bne.n	800d38e <_dtoa_r+0xb1e>
 800d37e:	f000 f9cb 	bl	800d718 <__multadd>
 800d382:	4680      	mov	r8, r0
 800d384:	4607      	mov	r7, r0
 800d386:	9b04      	ldr	r3, [sp, #16]
 800d388:	3301      	adds	r3, #1
 800d38a:	9304      	str	r3, [sp, #16]
 800d38c:	e775      	b.n	800d27a <_dtoa_r+0xa0a>
 800d38e:	f000 f9c3 	bl	800d718 <__multadd>
 800d392:	4639      	mov	r1, r7
 800d394:	4680      	mov	r8, r0
 800d396:	2300      	movs	r3, #0
 800d398:	220a      	movs	r2, #10
 800d39a:	4620      	mov	r0, r4
 800d39c:	f000 f9bc 	bl	800d718 <__multadd>
 800d3a0:	4607      	mov	r7, r0
 800d3a2:	e7f0      	b.n	800d386 <_dtoa_r+0xb16>
 800d3a4:	9b04      	ldr	r3, [sp, #16]
 800d3a6:	9301      	str	r3, [sp, #4]
 800d3a8:	9d00      	ldr	r5, [sp, #0]
 800d3aa:	4631      	mov	r1, r6
 800d3ac:	4650      	mov	r0, sl
 800d3ae:	f7ff f9d4 	bl	800c75a <quorem>
 800d3b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d3b6:	9b00      	ldr	r3, [sp, #0]
 800d3b8:	f805 9b01 	strb.w	r9, [r5], #1
 800d3bc:	1aea      	subs	r2, r5, r3
 800d3be:	9b01      	ldr	r3, [sp, #4]
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	dd07      	ble.n	800d3d4 <_dtoa_r+0xb64>
 800d3c4:	4651      	mov	r1, sl
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	220a      	movs	r2, #10
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f000 f9a4 	bl	800d718 <__multadd>
 800d3d0:	4682      	mov	sl, r0
 800d3d2:	e7ea      	b.n	800d3aa <_dtoa_r+0xb3a>
 800d3d4:	9b01      	ldr	r3, [sp, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	bfc8      	it	gt
 800d3da:	461d      	movgt	r5, r3
 800d3dc:	9b00      	ldr	r3, [sp, #0]
 800d3de:	bfd8      	it	le
 800d3e0:	2501      	movle	r5, #1
 800d3e2:	441d      	add	r5, r3
 800d3e4:	f04f 0800 	mov.w	r8, #0
 800d3e8:	4651      	mov	r1, sl
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f000 fb41 	bl	800da74 <__lshift>
 800d3f2:	4631      	mov	r1, r6
 800d3f4:	4682      	mov	sl, r0
 800d3f6:	f000 fba9 	bl	800db4c <__mcmp>
 800d3fa:	2800      	cmp	r0, #0
 800d3fc:	dc96      	bgt.n	800d32c <_dtoa_r+0xabc>
 800d3fe:	d102      	bne.n	800d406 <_dtoa_r+0xb96>
 800d400:	f019 0f01 	tst.w	r9, #1
 800d404:	d192      	bne.n	800d32c <_dtoa_r+0xabc>
 800d406:	462b      	mov	r3, r5
 800d408:	461d      	mov	r5, r3
 800d40a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d40e:	2a30      	cmp	r2, #48	; 0x30
 800d410:	d0fa      	beq.n	800d408 <_dtoa_r+0xb98>
 800d412:	e6dd      	b.n	800d1d0 <_dtoa_r+0x960>
 800d414:	9a00      	ldr	r2, [sp, #0]
 800d416:	429a      	cmp	r2, r3
 800d418:	d189      	bne.n	800d32e <_dtoa_r+0xabe>
 800d41a:	f10b 0b01 	add.w	fp, fp, #1
 800d41e:	2331      	movs	r3, #49	; 0x31
 800d420:	e796      	b.n	800d350 <_dtoa_r+0xae0>
 800d422:	4b0a      	ldr	r3, [pc, #40]	; (800d44c <_dtoa_r+0xbdc>)
 800d424:	f7ff ba99 	b.w	800c95a <_dtoa_r+0xea>
 800d428:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f47f aa6d 	bne.w	800c90a <_dtoa_r+0x9a>
 800d430:	4b07      	ldr	r3, [pc, #28]	; (800d450 <_dtoa_r+0xbe0>)
 800d432:	f7ff ba92 	b.w	800c95a <_dtoa_r+0xea>
 800d436:	9b01      	ldr	r3, [sp, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	dcb5      	bgt.n	800d3a8 <_dtoa_r+0xb38>
 800d43c:	9b07      	ldr	r3, [sp, #28]
 800d43e:	2b02      	cmp	r3, #2
 800d440:	f73f aeb1 	bgt.w	800d1a6 <_dtoa_r+0x936>
 800d444:	e7b0      	b.n	800d3a8 <_dtoa_r+0xb38>
 800d446:	bf00      	nop
 800d448:	0800e9e0 	.word	0x0800e9e0
 800d44c:	0800e940 	.word	0x0800e940
 800d450:	0800e964 	.word	0x0800e964

0800d454 <_free_r>:
 800d454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d456:	2900      	cmp	r1, #0
 800d458:	d044      	beq.n	800d4e4 <_free_r+0x90>
 800d45a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d45e:	9001      	str	r0, [sp, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	f1a1 0404 	sub.w	r4, r1, #4
 800d466:	bfb8      	it	lt
 800d468:	18e4      	addlt	r4, r4, r3
 800d46a:	f000 f8e7 	bl	800d63c <__malloc_lock>
 800d46e:	4a1e      	ldr	r2, [pc, #120]	; (800d4e8 <_free_r+0x94>)
 800d470:	9801      	ldr	r0, [sp, #4]
 800d472:	6813      	ldr	r3, [r2, #0]
 800d474:	b933      	cbnz	r3, 800d484 <_free_r+0x30>
 800d476:	6063      	str	r3, [r4, #4]
 800d478:	6014      	str	r4, [r2, #0]
 800d47a:	b003      	add	sp, #12
 800d47c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d480:	f000 b8e2 	b.w	800d648 <__malloc_unlock>
 800d484:	42a3      	cmp	r3, r4
 800d486:	d908      	bls.n	800d49a <_free_r+0x46>
 800d488:	6825      	ldr	r5, [r4, #0]
 800d48a:	1961      	adds	r1, r4, r5
 800d48c:	428b      	cmp	r3, r1
 800d48e:	bf01      	itttt	eq
 800d490:	6819      	ldreq	r1, [r3, #0]
 800d492:	685b      	ldreq	r3, [r3, #4]
 800d494:	1949      	addeq	r1, r1, r5
 800d496:	6021      	streq	r1, [r4, #0]
 800d498:	e7ed      	b.n	800d476 <_free_r+0x22>
 800d49a:	461a      	mov	r2, r3
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	b10b      	cbz	r3, 800d4a4 <_free_r+0x50>
 800d4a0:	42a3      	cmp	r3, r4
 800d4a2:	d9fa      	bls.n	800d49a <_free_r+0x46>
 800d4a4:	6811      	ldr	r1, [r2, #0]
 800d4a6:	1855      	adds	r5, r2, r1
 800d4a8:	42a5      	cmp	r5, r4
 800d4aa:	d10b      	bne.n	800d4c4 <_free_r+0x70>
 800d4ac:	6824      	ldr	r4, [r4, #0]
 800d4ae:	4421      	add	r1, r4
 800d4b0:	1854      	adds	r4, r2, r1
 800d4b2:	42a3      	cmp	r3, r4
 800d4b4:	6011      	str	r1, [r2, #0]
 800d4b6:	d1e0      	bne.n	800d47a <_free_r+0x26>
 800d4b8:	681c      	ldr	r4, [r3, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	6053      	str	r3, [r2, #4]
 800d4be:	440c      	add	r4, r1
 800d4c0:	6014      	str	r4, [r2, #0]
 800d4c2:	e7da      	b.n	800d47a <_free_r+0x26>
 800d4c4:	d902      	bls.n	800d4cc <_free_r+0x78>
 800d4c6:	230c      	movs	r3, #12
 800d4c8:	6003      	str	r3, [r0, #0]
 800d4ca:	e7d6      	b.n	800d47a <_free_r+0x26>
 800d4cc:	6825      	ldr	r5, [r4, #0]
 800d4ce:	1961      	adds	r1, r4, r5
 800d4d0:	428b      	cmp	r3, r1
 800d4d2:	bf04      	itt	eq
 800d4d4:	6819      	ldreq	r1, [r3, #0]
 800d4d6:	685b      	ldreq	r3, [r3, #4]
 800d4d8:	6063      	str	r3, [r4, #4]
 800d4da:	bf04      	itt	eq
 800d4dc:	1949      	addeq	r1, r1, r5
 800d4de:	6021      	streq	r1, [r4, #0]
 800d4e0:	6054      	str	r4, [r2, #4]
 800d4e2:	e7ca      	b.n	800d47a <_free_r+0x26>
 800d4e4:	b003      	add	sp, #12
 800d4e6:	bd30      	pop	{r4, r5, pc}
 800d4e8:	200017c0 	.word	0x200017c0

0800d4ec <malloc>:
 800d4ec:	4b02      	ldr	r3, [pc, #8]	; (800d4f8 <malloc+0xc>)
 800d4ee:	4601      	mov	r1, r0
 800d4f0:	6818      	ldr	r0, [r3, #0]
 800d4f2:	f000 b823 	b.w	800d53c <_malloc_r>
 800d4f6:	bf00      	nop
 800d4f8:	200001d4 	.word	0x200001d4

0800d4fc <sbrk_aligned>:
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	4e0e      	ldr	r6, [pc, #56]	; (800d538 <sbrk_aligned+0x3c>)
 800d500:	460c      	mov	r4, r1
 800d502:	6831      	ldr	r1, [r6, #0]
 800d504:	4605      	mov	r5, r0
 800d506:	b911      	cbnz	r1, 800d50e <sbrk_aligned+0x12>
 800d508:	f000 fe40 	bl	800e18c <_sbrk_r>
 800d50c:	6030      	str	r0, [r6, #0]
 800d50e:	4621      	mov	r1, r4
 800d510:	4628      	mov	r0, r5
 800d512:	f000 fe3b 	bl	800e18c <_sbrk_r>
 800d516:	1c43      	adds	r3, r0, #1
 800d518:	d00a      	beq.n	800d530 <sbrk_aligned+0x34>
 800d51a:	1cc4      	adds	r4, r0, #3
 800d51c:	f024 0403 	bic.w	r4, r4, #3
 800d520:	42a0      	cmp	r0, r4
 800d522:	d007      	beq.n	800d534 <sbrk_aligned+0x38>
 800d524:	1a21      	subs	r1, r4, r0
 800d526:	4628      	mov	r0, r5
 800d528:	f000 fe30 	bl	800e18c <_sbrk_r>
 800d52c:	3001      	adds	r0, #1
 800d52e:	d101      	bne.n	800d534 <sbrk_aligned+0x38>
 800d530:	f04f 34ff 	mov.w	r4, #4294967295
 800d534:	4620      	mov	r0, r4
 800d536:	bd70      	pop	{r4, r5, r6, pc}
 800d538:	200017c4 	.word	0x200017c4

0800d53c <_malloc_r>:
 800d53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d540:	1ccd      	adds	r5, r1, #3
 800d542:	f025 0503 	bic.w	r5, r5, #3
 800d546:	3508      	adds	r5, #8
 800d548:	2d0c      	cmp	r5, #12
 800d54a:	bf38      	it	cc
 800d54c:	250c      	movcc	r5, #12
 800d54e:	2d00      	cmp	r5, #0
 800d550:	4607      	mov	r7, r0
 800d552:	db01      	blt.n	800d558 <_malloc_r+0x1c>
 800d554:	42a9      	cmp	r1, r5
 800d556:	d905      	bls.n	800d564 <_malloc_r+0x28>
 800d558:	230c      	movs	r3, #12
 800d55a:	603b      	str	r3, [r7, #0]
 800d55c:	2600      	movs	r6, #0
 800d55e:	4630      	mov	r0, r6
 800d560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d564:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d638 <_malloc_r+0xfc>
 800d568:	f000 f868 	bl	800d63c <__malloc_lock>
 800d56c:	f8d8 3000 	ldr.w	r3, [r8]
 800d570:	461c      	mov	r4, r3
 800d572:	bb5c      	cbnz	r4, 800d5cc <_malloc_r+0x90>
 800d574:	4629      	mov	r1, r5
 800d576:	4638      	mov	r0, r7
 800d578:	f7ff ffc0 	bl	800d4fc <sbrk_aligned>
 800d57c:	1c43      	adds	r3, r0, #1
 800d57e:	4604      	mov	r4, r0
 800d580:	d155      	bne.n	800d62e <_malloc_r+0xf2>
 800d582:	f8d8 4000 	ldr.w	r4, [r8]
 800d586:	4626      	mov	r6, r4
 800d588:	2e00      	cmp	r6, #0
 800d58a:	d145      	bne.n	800d618 <_malloc_r+0xdc>
 800d58c:	2c00      	cmp	r4, #0
 800d58e:	d048      	beq.n	800d622 <_malloc_r+0xe6>
 800d590:	6823      	ldr	r3, [r4, #0]
 800d592:	4631      	mov	r1, r6
 800d594:	4638      	mov	r0, r7
 800d596:	eb04 0903 	add.w	r9, r4, r3
 800d59a:	f000 fdf7 	bl	800e18c <_sbrk_r>
 800d59e:	4581      	cmp	r9, r0
 800d5a0:	d13f      	bne.n	800d622 <_malloc_r+0xe6>
 800d5a2:	6821      	ldr	r1, [r4, #0]
 800d5a4:	1a6d      	subs	r5, r5, r1
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	4638      	mov	r0, r7
 800d5aa:	f7ff ffa7 	bl	800d4fc <sbrk_aligned>
 800d5ae:	3001      	adds	r0, #1
 800d5b0:	d037      	beq.n	800d622 <_malloc_r+0xe6>
 800d5b2:	6823      	ldr	r3, [r4, #0]
 800d5b4:	442b      	add	r3, r5
 800d5b6:	6023      	str	r3, [r4, #0]
 800d5b8:	f8d8 3000 	ldr.w	r3, [r8]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d038      	beq.n	800d632 <_malloc_r+0xf6>
 800d5c0:	685a      	ldr	r2, [r3, #4]
 800d5c2:	42a2      	cmp	r2, r4
 800d5c4:	d12b      	bne.n	800d61e <_malloc_r+0xe2>
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	605a      	str	r2, [r3, #4]
 800d5ca:	e00f      	b.n	800d5ec <_malloc_r+0xb0>
 800d5cc:	6822      	ldr	r2, [r4, #0]
 800d5ce:	1b52      	subs	r2, r2, r5
 800d5d0:	d41f      	bmi.n	800d612 <_malloc_r+0xd6>
 800d5d2:	2a0b      	cmp	r2, #11
 800d5d4:	d917      	bls.n	800d606 <_malloc_r+0xca>
 800d5d6:	1961      	adds	r1, r4, r5
 800d5d8:	42a3      	cmp	r3, r4
 800d5da:	6025      	str	r5, [r4, #0]
 800d5dc:	bf18      	it	ne
 800d5de:	6059      	strne	r1, [r3, #4]
 800d5e0:	6863      	ldr	r3, [r4, #4]
 800d5e2:	bf08      	it	eq
 800d5e4:	f8c8 1000 	streq.w	r1, [r8]
 800d5e8:	5162      	str	r2, [r4, r5]
 800d5ea:	604b      	str	r3, [r1, #4]
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	f104 060b 	add.w	r6, r4, #11
 800d5f2:	f000 f829 	bl	800d648 <__malloc_unlock>
 800d5f6:	f026 0607 	bic.w	r6, r6, #7
 800d5fa:	1d23      	adds	r3, r4, #4
 800d5fc:	1af2      	subs	r2, r6, r3
 800d5fe:	d0ae      	beq.n	800d55e <_malloc_r+0x22>
 800d600:	1b9b      	subs	r3, r3, r6
 800d602:	50a3      	str	r3, [r4, r2]
 800d604:	e7ab      	b.n	800d55e <_malloc_r+0x22>
 800d606:	42a3      	cmp	r3, r4
 800d608:	6862      	ldr	r2, [r4, #4]
 800d60a:	d1dd      	bne.n	800d5c8 <_malloc_r+0x8c>
 800d60c:	f8c8 2000 	str.w	r2, [r8]
 800d610:	e7ec      	b.n	800d5ec <_malloc_r+0xb0>
 800d612:	4623      	mov	r3, r4
 800d614:	6864      	ldr	r4, [r4, #4]
 800d616:	e7ac      	b.n	800d572 <_malloc_r+0x36>
 800d618:	4634      	mov	r4, r6
 800d61a:	6876      	ldr	r6, [r6, #4]
 800d61c:	e7b4      	b.n	800d588 <_malloc_r+0x4c>
 800d61e:	4613      	mov	r3, r2
 800d620:	e7cc      	b.n	800d5bc <_malloc_r+0x80>
 800d622:	230c      	movs	r3, #12
 800d624:	603b      	str	r3, [r7, #0]
 800d626:	4638      	mov	r0, r7
 800d628:	f000 f80e 	bl	800d648 <__malloc_unlock>
 800d62c:	e797      	b.n	800d55e <_malloc_r+0x22>
 800d62e:	6025      	str	r5, [r4, #0]
 800d630:	e7dc      	b.n	800d5ec <_malloc_r+0xb0>
 800d632:	605b      	str	r3, [r3, #4]
 800d634:	deff      	udf	#255	; 0xff
 800d636:	bf00      	nop
 800d638:	200017c0 	.word	0x200017c0

0800d63c <__malloc_lock>:
 800d63c:	4801      	ldr	r0, [pc, #4]	; (800d644 <__malloc_lock+0x8>)
 800d63e:	f7ff b88a 	b.w	800c756 <__retarget_lock_acquire_recursive>
 800d642:	bf00      	nop
 800d644:	200017bc 	.word	0x200017bc

0800d648 <__malloc_unlock>:
 800d648:	4801      	ldr	r0, [pc, #4]	; (800d650 <__malloc_unlock+0x8>)
 800d64a:	f7ff b885 	b.w	800c758 <__retarget_lock_release_recursive>
 800d64e:	bf00      	nop
 800d650:	200017bc 	.word	0x200017bc

0800d654 <_Balloc>:
 800d654:	b570      	push	{r4, r5, r6, lr}
 800d656:	69c6      	ldr	r6, [r0, #28]
 800d658:	4604      	mov	r4, r0
 800d65a:	460d      	mov	r5, r1
 800d65c:	b976      	cbnz	r6, 800d67c <_Balloc+0x28>
 800d65e:	2010      	movs	r0, #16
 800d660:	f7ff ff44 	bl	800d4ec <malloc>
 800d664:	4602      	mov	r2, r0
 800d666:	61e0      	str	r0, [r4, #28]
 800d668:	b920      	cbnz	r0, 800d674 <_Balloc+0x20>
 800d66a:	4b18      	ldr	r3, [pc, #96]	; (800d6cc <_Balloc+0x78>)
 800d66c:	4818      	ldr	r0, [pc, #96]	; (800d6d0 <_Balloc+0x7c>)
 800d66e:	216b      	movs	r1, #107	; 0x6b
 800d670:	f000 fdaa 	bl	800e1c8 <__assert_func>
 800d674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d678:	6006      	str	r6, [r0, #0]
 800d67a:	60c6      	str	r6, [r0, #12]
 800d67c:	69e6      	ldr	r6, [r4, #28]
 800d67e:	68f3      	ldr	r3, [r6, #12]
 800d680:	b183      	cbz	r3, 800d6a4 <_Balloc+0x50>
 800d682:	69e3      	ldr	r3, [r4, #28]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d68a:	b9b8      	cbnz	r0, 800d6bc <_Balloc+0x68>
 800d68c:	2101      	movs	r1, #1
 800d68e:	fa01 f605 	lsl.w	r6, r1, r5
 800d692:	1d72      	adds	r2, r6, #5
 800d694:	0092      	lsls	r2, r2, #2
 800d696:	4620      	mov	r0, r4
 800d698:	f000 fdb4 	bl	800e204 <_calloc_r>
 800d69c:	b160      	cbz	r0, 800d6b8 <_Balloc+0x64>
 800d69e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6a2:	e00e      	b.n	800d6c2 <_Balloc+0x6e>
 800d6a4:	2221      	movs	r2, #33	; 0x21
 800d6a6:	2104      	movs	r1, #4
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f000 fdab 	bl	800e204 <_calloc_r>
 800d6ae:	69e3      	ldr	r3, [r4, #28]
 800d6b0:	60f0      	str	r0, [r6, #12]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1e4      	bne.n	800d682 <_Balloc+0x2e>
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	bd70      	pop	{r4, r5, r6, pc}
 800d6bc:	6802      	ldr	r2, [r0, #0]
 800d6be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d6c8:	e7f7      	b.n	800d6ba <_Balloc+0x66>
 800d6ca:	bf00      	nop
 800d6cc:	0800e971 	.word	0x0800e971
 800d6d0:	0800e9f1 	.word	0x0800e9f1

0800d6d4 <_Bfree>:
 800d6d4:	b570      	push	{r4, r5, r6, lr}
 800d6d6:	69c6      	ldr	r6, [r0, #28]
 800d6d8:	4605      	mov	r5, r0
 800d6da:	460c      	mov	r4, r1
 800d6dc:	b976      	cbnz	r6, 800d6fc <_Bfree+0x28>
 800d6de:	2010      	movs	r0, #16
 800d6e0:	f7ff ff04 	bl	800d4ec <malloc>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	61e8      	str	r0, [r5, #28]
 800d6e8:	b920      	cbnz	r0, 800d6f4 <_Bfree+0x20>
 800d6ea:	4b09      	ldr	r3, [pc, #36]	; (800d710 <_Bfree+0x3c>)
 800d6ec:	4809      	ldr	r0, [pc, #36]	; (800d714 <_Bfree+0x40>)
 800d6ee:	218f      	movs	r1, #143	; 0x8f
 800d6f0:	f000 fd6a 	bl	800e1c8 <__assert_func>
 800d6f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6f8:	6006      	str	r6, [r0, #0]
 800d6fa:	60c6      	str	r6, [r0, #12]
 800d6fc:	b13c      	cbz	r4, 800d70e <_Bfree+0x3a>
 800d6fe:	69eb      	ldr	r3, [r5, #28]
 800d700:	6862      	ldr	r2, [r4, #4]
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d708:	6021      	str	r1, [r4, #0]
 800d70a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d70e:	bd70      	pop	{r4, r5, r6, pc}
 800d710:	0800e971 	.word	0x0800e971
 800d714:	0800e9f1 	.word	0x0800e9f1

0800d718 <__multadd>:
 800d718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d71c:	690d      	ldr	r5, [r1, #16]
 800d71e:	4607      	mov	r7, r0
 800d720:	460c      	mov	r4, r1
 800d722:	461e      	mov	r6, r3
 800d724:	f101 0c14 	add.w	ip, r1, #20
 800d728:	2000      	movs	r0, #0
 800d72a:	f8dc 3000 	ldr.w	r3, [ip]
 800d72e:	b299      	uxth	r1, r3
 800d730:	fb02 6101 	mla	r1, r2, r1, r6
 800d734:	0c1e      	lsrs	r6, r3, #16
 800d736:	0c0b      	lsrs	r3, r1, #16
 800d738:	fb02 3306 	mla	r3, r2, r6, r3
 800d73c:	b289      	uxth	r1, r1
 800d73e:	3001      	adds	r0, #1
 800d740:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d744:	4285      	cmp	r5, r0
 800d746:	f84c 1b04 	str.w	r1, [ip], #4
 800d74a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d74e:	dcec      	bgt.n	800d72a <__multadd+0x12>
 800d750:	b30e      	cbz	r6, 800d796 <__multadd+0x7e>
 800d752:	68a3      	ldr	r3, [r4, #8]
 800d754:	42ab      	cmp	r3, r5
 800d756:	dc19      	bgt.n	800d78c <__multadd+0x74>
 800d758:	6861      	ldr	r1, [r4, #4]
 800d75a:	4638      	mov	r0, r7
 800d75c:	3101      	adds	r1, #1
 800d75e:	f7ff ff79 	bl	800d654 <_Balloc>
 800d762:	4680      	mov	r8, r0
 800d764:	b928      	cbnz	r0, 800d772 <__multadd+0x5a>
 800d766:	4602      	mov	r2, r0
 800d768:	4b0c      	ldr	r3, [pc, #48]	; (800d79c <__multadd+0x84>)
 800d76a:	480d      	ldr	r0, [pc, #52]	; (800d7a0 <__multadd+0x88>)
 800d76c:	21ba      	movs	r1, #186	; 0xba
 800d76e:	f000 fd2b 	bl	800e1c8 <__assert_func>
 800d772:	6922      	ldr	r2, [r4, #16]
 800d774:	3202      	adds	r2, #2
 800d776:	f104 010c 	add.w	r1, r4, #12
 800d77a:	0092      	lsls	r2, r2, #2
 800d77c:	300c      	adds	r0, #12
 800d77e:	f000 fd15 	bl	800e1ac <memcpy>
 800d782:	4621      	mov	r1, r4
 800d784:	4638      	mov	r0, r7
 800d786:	f7ff ffa5 	bl	800d6d4 <_Bfree>
 800d78a:	4644      	mov	r4, r8
 800d78c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d790:	3501      	adds	r5, #1
 800d792:	615e      	str	r6, [r3, #20]
 800d794:	6125      	str	r5, [r4, #16]
 800d796:	4620      	mov	r0, r4
 800d798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d79c:	0800e9e0 	.word	0x0800e9e0
 800d7a0:	0800e9f1 	.word	0x0800e9f1

0800d7a4 <__hi0bits>:
 800d7a4:	0c03      	lsrs	r3, r0, #16
 800d7a6:	041b      	lsls	r3, r3, #16
 800d7a8:	b9d3      	cbnz	r3, 800d7e0 <__hi0bits+0x3c>
 800d7aa:	0400      	lsls	r0, r0, #16
 800d7ac:	2310      	movs	r3, #16
 800d7ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d7b2:	bf04      	itt	eq
 800d7b4:	0200      	lsleq	r0, r0, #8
 800d7b6:	3308      	addeq	r3, #8
 800d7b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d7bc:	bf04      	itt	eq
 800d7be:	0100      	lsleq	r0, r0, #4
 800d7c0:	3304      	addeq	r3, #4
 800d7c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d7c6:	bf04      	itt	eq
 800d7c8:	0080      	lsleq	r0, r0, #2
 800d7ca:	3302      	addeq	r3, #2
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	db05      	blt.n	800d7dc <__hi0bits+0x38>
 800d7d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d7d4:	f103 0301 	add.w	r3, r3, #1
 800d7d8:	bf08      	it	eq
 800d7da:	2320      	moveq	r3, #32
 800d7dc:	4618      	mov	r0, r3
 800d7de:	4770      	bx	lr
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	e7e4      	b.n	800d7ae <__hi0bits+0xa>

0800d7e4 <__lo0bits>:
 800d7e4:	6803      	ldr	r3, [r0, #0]
 800d7e6:	f013 0207 	ands.w	r2, r3, #7
 800d7ea:	d00c      	beq.n	800d806 <__lo0bits+0x22>
 800d7ec:	07d9      	lsls	r1, r3, #31
 800d7ee:	d422      	bmi.n	800d836 <__lo0bits+0x52>
 800d7f0:	079a      	lsls	r2, r3, #30
 800d7f2:	bf49      	itett	mi
 800d7f4:	085b      	lsrmi	r3, r3, #1
 800d7f6:	089b      	lsrpl	r3, r3, #2
 800d7f8:	6003      	strmi	r3, [r0, #0]
 800d7fa:	2201      	movmi	r2, #1
 800d7fc:	bf5c      	itt	pl
 800d7fe:	6003      	strpl	r3, [r0, #0]
 800d800:	2202      	movpl	r2, #2
 800d802:	4610      	mov	r0, r2
 800d804:	4770      	bx	lr
 800d806:	b299      	uxth	r1, r3
 800d808:	b909      	cbnz	r1, 800d80e <__lo0bits+0x2a>
 800d80a:	0c1b      	lsrs	r3, r3, #16
 800d80c:	2210      	movs	r2, #16
 800d80e:	b2d9      	uxtb	r1, r3
 800d810:	b909      	cbnz	r1, 800d816 <__lo0bits+0x32>
 800d812:	3208      	adds	r2, #8
 800d814:	0a1b      	lsrs	r3, r3, #8
 800d816:	0719      	lsls	r1, r3, #28
 800d818:	bf04      	itt	eq
 800d81a:	091b      	lsreq	r3, r3, #4
 800d81c:	3204      	addeq	r2, #4
 800d81e:	0799      	lsls	r1, r3, #30
 800d820:	bf04      	itt	eq
 800d822:	089b      	lsreq	r3, r3, #2
 800d824:	3202      	addeq	r2, #2
 800d826:	07d9      	lsls	r1, r3, #31
 800d828:	d403      	bmi.n	800d832 <__lo0bits+0x4e>
 800d82a:	085b      	lsrs	r3, r3, #1
 800d82c:	f102 0201 	add.w	r2, r2, #1
 800d830:	d003      	beq.n	800d83a <__lo0bits+0x56>
 800d832:	6003      	str	r3, [r0, #0]
 800d834:	e7e5      	b.n	800d802 <__lo0bits+0x1e>
 800d836:	2200      	movs	r2, #0
 800d838:	e7e3      	b.n	800d802 <__lo0bits+0x1e>
 800d83a:	2220      	movs	r2, #32
 800d83c:	e7e1      	b.n	800d802 <__lo0bits+0x1e>
	...

0800d840 <__i2b>:
 800d840:	b510      	push	{r4, lr}
 800d842:	460c      	mov	r4, r1
 800d844:	2101      	movs	r1, #1
 800d846:	f7ff ff05 	bl	800d654 <_Balloc>
 800d84a:	4602      	mov	r2, r0
 800d84c:	b928      	cbnz	r0, 800d85a <__i2b+0x1a>
 800d84e:	4b05      	ldr	r3, [pc, #20]	; (800d864 <__i2b+0x24>)
 800d850:	4805      	ldr	r0, [pc, #20]	; (800d868 <__i2b+0x28>)
 800d852:	f240 1145 	movw	r1, #325	; 0x145
 800d856:	f000 fcb7 	bl	800e1c8 <__assert_func>
 800d85a:	2301      	movs	r3, #1
 800d85c:	6144      	str	r4, [r0, #20]
 800d85e:	6103      	str	r3, [r0, #16]
 800d860:	bd10      	pop	{r4, pc}
 800d862:	bf00      	nop
 800d864:	0800e9e0 	.word	0x0800e9e0
 800d868:	0800e9f1 	.word	0x0800e9f1

0800d86c <__multiply>:
 800d86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d870:	4691      	mov	r9, r2
 800d872:	690a      	ldr	r2, [r1, #16]
 800d874:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d878:	429a      	cmp	r2, r3
 800d87a:	bfb8      	it	lt
 800d87c:	460b      	movlt	r3, r1
 800d87e:	460c      	mov	r4, r1
 800d880:	bfbc      	itt	lt
 800d882:	464c      	movlt	r4, r9
 800d884:	4699      	movlt	r9, r3
 800d886:	6927      	ldr	r7, [r4, #16]
 800d888:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d88c:	68a3      	ldr	r3, [r4, #8]
 800d88e:	6861      	ldr	r1, [r4, #4]
 800d890:	eb07 060a 	add.w	r6, r7, sl
 800d894:	42b3      	cmp	r3, r6
 800d896:	b085      	sub	sp, #20
 800d898:	bfb8      	it	lt
 800d89a:	3101      	addlt	r1, #1
 800d89c:	f7ff feda 	bl	800d654 <_Balloc>
 800d8a0:	b930      	cbnz	r0, 800d8b0 <__multiply+0x44>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	4b44      	ldr	r3, [pc, #272]	; (800d9b8 <__multiply+0x14c>)
 800d8a6:	4845      	ldr	r0, [pc, #276]	; (800d9bc <__multiply+0x150>)
 800d8a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d8ac:	f000 fc8c 	bl	800e1c8 <__assert_func>
 800d8b0:	f100 0514 	add.w	r5, r0, #20
 800d8b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8b8:	462b      	mov	r3, r5
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	4543      	cmp	r3, r8
 800d8be:	d321      	bcc.n	800d904 <__multiply+0x98>
 800d8c0:	f104 0314 	add.w	r3, r4, #20
 800d8c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d8c8:	f109 0314 	add.w	r3, r9, #20
 800d8cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d8d0:	9202      	str	r2, [sp, #8]
 800d8d2:	1b3a      	subs	r2, r7, r4
 800d8d4:	3a15      	subs	r2, #21
 800d8d6:	f022 0203 	bic.w	r2, r2, #3
 800d8da:	3204      	adds	r2, #4
 800d8dc:	f104 0115 	add.w	r1, r4, #21
 800d8e0:	428f      	cmp	r7, r1
 800d8e2:	bf38      	it	cc
 800d8e4:	2204      	movcc	r2, #4
 800d8e6:	9201      	str	r2, [sp, #4]
 800d8e8:	9a02      	ldr	r2, [sp, #8]
 800d8ea:	9303      	str	r3, [sp, #12]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d80c      	bhi.n	800d90a <__multiply+0x9e>
 800d8f0:	2e00      	cmp	r6, #0
 800d8f2:	dd03      	ble.n	800d8fc <__multiply+0x90>
 800d8f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d05b      	beq.n	800d9b4 <__multiply+0x148>
 800d8fc:	6106      	str	r6, [r0, #16]
 800d8fe:	b005      	add	sp, #20
 800d900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d904:	f843 2b04 	str.w	r2, [r3], #4
 800d908:	e7d8      	b.n	800d8bc <__multiply+0x50>
 800d90a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d90e:	f1ba 0f00 	cmp.w	sl, #0
 800d912:	d024      	beq.n	800d95e <__multiply+0xf2>
 800d914:	f104 0e14 	add.w	lr, r4, #20
 800d918:	46a9      	mov	r9, r5
 800d91a:	f04f 0c00 	mov.w	ip, #0
 800d91e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d922:	f8d9 1000 	ldr.w	r1, [r9]
 800d926:	fa1f fb82 	uxth.w	fp, r2
 800d92a:	b289      	uxth	r1, r1
 800d92c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d930:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d934:	f8d9 2000 	ldr.w	r2, [r9]
 800d938:	4461      	add	r1, ip
 800d93a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d93e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d946:	b289      	uxth	r1, r1
 800d948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d94c:	4577      	cmp	r7, lr
 800d94e:	f849 1b04 	str.w	r1, [r9], #4
 800d952:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d956:	d8e2      	bhi.n	800d91e <__multiply+0xb2>
 800d958:	9a01      	ldr	r2, [sp, #4]
 800d95a:	f845 c002 	str.w	ip, [r5, r2]
 800d95e:	9a03      	ldr	r2, [sp, #12]
 800d960:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d964:	3304      	adds	r3, #4
 800d966:	f1b9 0f00 	cmp.w	r9, #0
 800d96a:	d021      	beq.n	800d9b0 <__multiply+0x144>
 800d96c:	6829      	ldr	r1, [r5, #0]
 800d96e:	f104 0c14 	add.w	ip, r4, #20
 800d972:	46ae      	mov	lr, r5
 800d974:	f04f 0a00 	mov.w	sl, #0
 800d978:	f8bc b000 	ldrh.w	fp, [ip]
 800d97c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d980:	fb09 220b 	mla	r2, r9, fp, r2
 800d984:	4452      	add	r2, sl
 800d986:	b289      	uxth	r1, r1
 800d988:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d98c:	f84e 1b04 	str.w	r1, [lr], #4
 800d990:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d994:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d998:	f8be 1000 	ldrh.w	r1, [lr]
 800d99c:	fb09 110a 	mla	r1, r9, sl, r1
 800d9a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d9a4:	4567      	cmp	r7, ip
 800d9a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d9aa:	d8e5      	bhi.n	800d978 <__multiply+0x10c>
 800d9ac:	9a01      	ldr	r2, [sp, #4]
 800d9ae:	50a9      	str	r1, [r5, r2]
 800d9b0:	3504      	adds	r5, #4
 800d9b2:	e799      	b.n	800d8e8 <__multiply+0x7c>
 800d9b4:	3e01      	subs	r6, #1
 800d9b6:	e79b      	b.n	800d8f0 <__multiply+0x84>
 800d9b8:	0800e9e0 	.word	0x0800e9e0
 800d9bc:	0800e9f1 	.word	0x0800e9f1

0800d9c0 <__pow5mult>:
 800d9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9c4:	4615      	mov	r5, r2
 800d9c6:	f012 0203 	ands.w	r2, r2, #3
 800d9ca:	4606      	mov	r6, r0
 800d9cc:	460f      	mov	r7, r1
 800d9ce:	d007      	beq.n	800d9e0 <__pow5mult+0x20>
 800d9d0:	4c25      	ldr	r4, [pc, #148]	; (800da68 <__pow5mult+0xa8>)
 800d9d2:	3a01      	subs	r2, #1
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9da:	f7ff fe9d 	bl	800d718 <__multadd>
 800d9de:	4607      	mov	r7, r0
 800d9e0:	10ad      	asrs	r5, r5, #2
 800d9e2:	d03d      	beq.n	800da60 <__pow5mult+0xa0>
 800d9e4:	69f4      	ldr	r4, [r6, #28]
 800d9e6:	b97c      	cbnz	r4, 800da08 <__pow5mult+0x48>
 800d9e8:	2010      	movs	r0, #16
 800d9ea:	f7ff fd7f 	bl	800d4ec <malloc>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	61f0      	str	r0, [r6, #28]
 800d9f2:	b928      	cbnz	r0, 800da00 <__pow5mult+0x40>
 800d9f4:	4b1d      	ldr	r3, [pc, #116]	; (800da6c <__pow5mult+0xac>)
 800d9f6:	481e      	ldr	r0, [pc, #120]	; (800da70 <__pow5mult+0xb0>)
 800d9f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d9fc:	f000 fbe4 	bl	800e1c8 <__assert_func>
 800da00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da04:	6004      	str	r4, [r0, #0]
 800da06:	60c4      	str	r4, [r0, #12]
 800da08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800da0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da10:	b94c      	cbnz	r4, 800da26 <__pow5mult+0x66>
 800da12:	f240 2171 	movw	r1, #625	; 0x271
 800da16:	4630      	mov	r0, r6
 800da18:	f7ff ff12 	bl	800d840 <__i2b>
 800da1c:	2300      	movs	r3, #0
 800da1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800da22:	4604      	mov	r4, r0
 800da24:	6003      	str	r3, [r0, #0]
 800da26:	f04f 0900 	mov.w	r9, #0
 800da2a:	07eb      	lsls	r3, r5, #31
 800da2c:	d50a      	bpl.n	800da44 <__pow5mult+0x84>
 800da2e:	4639      	mov	r1, r7
 800da30:	4622      	mov	r2, r4
 800da32:	4630      	mov	r0, r6
 800da34:	f7ff ff1a 	bl	800d86c <__multiply>
 800da38:	4639      	mov	r1, r7
 800da3a:	4680      	mov	r8, r0
 800da3c:	4630      	mov	r0, r6
 800da3e:	f7ff fe49 	bl	800d6d4 <_Bfree>
 800da42:	4647      	mov	r7, r8
 800da44:	106d      	asrs	r5, r5, #1
 800da46:	d00b      	beq.n	800da60 <__pow5mult+0xa0>
 800da48:	6820      	ldr	r0, [r4, #0]
 800da4a:	b938      	cbnz	r0, 800da5c <__pow5mult+0x9c>
 800da4c:	4622      	mov	r2, r4
 800da4e:	4621      	mov	r1, r4
 800da50:	4630      	mov	r0, r6
 800da52:	f7ff ff0b 	bl	800d86c <__multiply>
 800da56:	6020      	str	r0, [r4, #0]
 800da58:	f8c0 9000 	str.w	r9, [r0]
 800da5c:	4604      	mov	r4, r0
 800da5e:	e7e4      	b.n	800da2a <__pow5mult+0x6a>
 800da60:	4638      	mov	r0, r7
 800da62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da66:	bf00      	nop
 800da68:	0800eb40 	.word	0x0800eb40
 800da6c:	0800e971 	.word	0x0800e971
 800da70:	0800e9f1 	.word	0x0800e9f1

0800da74 <__lshift>:
 800da74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da78:	460c      	mov	r4, r1
 800da7a:	6849      	ldr	r1, [r1, #4]
 800da7c:	6923      	ldr	r3, [r4, #16]
 800da7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da82:	68a3      	ldr	r3, [r4, #8]
 800da84:	4607      	mov	r7, r0
 800da86:	4691      	mov	r9, r2
 800da88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da8c:	f108 0601 	add.w	r6, r8, #1
 800da90:	42b3      	cmp	r3, r6
 800da92:	db0b      	blt.n	800daac <__lshift+0x38>
 800da94:	4638      	mov	r0, r7
 800da96:	f7ff fddd 	bl	800d654 <_Balloc>
 800da9a:	4605      	mov	r5, r0
 800da9c:	b948      	cbnz	r0, 800dab2 <__lshift+0x3e>
 800da9e:	4602      	mov	r2, r0
 800daa0:	4b28      	ldr	r3, [pc, #160]	; (800db44 <__lshift+0xd0>)
 800daa2:	4829      	ldr	r0, [pc, #164]	; (800db48 <__lshift+0xd4>)
 800daa4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800daa8:	f000 fb8e 	bl	800e1c8 <__assert_func>
 800daac:	3101      	adds	r1, #1
 800daae:	005b      	lsls	r3, r3, #1
 800dab0:	e7ee      	b.n	800da90 <__lshift+0x1c>
 800dab2:	2300      	movs	r3, #0
 800dab4:	f100 0114 	add.w	r1, r0, #20
 800dab8:	f100 0210 	add.w	r2, r0, #16
 800dabc:	4618      	mov	r0, r3
 800dabe:	4553      	cmp	r3, sl
 800dac0:	db33      	blt.n	800db2a <__lshift+0xb6>
 800dac2:	6920      	ldr	r0, [r4, #16]
 800dac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dac8:	f104 0314 	add.w	r3, r4, #20
 800dacc:	f019 091f 	ands.w	r9, r9, #31
 800dad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dad4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dad8:	d02b      	beq.n	800db32 <__lshift+0xbe>
 800dada:	f1c9 0e20 	rsb	lr, r9, #32
 800dade:	468a      	mov	sl, r1
 800dae0:	2200      	movs	r2, #0
 800dae2:	6818      	ldr	r0, [r3, #0]
 800dae4:	fa00 f009 	lsl.w	r0, r0, r9
 800dae8:	4310      	orrs	r0, r2
 800daea:	f84a 0b04 	str.w	r0, [sl], #4
 800daee:	f853 2b04 	ldr.w	r2, [r3], #4
 800daf2:	459c      	cmp	ip, r3
 800daf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800daf8:	d8f3      	bhi.n	800dae2 <__lshift+0x6e>
 800dafa:	ebac 0304 	sub.w	r3, ip, r4
 800dafe:	3b15      	subs	r3, #21
 800db00:	f023 0303 	bic.w	r3, r3, #3
 800db04:	3304      	adds	r3, #4
 800db06:	f104 0015 	add.w	r0, r4, #21
 800db0a:	4584      	cmp	ip, r0
 800db0c:	bf38      	it	cc
 800db0e:	2304      	movcc	r3, #4
 800db10:	50ca      	str	r2, [r1, r3]
 800db12:	b10a      	cbz	r2, 800db18 <__lshift+0xa4>
 800db14:	f108 0602 	add.w	r6, r8, #2
 800db18:	3e01      	subs	r6, #1
 800db1a:	4638      	mov	r0, r7
 800db1c:	612e      	str	r6, [r5, #16]
 800db1e:	4621      	mov	r1, r4
 800db20:	f7ff fdd8 	bl	800d6d4 <_Bfree>
 800db24:	4628      	mov	r0, r5
 800db26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800db2e:	3301      	adds	r3, #1
 800db30:	e7c5      	b.n	800dabe <__lshift+0x4a>
 800db32:	3904      	subs	r1, #4
 800db34:	f853 2b04 	ldr.w	r2, [r3], #4
 800db38:	f841 2f04 	str.w	r2, [r1, #4]!
 800db3c:	459c      	cmp	ip, r3
 800db3e:	d8f9      	bhi.n	800db34 <__lshift+0xc0>
 800db40:	e7ea      	b.n	800db18 <__lshift+0xa4>
 800db42:	bf00      	nop
 800db44:	0800e9e0 	.word	0x0800e9e0
 800db48:	0800e9f1 	.word	0x0800e9f1

0800db4c <__mcmp>:
 800db4c:	b530      	push	{r4, r5, lr}
 800db4e:	6902      	ldr	r2, [r0, #16]
 800db50:	690c      	ldr	r4, [r1, #16]
 800db52:	1b12      	subs	r2, r2, r4
 800db54:	d10e      	bne.n	800db74 <__mcmp+0x28>
 800db56:	f100 0314 	add.w	r3, r0, #20
 800db5a:	3114      	adds	r1, #20
 800db5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db6c:	42a5      	cmp	r5, r4
 800db6e:	d003      	beq.n	800db78 <__mcmp+0x2c>
 800db70:	d305      	bcc.n	800db7e <__mcmp+0x32>
 800db72:	2201      	movs	r2, #1
 800db74:	4610      	mov	r0, r2
 800db76:	bd30      	pop	{r4, r5, pc}
 800db78:	4283      	cmp	r3, r0
 800db7a:	d3f3      	bcc.n	800db64 <__mcmp+0x18>
 800db7c:	e7fa      	b.n	800db74 <__mcmp+0x28>
 800db7e:	f04f 32ff 	mov.w	r2, #4294967295
 800db82:	e7f7      	b.n	800db74 <__mcmp+0x28>

0800db84 <__mdiff>:
 800db84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db88:	460c      	mov	r4, r1
 800db8a:	4606      	mov	r6, r0
 800db8c:	4611      	mov	r1, r2
 800db8e:	4620      	mov	r0, r4
 800db90:	4690      	mov	r8, r2
 800db92:	f7ff ffdb 	bl	800db4c <__mcmp>
 800db96:	1e05      	subs	r5, r0, #0
 800db98:	d110      	bne.n	800dbbc <__mdiff+0x38>
 800db9a:	4629      	mov	r1, r5
 800db9c:	4630      	mov	r0, r6
 800db9e:	f7ff fd59 	bl	800d654 <_Balloc>
 800dba2:	b930      	cbnz	r0, 800dbb2 <__mdiff+0x2e>
 800dba4:	4b3a      	ldr	r3, [pc, #232]	; (800dc90 <__mdiff+0x10c>)
 800dba6:	4602      	mov	r2, r0
 800dba8:	f240 2137 	movw	r1, #567	; 0x237
 800dbac:	4839      	ldr	r0, [pc, #228]	; (800dc94 <__mdiff+0x110>)
 800dbae:	f000 fb0b 	bl	800e1c8 <__assert_func>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbc:	bfa4      	itt	ge
 800dbbe:	4643      	movge	r3, r8
 800dbc0:	46a0      	movge	r8, r4
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dbc8:	bfa6      	itte	ge
 800dbca:	461c      	movge	r4, r3
 800dbcc:	2500      	movge	r5, #0
 800dbce:	2501      	movlt	r5, #1
 800dbd0:	f7ff fd40 	bl	800d654 <_Balloc>
 800dbd4:	b920      	cbnz	r0, 800dbe0 <__mdiff+0x5c>
 800dbd6:	4b2e      	ldr	r3, [pc, #184]	; (800dc90 <__mdiff+0x10c>)
 800dbd8:	4602      	mov	r2, r0
 800dbda:	f240 2145 	movw	r1, #581	; 0x245
 800dbde:	e7e5      	b.n	800dbac <__mdiff+0x28>
 800dbe0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dbe4:	6926      	ldr	r6, [r4, #16]
 800dbe6:	60c5      	str	r5, [r0, #12]
 800dbe8:	f104 0914 	add.w	r9, r4, #20
 800dbec:	f108 0514 	add.w	r5, r8, #20
 800dbf0:	f100 0e14 	add.w	lr, r0, #20
 800dbf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dbf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dbfc:	f108 0210 	add.w	r2, r8, #16
 800dc00:	46f2      	mov	sl, lr
 800dc02:	2100      	movs	r1, #0
 800dc04:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc0c:	fa11 f88b 	uxtah	r8, r1, fp
 800dc10:	b299      	uxth	r1, r3
 800dc12:	0c1b      	lsrs	r3, r3, #16
 800dc14:	eba8 0801 	sub.w	r8, r8, r1
 800dc18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc20:	fa1f f888 	uxth.w	r8, r8
 800dc24:	1419      	asrs	r1, r3, #16
 800dc26:	454e      	cmp	r6, r9
 800dc28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc2c:	f84a 3b04 	str.w	r3, [sl], #4
 800dc30:	d8e8      	bhi.n	800dc04 <__mdiff+0x80>
 800dc32:	1b33      	subs	r3, r6, r4
 800dc34:	3b15      	subs	r3, #21
 800dc36:	f023 0303 	bic.w	r3, r3, #3
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	3415      	adds	r4, #21
 800dc3e:	42a6      	cmp	r6, r4
 800dc40:	bf38      	it	cc
 800dc42:	2304      	movcc	r3, #4
 800dc44:	441d      	add	r5, r3
 800dc46:	4473      	add	r3, lr
 800dc48:	469e      	mov	lr, r3
 800dc4a:	462e      	mov	r6, r5
 800dc4c:	4566      	cmp	r6, ip
 800dc4e:	d30e      	bcc.n	800dc6e <__mdiff+0xea>
 800dc50:	f10c 0203 	add.w	r2, ip, #3
 800dc54:	1b52      	subs	r2, r2, r5
 800dc56:	f022 0203 	bic.w	r2, r2, #3
 800dc5a:	3d03      	subs	r5, #3
 800dc5c:	45ac      	cmp	ip, r5
 800dc5e:	bf38      	it	cc
 800dc60:	2200      	movcc	r2, #0
 800dc62:	4413      	add	r3, r2
 800dc64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dc68:	b17a      	cbz	r2, 800dc8a <__mdiff+0x106>
 800dc6a:	6107      	str	r7, [r0, #16]
 800dc6c:	e7a4      	b.n	800dbb8 <__mdiff+0x34>
 800dc6e:	f856 8b04 	ldr.w	r8, [r6], #4
 800dc72:	fa11 f288 	uxtah	r2, r1, r8
 800dc76:	1414      	asrs	r4, r2, #16
 800dc78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dc7c:	b292      	uxth	r2, r2
 800dc7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dc82:	f84e 2b04 	str.w	r2, [lr], #4
 800dc86:	1421      	asrs	r1, r4, #16
 800dc88:	e7e0      	b.n	800dc4c <__mdiff+0xc8>
 800dc8a:	3f01      	subs	r7, #1
 800dc8c:	e7ea      	b.n	800dc64 <__mdiff+0xe0>
 800dc8e:	bf00      	nop
 800dc90:	0800e9e0 	.word	0x0800e9e0
 800dc94:	0800e9f1 	.word	0x0800e9f1

0800dc98 <__d2b>:
 800dc98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc9c:	460f      	mov	r7, r1
 800dc9e:	2101      	movs	r1, #1
 800dca0:	ec59 8b10 	vmov	r8, r9, d0
 800dca4:	4616      	mov	r6, r2
 800dca6:	f7ff fcd5 	bl	800d654 <_Balloc>
 800dcaa:	4604      	mov	r4, r0
 800dcac:	b930      	cbnz	r0, 800dcbc <__d2b+0x24>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	4b24      	ldr	r3, [pc, #144]	; (800dd44 <__d2b+0xac>)
 800dcb2:	4825      	ldr	r0, [pc, #148]	; (800dd48 <__d2b+0xb0>)
 800dcb4:	f240 310f 	movw	r1, #783	; 0x30f
 800dcb8:	f000 fa86 	bl	800e1c8 <__assert_func>
 800dcbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dcc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dcc4:	bb2d      	cbnz	r5, 800dd12 <__d2b+0x7a>
 800dcc6:	9301      	str	r3, [sp, #4]
 800dcc8:	f1b8 0300 	subs.w	r3, r8, #0
 800dccc:	d026      	beq.n	800dd1c <__d2b+0x84>
 800dcce:	4668      	mov	r0, sp
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	f7ff fd87 	bl	800d7e4 <__lo0bits>
 800dcd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dcda:	b1e8      	cbz	r0, 800dd18 <__d2b+0x80>
 800dcdc:	f1c0 0320 	rsb	r3, r0, #32
 800dce0:	fa02 f303 	lsl.w	r3, r2, r3
 800dce4:	430b      	orrs	r3, r1
 800dce6:	40c2      	lsrs	r2, r0
 800dce8:	6163      	str	r3, [r4, #20]
 800dcea:	9201      	str	r2, [sp, #4]
 800dcec:	9b01      	ldr	r3, [sp, #4]
 800dcee:	61a3      	str	r3, [r4, #24]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	bf14      	ite	ne
 800dcf4:	2202      	movne	r2, #2
 800dcf6:	2201      	moveq	r2, #1
 800dcf8:	6122      	str	r2, [r4, #16]
 800dcfa:	b1bd      	cbz	r5, 800dd2c <__d2b+0x94>
 800dcfc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd00:	4405      	add	r5, r0
 800dd02:	603d      	str	r5, [r7, #0]
 800dd04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd08:	6030      	str	r0, [r6, #0]
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	b003      	add	sp, #12
 800dd0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd16:	e7d6      	b.n	800dcc6 <__d2b+0x2e>
 800dd18:	6161      	str	r1, [r4, #20]
 800dd1a:	e7e7      	b.n	800dcec <__d2b+0x54>
 800dd1c:	a801      	add	r0, sp, #4
 800dd1e:	f7ff fd61 	bl	800d7e4 <__lo0bits>
 800dd22:	9b01      	ldr	r3, [sp, #4]
 800dd24:	6163      	str	r3, [r4, #20]
 800dd26:	3020      	adds	r0, #32
 800dd28:	2201      	movs	r2, #1
 800dd2a:	e7e5      	b.n	800dcf8 <__d2b+0x60>
 800dd2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd34:	6038      	str	r0, [r7, #0]
 800dd36:	6918      	ldr	r0, [r3, #16]
 800dd38:	f7ff fd34 	bl	800d7a4 <__hi0bits>
 800dd3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd40:	e7e2      	b.n	800dd08 <__d2b+0x70>
 800dd42:	bf00      	nop
 800dd44:	0800e9e0 	.word	0x0800e9e0
 800dd48:	0800e9f1 	.word	0x0800e9f1

0800dd4c <__ssputs_r>:
 800dd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd50:	688e      	ldr	r6, [r1, #8]
 800dd52:	461f      	mov	r7, r3
 800dd54:	42be      	cmp	r6, r7
 800dd56:	680b      	ldr	r3, [r1, #0]
 800dd58:	4682      	mov	sl, r0
 800dd5a:	460c      	mov	r4, r1
 800dd5c:	4690      	mov	r8, r2
 800dd5e:	d82c      	bhi.n	800ddba <__ssputs_r+0x6e>
 800dd60:	898a      	ldrh	r2, [r1, #12]
 800dd62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd66:	d026      	beq.n	800ddb6 <__ssputs_r+0x6a>
 800dd68:	6965      	ldr	r5, [r4, #20]
 800dd6a:	6909      	ldr	r1, [r1, #16]
 800dd6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd70:	eba3 0901 	sub.w	r9, r3, r1
 800dd74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd78:	1c7b      	adds	r3, r7, #1
 800dd7a:	444b      	add	r3, r9
 800dd7c:	106d      	asrs	r5, r5, #1
 800dd7e:	429d      	cmp	r5, r3
 800dd80:	bf38      	it	cc
 800dd82:	461d      	movcc	r5, r3
 800dd84:	0553      	lsls	r3, r2, #21
 800dd86:	d527      	bpl.n	800ddd8 <__ssputs_r+0x8c>
 800dd88:	4629      	mov	r1, r5
 800dd8a:	f7ff fbd7 	bl	800d53c <_malloc_r>
 800dd8e:	4606      	mov	r6, r0
 800dd90:	b360      	cbz	r0, 800ddec <__ssputs_r+0xa0>
 800dd92:	6921      	ldr	r1, [r4, #16]
 800dd94:	464a      	mov	r2, r9
 800dd96:	f000 fa09 	bl	800e1ac <memcpy>
 800dd9a:	89a3      	ldrh	r3, [r4, #12]
 800dd9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dda0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dda4:	81a3      	strh	r3, [r4, #12]
 800dda6:	6126      	str	r6, [r4, #16]
 800dda8:	6165      	str	r5, [r4, #20]
 800ddaa:	444e      	add	r6, r9
 800ddac:	eba5 0509 	sub.w	r5, r5, r9
 800ddb0:	6026      	str	r6, [r4, #0]
 800ddb2:	60a5      	str	r5, [r4, #8]
 800ddb4:	463e      	mov	r6, r7
 800ddb6:	42be      	cmp	r6, r7
 800ddb8:	d900      	bls.n	800ddbc <__ssputs_r+0x70>
 800ddba:	463e      	mov	r6, r7
 800ddbc:	6820      	ldr	r0, [r4, #0]
 800ddbe:	4632      	mov	r2, r6
 800ddc0:	4641      	mov	r1, r8
 800ddc2:	f000 f9c9 	bl	800e158 <memmove>
 800ddc6:	68a3      	ldr	r3, [r4, #8]
 800ddc8:	1b9b      	subs	r3, r3, r6
 800ddca:	60a3      	str	r3, [r4, #8]
 800ddcc:	6823      	ldr	r3, [r4, #0]
 800ddce:	4433      	add	r3, r6
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	2000      	movs	r0, #0
 800ddd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd8:	462a      	mov	r2, r5
 800ddda:	f000 fa3b 	bl	800e254 <_realloc_r>
 800ddde:	4606      	mov	r6, r0
 800dde0:	2800      	cmp	r0, #0
 800dde2:	d1e0      	bne.n	800dda6 <__ssputs_r+0x5a>
 800dde4:	6921      	ldr	r1, [r4, #16]
 800dde6:	4650      	mov	r0, sl
 800dde8:	f7ff fb34 	bl	800d454 <_free_r>
 800ddec:	230c      	movs	r3, #12
 800ddee:	f8ca 3000 	str.w	r3, [sl]
 800ddf2:	89a3      	ldrh	r3, [r4, #12]
 800ddf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddf8:	81a3      	strh	r3, [r4, #12]
 800ddfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ddfe:	e7e9      	b.n	800ddd4 <__ssputs_r+0x88>

0800de00 <_svfiprintf_r>:
 800de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de04:	4698      	mov	r8, r3
 800de06:	898b      	ldrh	r3, [r1, #12]
 800de08:	061b      	lsls	r3, r3, #24
 800de0a:	b09d      	sub	sp, #116	; 0x74
 800de0c:	4607      	mov	r7, r0
 800de0e:	460d      	mov	r5, r1
 800de10:	4614      	mov	r4, r2
 800de12:	d50e      	bpl.n	800de32 <_svfiprintf_r+0x32>
 800de14:	690b      	ldr	r3, [r1, #16]
 800de16:	b963      	cbnz	r3, 800de32 <_svfiprintf_r+0x32>
 800de18:	2140      	movs	r1, #64	; 0x40
 800de1a:	f7ff fb8f 	bl	800d53c <_malloc_r>
 800de1e:	6028      	str	r0, [r5, #0]
 800de20:	6128      	str	r0, [r5, #16]
 800de22:	b920      	cbnz	r0, 800de2e <_svfiprintf_r+0x2e>
 800de24:	230c      	movs	r3, #12
 800de26:	603b      	str	r3, [r7, #0]
 800de28:	f04f 30ff 	mov.w	r0, #4294967295
 800de2c:	e0d0      	b.n	800dfd0 <_svfiprintf_r+0x1d0>
 800de2e:	2340      	movs	r3, #64	; 0x40
 800de30:	616b      	str	r3, [r5, #20]
 800de32:	2300      	movs	r3, #0
 800de34:	9309      	str	r3, [sp, #36]	; 0x24
 800de36:	2320      	movs	r3, #32
 800de38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800de40:	2330      	movs	r3, #48	; 0x30
 800de42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dfe8 <_svfiprintf_r+0x1e8>
 800de46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de4a:	f04f 0901 	mov.w	r9, #1
 800de4e:	4623      	mov	r3, r4
 800de50:	469a      	mov	sl, r3
 800de52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de56:	b10a      	cbz	r2, 800de5c <_svfiprintf_r+0x5c>
 800de58:	2a25      	cmp	r2, #37	; 0x25
 800de5a:	d1f9      	bne.n	800de50 <_svfiprintf_r+0x50>
 800de5c:	ebba 0b04 	subs.w	fp, sl, r4
 800de60:	d00b      	beq.n	800de7a <_svfiprintf_r+0x7a>
 800de62:	465b      	mov	r3, fp
 800de64:	4622      	mov	r2, r4
 800de66:	4629      	mov	r1, r5
 800de68:	4638      	mov	r0, r7
 800de6a:	f7ff ff6f 	bl	800dd4c <__ssputs_r>
 800de6e:	3001      	adds	r0, #1
 800de70:	f000 80a9 	beq.w	800dfc6 <_svfiprintf_r+0x1c6>
 800de74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de76:	445a      	add	r2, fp
 800de78:	9209      	str	r2, [sp, #36]	; 0x24
 800de7a:	f89a 3000 	ldrb.w	r3, [sl]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 80a1 	beq.w	800dfc6 <_svfiprintf_r+0x1c6>
 800de84:	2300      	movs	r3, #0
 800de86:	f04f 32ff 	mov.w	r2, #4294967295
 800de8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de8e:	f10a 0a01 	add.w	sl, sl, #1
 800de92:	9304      	str	r3, [sp, #16]
 800de94:	9307      	str	r3, [sp, #28]
 800de96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de9a:	931a      	str	r3, [sp, #104]	; 0x68
 800de9c:	4654      	mov	r4, sl
 800de9e:	2205      	movs	r2, #5
 800dea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dea4:	4850      	ldr	r0, [pc, #320]	; (800dfe8 <_svfiprintf_r+0x1e8>)
 800dea6:	f7f2 f993 	bl	80001d0 <memchr>
 800deaa:	9a04      	ldr	r2, [sp, #16]
 800deac:	b9d8      	cbnz	r0, 800dee6 <_svfiprintf_r+0xe6>
 800deae:	06d0      	lsls	r0, r2, #27
 800deb0:	bf44      	itt	mi
 800deb2:	2320      	movmi	r3, #32
 800deb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deb8:	0711      	lsls	r1, r2, #28
 800deba:	bf44      	itt	mi
 800debc:	232b      	movmi	r3, #43	; 0x2b
 800debe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dec2:	f89a 3000 	ldrb.w	r3, [sl]
 800dec6:	2b2a      	cmp	r3, #42	; 0x2a
 800dec8:	d015      	beq.n	800def6 <_svfiprintf_r+0xf6>
 800deca:	9a07      	ldr	r2, [sp, #28]
 800decc:	4654      	mov	r4, sl
 800dece:	2000      	movs	r0, #0
 800ded0:	f04f 0c0a 	mov.w	ip, #10
 800ded4:	4621      	mov	r1, r4
 800ded6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deda:	3b30      	subs	r3, #48	; 0x30
 800dedc:	2b09      	cmp	r3, #9
 800dede:	d94d      	bls.n	800df7c <_svfiprintf_r+0x17c>
 800dee0:	b1b0      	cbz	r0, 800df10 <_svfiprintf_r+0x110>
 800dee2:	9207      	str	r2, [sp, #28]
 800dee4:	e014      	b.n	800df10 <_svfiprintf_r+0x110>
 800dee6:	eba0 0308 	sub.w	r3, r0, r8
 800deea:	fa09 f303 	lsl.w	r3, r9, r3
 800deee:	4313      	orrs	r3, r2
 800def0:	9304      	str	r3, [sp, #16]
 800def2:	46a2      	mov	sl, r4
 800def4:	e7d2      	b.n	800de9c <_svfiprintf_r+0x9c>
 800def6:	9b03      	ldr	r3, [sp, #12]
 800def8:	1d19      	adds	r1, r3, #4
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	9103      	str	r1, [sp, #12]
 800defe:	2b00      	cmp	r3, #0
 800df00:	bfbb      	ittet	lt
 800df02:	425b      	neglt	r3, r3
 800df04:	f042 0202 	orrlt.w	r2, r2, #2
 800df08:	9307      	strge	r3, [sp, #28]
 800df0a:	9307      	strlt	r3, [sp, #28]
 800df0c:	bfb8      	it	lt
 800df0e:	9204      	strlt	r2, [sp, #16]
 800df10:	7823      	ldrb	r3, [r4, #0]
 800df12:	2b2e      	cmp	r3, #46	; 0x2e
 800df14:	d10c      	bne.n	800df30 <_svfiprintf_r+0x130>
 800df16:	7863      	ldrb	r3, [r4, #1]
 800df18:	2b2a      	cmp	r3, #42	; 0x2a
 800df1a:	d134      	bne.n	800df86 <_svfiprintf_r+0x186>
 800df1c:	9b03      	ldr	r3, [sp, #12]
 800df1e:	1d1a      	adds	r2, r3, #4
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	9203      	str	r2, [sp, #12]
 800df24:	2b00      	cmp	r3, #0
 800df26:	bfb8      	it	lt
 800df28:	f04f 33ff 	movlt.w	r3, #4294967295
 800df2c:	3402      	adds	r4, #2
 800df2e:	9305      	str	r3, [sp, #20]
 800df30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dff8 <_svfiprintf_r+0x1f8>
 800df34:	7821      	ldrb	r1, [r4, #0]
 800df36:	2203      	movs	r2, #3
 800df38:	4650      	mov	r0, sl
 800df3a:	f7f2 f949 	bl	80001d0 <memchr>
 800df3e:	b138      	cbz	r0, 800df50 <_svfiprintf_r+0x150>
 800df40:	9b04      	ldr	r3, [sp, #16]
 800df42:	eba0 000a 	sub.w	r0, r0, sl
 800df46:	2240      	movs	r2, #64	; 0x40
 800df48:	4082      	lsls	r2, r0
 800df4a:	4313      	orrs	r3, r2
 800df4c:	3401      	adds	r4, #1
 800df4e:	9304      	str	r3, [sp, #16]
 800df50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df54:	4825      	ldr	r0, [pc, #148]	; (800dfec <_svfiprintf_r+0x1ec>)
 800df56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df5a:	2206      	movs	r2, #6
 800df5c:	f7f2 f938 	bl	80001d0 <memchr>
 800df60:	2800      	cmp	r0, #0
 800df62:	d038      	beq.n	800dfd6 <_svfiprintf_r+0x1d6>
 800df64:	4b22      	ldr	r3, [pc, #136]	; (800dff0 <_svfiprintf_r+0x1f0>)
 800df66:	bb1b      	cbnz	r3, 800dfb0 <_svfiprintf_r+0x1b0>
 800df68:	9b03      	ldr	r3, [sp, #12]
 800df6a:	3307      	adds	r3, #7
 800df6c:	f023 0307 	bic.w	r3, r3, #7
 800df70:	3308      	adds	r3, #8
 800df72:	9303      	str	r3, [sp, #12]
 800df74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df76:	4433      	add	r3, r6
 800df78:	9309      	str	r3, [sp, #36]	; 0x24
 800df7a:	e768      	b.n	800de4e <_svfiprintf_r+0x4e>
 800df7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800df80:	460c      	mov	r4, r1
 800df82:	2001      	movs	r0, #1
 800df84:	e7a6      	b.n	800ded4 <_svfiprintf_r+0xd4>
 800df86:	2300      	movs	r3, #0
 800df88:	3401      	adds	r4, #1
 800df8a:	9305      	str	r3, [sp, #20]
 800df8c:	4619      	mov	r1, r3
 800df8e:	f04f 0c0a 	mov.w	ip, #10
 800df92:	4620      	mov	r0, r4
 800df94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df98:	3a30      	subs	r2, #48	; 0x30
 800df9a:	2a09      	cmp	r2, #9
 800df9c:	d903      	bls.n	800dfa6 <_svfiprintf_r+0x1a6>
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d0c6      	beq.n	800df30 <_svfiprintf_r+0x130>
 800dfa2:	9105      	str	r1, [sp, #20]
 800dfa4:	e7c4      	b.n	800df30 <_svfiprintf_r+0x130>
 800dfa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfaa:	4604      	mov	r4, r0
 800dfac:	2301      	movs	r3, #1
 800dfae:	e7f0      	b.n	800df92 <_svfiprintf_r+0x192>
 800dfb0:	ab03      	add	r3, sp, #12
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	462a      	mov	r2, r5
 800dfb6:	4b0f      	ldr	r3, [pc, #60]	; (800dff4 <_svfiprintf_r+0x1f4>)
 800dfb8:	a904      	add	r1, sp, #16
 800dfba:	4638      	mov	r0, r7
 800dfbc:	f7fd fe4e 	bl	800bc5c <_printf_float>
 800dfc0:	1c42      	adds	r2, r0, #1
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	d1d6      	bne.n	800df74 <_svfiprintf_r+0x174>
 800dfc6:	89ab      	ldrh	r3, [r5, #12]
 800dfc8:	065b      	lsls	r3, r3, #25
 800dfca:	f53f af2d 	bmi.w	800de28 <_svfiprintf_r+0x28>
 800dfce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfd0:	b01d      	add	sp, #116	; 0x74
 800dfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd6:	ab03      	add	r3, sp, #12
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	462a      	mov	r2, r5
 800dfdc:	4b05      	ldr	r3, [pc, #20]	; (800dff4 <_svfiprintf_r+0x1f4>)
 800dfde:	a904      	add	r1, sp, #16
 800dfe0:	4638      	mov	r0, r7
 800dfe2:	f7fe f8df 	bl	800c1a4 <_printf_i>
 800dfe6:	e7eb      	b.n	800dfc0 <_svfiprintf_r+0x1c0>
 800dfe8:	0800eb4c 	.word	0x0800eb4c
 800dfec:	0800eb56 	.word	0x0800eb56
 800dff0:	0800bc5d 	.word	0x0800bc5d
 800dff4:	0800dd4d 	.word	0x0800dd4d
 800dff8:	0800eb52 	.word	0x0800eb52

0800dffc <__sflush_r>:
 800dffc:	898a      	ldrh	r2, [r1, #12]
 800dffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e002:	4605      	mov	r5, r0
 800e004:	0710      	lsls	r0, r2, #28
 800e006:	460c      	mov	r4, r1
 800e008:	d458      	bmi.n	800e0bc <__sflush_r+0xc0>
 800e00a:	684b      	ldr	r3, [r1, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	dc05      	bgt.n	800e01c <__sflush_r+0x20>
 800e010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e012:	2b00      	cmp	r3, #0
 800e014:	dc02      	bgt.n	800e01c <__sflush_r+0x20>
 800e016:	2000      	movs	r0, #0
 800e018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e01c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e01e:	2e00      	cmp	r6, #0
 800e020:	d0f9      	beq.n	800e016 <__sflush_r+0x1a>
 800e022:	2300      	movs	r3, #0
 800e024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e028:	682f      	ldr	r7, [r5, #0]
 800e02a:	6a21      	ldr	r1, [r4, #32]
 800e02c:	602b      	str	r3, [r5, #0]
 800e02e:	d032      	beq.n	800e096 <__sflush_r+0x9a>
 800e030:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e032:	89a3      	ldrh	r3, [r4, #12]
 800e034:	075a      	lsls	r2, r3, #29
 800e036:	d505      	bpl.n	800e044 <__sflush_r+0x48>
 800e038:	6863      	ldr	r3, [r4, #4]
 800e03a:	1ac0      	subs	r0, r0, r3
 800e03c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e03e:	b10b      	cbz	r3, 800e044 <__sflush_r+0x48>
 800e040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e042:	1ac0      	subs	r0, r0, r3
 800e044:	2300      	movs	r3, #0
 800e046:	4602      	mov	r2, r0
 800e048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e04a:	6a21      	ldr	r1, [r4, #32]
 800e04c:	4628      	mov	r0, r5
 800e04e:	47b0      	blx	r6
 800e050:	1c43      	adds	r3, r0, #1
 800e052:	89a3      	ldrh	r3, [r4, #12]
 800e054:	d106      	bne.n	800e064 <__sflush_r+0x68>
 800e056:	6829      	ldr	r1, [r5, #0]
 800e058:	291d      	cmp	r1, #29
 800e05a:	d82b      	bhi.n	800e0b4 <__sflush_r+0xb8>
 800e05c:	4a29      	ldr	r2, [pc, #164]	; (800e104 <__sflush_r+0x108>)
 800e05e:	410a      	asrs	r2, r1
 800e060:	07d6      	lsls	r6, r2, #31
 800e062:	d427      	bmi.n	800e0b4 <__sflush_r+0xb8>
 800e064:	2200      	movs	r2, #0
 800e066:	6062      	str	r2, [r4, #4]
 800e068:	04d9      	lsls	r1, r3, #19
 800e06a:	6922      	ldr	r2, [r4, #16]
 800e06c:	6022      	str	r2, [r4, #0]
 800e06e:	d504      	bpl.n	800e07a <__sflush_r+0x7e>
 800e070:	1c42      	adds	r2, r0, #1
 800e072:	d101      	bne.n	800e078 <__sflush_r+0x7c>
 800e074:	682b      	ldr	r3, [r5, #0]
 800e076:	b903      	cbnz	r3, 800e07a <__sflush_r+0x7e>
 800e078:	6560      	str	r0, [r4, #84]	; 0x54
 800e07a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e07c:	602f      	str	r7, [r5, #0]
 800e07e:	2900      	cmp	r1, #0
 800e080:	d0c9      	beq.n	800e016 <__sflush_r+0x1a>
 800e082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e086:	4299      	cmp	r1, r3
 800e088:	d002      	beq.n	800e090 <__sflush_r+0x94>
 800e08a:	4628      	mov	r0, r5
 800e08c:	f7ff f9e2 	bl	800d454 <_free_r>
 800e090:	2000      	movs	r0, #0
 800e092:	6360      	str	r0, [r4, #52]	; 0x34
 800e094:	e7c0      	b.n	800e018 <__sflush_r+0x1c>
 800e096:	2301      	movs	r3, #1
 800e098:	4628      	mov	r0, r5
 800e09a:	47b0      	blx	r6
 800e09c:	1c41      	adds	r1, r0, #1
 800e09e:	d1c8      	bne.n	800e032 <__sflush_r+0x36>
 800e0a0:	682b      	ldr	r3, [r5, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d0c5      	beq.n	800e032 <__sflush_r+0x36>
 800e0a6:	2b1d      	cmp	r3, #29
 800e0a8:	d001      	beq.n	800e0ae <__sflush_r+0xb2>
 800e0aa:	2b16      	cmp	r3, #22
 800e0ac:	d101      	bne.n	800e0b2 <__sflush_r+0xb6>
 800e0ae:	602f      	str	r7, [r5, #0]
 800e0b0:	e7b1      	b.n	800e016 <__sflush_r+0x1a>
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0b8:	81a3      	strh	r3, [r4, #12]
 800e0ba:	e7ad      	b.n	800e018 <__sflush_r+0x1c>
 800e0bc:	690f      	ldr	r7, [r1, #16]
 800e0be:	2f00      	cmp	r7, #0
 800e0c0:	d0a9      	beq.n	800e016 <__sflush_r+0x1a>
 800e0c2:	0793      	lsls	r3, r2, #30
 800e0c4:	680e      	ldr	r6, [r1, #0]
 800e0c6:	bf08      	it	eq
 800e0c8:	694b      	ldreq	r3, [r1, #20]
 800e0ca:	600f      	str	r7, [r1, #0]
 800e0cc:	bf18      	it	ne
 800e0ce:	2300      	movne	r3, #0
 800e0d0:	eba6 0807 	sub.w	r8, r6, r7
 800e0d4:	608b      	str	r3, [r1, #8]
 800e0d6:	f1b8 0f00 	cmp.w	r8, #0
 800e0da:	dd9c      	ble.n	800e016 <__sflush_r+0x1a>
 800e0dc:	6a21      	ldr	r1, [r4, #32]
 800e0de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0e0:	4643      	mov	r3, r8
 800e0e2:	463a      	mov	r2, r7
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	47b0      	blx	r6
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	dc06      	bgt.n	800e0fa <__sflush_r+0xfe>
 800e0ec:	89a3      	ldrh	r3, [r4, #12]
 800e0ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0f2:	81a3      	strh	r3, [r4, #12]
 800e0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f8:	e78e      	b.n	800e018 <__sflush_r+0x1c>
 800e0fa:	4407      	add	r7, r0
 800e0fc:	eba8 0800 	sub.w	r8, r8, r0
 800e100:	e7e9      	b.n	800e0d6 <__sflush_r+0xda>
 800e102:	bf00      	nop
 800e104:	dfbffffe 	.word	0xdfbffffe

0800e108 <_fflush_r>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	690b      	ldr	r3, [r1, #16]
 800e10c:	4605      	mov	r5, r0
 800e10e:	460c      	mov	r4, r1
 800e110:	b913      	cbnz	r3, 800e118 <_fflush_r+0x10>
 800e112:	2500      	movs	r5, #0
 800e114:	4628      	mov	r0, r5
 800e116:	bd38      	pop	{r3, r4, r5, pc}
 800e118:	b118      	cbz	r0, 800e122 <_fflush_r+0x1a>
 800e11a:	6a03      	ldr	r3, [r0, #32]
 800e11c:	b90b      	cbnz	r3, 800e122 <_fflush_r+0x1a>
 800e11e:	f7fe f9ef 	bl	800c500 <__sinit>
 800e122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d0f3      	beq.n	800e112 <_fflush_r+0xa>
 800e12a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e12c:	07d0      	lsls	r0, r2, #31
 800e12e:	d404      	bmi.n	800e13a <_fflush_r+0x32>
 800e130:	0599      	lsls	r1, r3, #22
 800e132:	d402      	bmi.n	800e13a <_fflush_r+0x32>
 800e134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e136:	f7fe fb0e 	bl	800c756 <__retarget_lock_acquire_recursive>
 800e13a:	4628      	mov	r0, r5
 800e13c:	4621      	mov	r1, r4
 800e13e:	f7ff ff5d 	bl	800dffc <__sflush_r>
 800e142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e144:	07da      	lsls	r2, r3, #31
 800e146:	4605      	mov	r5, r0
 800e148:	d4e4      	bmi.n	800e114 <_fflush_r+0xc>
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	059b      	lsls	r3, r3, #22
 800e14e:	d4e1      	bmi.n	800e114 <_fflush_r+0xc>
 800e150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e152:	f7fe fb01 	bl	800c758 <__retarget_lock_release_recursive>
 800e156:	e7dd      	b.n	800e114 <_fflush_r+0xc>

0800e158 <memmove>:
 800e158:	4288      	cmp	r0, r1
 800e15a:	b510      	push	{r4, lr}
 800e15c:	eb01 0402 	add.w	r4, r1, r2
 800e160:	d902      	bls.n	800e168 <memmove+0x10>
 800e162:	4284      	cmp	r4, r0
 800e164:	4623      	mov	r3, r4
 800e166:	d807      	bhi.n	800e178 <memmove+0x20>
 800e168:	1e43      	subs	r3, r0, #1
 800e16a:	42a1      	cmp	r1, r4
 800e16c:	d008      	beq.n	800e180 <memmove+0x28>
 800e16e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e172:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e176:	e7f8      	b.n	800e16a <memmove+0x12>
 800e178:	4402      	add	r2, r0
 800e17a:	4601      	mov	r1, r0
 800e17c:	428a      	cmp	r2, r1
 800e17e:	d100      	bne.n	800e182 <memmove+0x2a>
 800e180:	bd10      	pop	{r4, pc}
 800e182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e18a:	e7f7      	b.n	800e17c <memmove+0x24>

0800e18c <_sbrk_r>:
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	4d06      	ldr	r5, [pc, #24]	; (800e1a8 <_sbrk_r+0x1c>)
 800e190:	2300      	movs	r3, #0
 800e192:	4604      	mov	r4, r0
 800e194:	4608      	mov	r0, r1
 800e196:	602b      	str	r3, [r5, #0]
 800e198:	f7f3 fa86 	bl	80016a8 <_sbrk>
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	d102      	bne.n	800e1a6 <_sbrk_r+0x1a>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	b103      	cbz	r3, 800e1a6 <_sbrk_r+0x1a>
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	200017b8 	.word	0x200017b8

0800e1ac <memcpy>:
 800e1ac:	440a      	add	r2, r1
 800e1ae:	4291      	cmp	r1, r2
 800e1b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1b4:	d100      	bne.n	800e1b8 <memcpy+0xc>
 800e1b6:	4770      	bx	lr
 800e1b8:	b510      	push	{r4, lr}
 800e1ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1c2:	4291      	cmp	r1, r2
 800e1c4:	d1f9      	bne.n	800e1ba <memcpy+0xe>
 800e1c6:	bd10      	pop	{r4, pc}

0800e1c8 <__assert_func>:
 800e1c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1ca:	4614      	mov	r4, r2
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	4b09      	ldr	r3, [pc, #36]	; (800e1f4 <__assert_func+0x2c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	68d8      	ldr	r0, [r3, #12]
 800e1d6:	b14c      	cbz	r4, 800e1ec <__assert_func+0x24>
 800e1d8:	4b07      	ldr	r3, [pc, #28]	; (800e1f8 <__assert_func+0x30>)
 800e1da:	9100      	str	r1, [sp, #0]
 800e1dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1e0:	4906      	ldr	r1, [pc, #24]	; (800e1fc <__assert_func+0x34>)
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	f000 f872 	bl	800e2cc <fiprintf>
 800e1e8:	f000 f882 	bl	800e2f0 <abort>
 800e1ec:	4b04      	ldr	r3, [pc, #16]	; (800e200 <__assert_func+0x38>)
 800e1ee:	461c      	mov	r4, r3
 800e1f0:	e7f3      	b.n	800e1da <__assert_func+0x12>
 800e1f2:	bf00      	nop
 800e1f4:	200001d4 	.word	0x200001d4
 800e1f8:	0800eb67 	.word	0x0800eb67
 800e1fc:	0800eb74 	.word	0x0800eb74
 800e200:	0800eba2 	.word	0x0800eba2

0800e204 <_calloc_r>:
 800e204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e206:	fba1 2402 	umull	r2, r4, r1, r2
 800e20a:	b94c      	cbnz	r4, 800e220 <_calloc_r+0x1c>
 800e20c:	4611      	mov	r1, r2
 800e20e:	9201      	str	r2, [sp, #4]
 800e210:	f7ff f994 	bl	800d53c <_malloc_r>
 800e214:	9a01      	ldr	r2, [sp, #4]
 800e216:	4605      	mov	r5, r0
 800e218:	b930      	cbnz	r0, 800e228 <_calloc_r+0x24>
 800e21a:	4628      	mov	r0, r5
 800e21c:	b003      	add	sp, #12
 800e21e:	bd30      	pop	{r4, r5, pc}
 800e220:	220c      	movs	r2, #12
 800e222:	6002      	str	r2, [r0, #0]
 800e224:	2500      	movs	r5, #0
 800e226:	e7f8      	b.n	800e21a <_calloc_r+0x16>
 800e228:	4621      	mov	r1, r4
 800e22a:	f7fe fa16 	bl	800c65a <memset>
 800e22e:	e7f4      	b.n	800e21a <_calloc_r+0x16>

0800e230 <__ascii_mbtowc>:
 800e230:	b082      	sub	sp, #8
 800e232:	b901      	cbnz	r1, 800e236 <__ascii_mbtowc+0x6>
 800e234:	a901      	add	r1, sp, #4
 800e236:	b142      	cbz	r2, 800e24a <__ascii_mbtowc+0x1a>
 800e238:	b14b      	cbz	r3, 800e24e <__ascii_mbtowc+0x1e>
 800e23a:	7813      	ldrb	r3, [r2, #0]
 800e23c:	600b      	str	r3, [r1, #0]
 800e23e:	7812      	ldrb	r2, [r2, #0]
 800e240:	1e10      	subs	r0, r2, #0
 800e242:	bf18      	it	ne
 800e244:	2001      	movne	r0, #1
 800e246:	b002      	add	sp, #8
 800e248:	4770      	bx	lr
 800e24a:	4610      	mov	r0, r2
 800e24c:	e7fb      	b.n	800e246 <__ascii_mbtowc+0x16>
 800e24e:	f06f 0001 	mvn.w	r0, #1
 800e252:	e7f8      	b.n	800e246 <__ascii_mbtowc+0x16>

0800e254 <_realloc_r>:
 800e254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e258:	4680      	mov	r8, r0
 800e25a:	4614      	mov	r4, r2
 800e25c:	460e      	mov	r6, r1
 800e25e:	b921      	cbnz	r1, 800e26a <_realloc_r+0x16>
 800e260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e264:	4611      	mov	r1, r2
 800e266:	f7ff b969 	b.w	800d53c <_malloc_r>
 800e26a:	b92a      	cbnz	r2, 800e278 <_realloc_r+0x24>
 800e26c:	f7ff f8f2 	bl	800d454 <_free_r>
 800e270:	4625      	mov	r5, r4
 800e272:	4628      	mov	r0, r5
 800e274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e278:	f000 f841 	bl	800e2fe <_malloc_usable_size_r>
 800e27c:	4284      	cmp	r4, r0
 800e27e:	4607      	mov	r7, r0
 800e280:	d802      	bhi.n	800e288 <_realloc_r+0x34>
 800e282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e286:	d812      	bhi.n	800e2ae <_realloc_r+0x5a>
 800e288:	4621      	mov	r1, r4
 800e28a:	4640      	mov	r0, r8
 800e28c:	f7ff f956 	bl	800d53c <_malloc_r>
 800e290:	4605      	mov	r5, r0
 800e292:	2800      	cmp	r0, #0
 800e294:	d0ed      	beq.n	800e272 <_realloc_r+0x1e>
 800e296:	42bc      	cmp	r4, r7
 800e298:	4622      	mov	r2, r4
 800e29a:	4631      	mov	r1, r6
 800e29c:	bf28      	it	cs
 800e29e:	463a      	movcs	r2, r7
 800e2a0:	f7ff ff84 	bl	800e1ac <memcpy>
 800e2a4:	4631      	mov	r1, r6
 800e2a6:	4640      	mov	r0, r8
 800e2a8:	f7ff f8d4 	bl	800d454 <_free_r>
 800e2ac:	e7e1      	b.n	800e272 <_realloc_r+0x1e>
 800e2ae:	4635      	mov	r5, r6
 800e2b0:	e7df      	b.n	800e272 <_realloc_r+0x1e>

0800e2b2 <__ascii_wctomb>:
 800e2b2:	b149      	cbz	r1, 800e2c8 <__ascii_wctomb+0x16>
 800e2b4:	2aff      	cmp	r2, #255	; 0xff
 800e2b6:	bf85      	ittet	hi
 800e2b8:	238a      	movhi	r3, #138	; 0x8a
 800e2ba:	6003      	strhi	r3, [r0, #0]
 800e2bc:	700a      	strbls	r2, [r1, #0]
 800e2be:	f04f 30ff 	movhi.w	r0, #4294967295
 800e2c2:	bf98      	it	ls
 800e2c4:	2001      	movls	r0, #1
 800e2c6:	4770      	bx	lr
 800e2c8:	4608      	mov	r0, r1
 800e2ca:	4770      	bx	lr

0800e2cc <fiprintf>:
 800e2cc:	b40e      	push	{r1, r2, r3}
 800e2ce:	b503      	push	{r0, r1, lr}
 800e2d0:	4601      	mov	r1, r0
 800e2d2:	ab03      	add	r3, sp, #12
 800e2d4:	4805      	ldr	r0, [pc, #20]	; (800e2ec <fiprintf+0x20>)
 800e2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2da:	6800      	ldr	r0, [r0, #0]
 800e2dc:	9301      	str	r3, [sp, #4]
 800e2de:	f000 f83f 	bl	800e360 <_vfiprintf_r>
 800e2e2:	b002      	add	sp, #8
 800e2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2e8:	b003      	add	sp, #12
 800e2ea:	4770      	bx	lr
 800e2ec:	200001d4 	.word	0x200001d4

0800e2f0 <abort>:
 800e2f0:	b508      	push	{r3, lr}
 800e2f2:	2006      	movs	r0, #6
 800e2f4:	f000 fa0c 	bl	800e710 <raise>
 800e2f8:	2001      	movs	r0, #1
 800e2fa:	f7f3 f95d 	bl	80015b8 <_exit>

0800e2fe <_malloc_usable_size_r>:
 800e2fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e302:	1f18      	subs	r0, r3, #4
 800e304:	2b00      	cmp	r3, #0
 800e306:	bfbc      	itt	lt
 800e308:	580b      	ldrlt	r3, [r1, r0]
 800e30a:	18c0      	addlt	r0, r0, r3
 800e30c:	4770      	bx	lr

0800e30e <__sfputc_r>:
 800e30e:	6893      	ldr	r3, [r2, #8]
 800e310:	3b01      	subs	r3, #1
 800e312:	2b00      	cmp	r3, #0
 800e314:	b410      	push	{r4}
 800e316:	6093      	str	r3, [r2, #8]
 800e318:	da08      	bge.n	800e32c <__sfputc_r+0x1e>
 800e31a:	6994      	ldr	r4, [r2, #24]
 800e31c:	42a3      	cmp	r3, r4
 800e31e:	db01      	blt.n	800e324 <__sfputc_r+0x16>
 800e320:	290a      	cmp	r1, #10
 800e322:	d103      	bne.n	800e32c <__sfputc_r+0x1e>
 800e324:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e328:	f000 b934 	b.w	800e594 <__swbuf_r>
 800e32c:	6813      	ldr	r3, [r2, #0]
 800e32e:	1c58      	adds	r0, r3, #1
 800e330:	6010      	str	r0, [r2, #0]
 800e332:	7019      	strb	r1, [r3, #0]
 800e334:	4608      	mov	r0, r1
 800e336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <__sfputs_r>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	4606      	mov	r6, r0
 800e340:	460f      	mov	r7, r1
 800e342:	4614      	mov	r4, r2
 800e344:	18d5      	adds	r5, r2, r3
 800e346:	42ac      	cmp	r4, r5
 800e348:	d101      	bne.n	800e34e <__sfputs_r+0x12>
 800e34a:	2000      	movs	r0, #0
 800e34c:	e007      	b.n	800e35e <__sfputs_r+0x22>
 800e34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e352:	463a      	mov	r2, r7
 800e354:	4630      	mov	r0, r6
 800e356:	f7ff ffda 	bl	800e30e <__sfputc_r>
 800e35a:	1c43      	adds	r3, r0, #1
 800e35c:	d1f3      	bne.n	800e346 <__sfputs_r+0xa>
 800e35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e360 <_vfiprintf_r>:
 800e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	460d      	mov	r5, r1
 800e366:	b09d      	sub	sp, #116	; 0x74
 800e368:	4614      	mov	r4, r2
 800e36a:	4698      	mov	r8, r3
 800e36c:	4606      	mov	r6, r0
 800e36e:	b118      	cbz	r0, 800e378 <_vfiprintf_r+0x18>
 800e370:	6a03      	ldr	r3, [r0, #32]
 800e372:	b90b      	cbnz	r3, 800e378 <_vfiprintf_r+0x18>
 800e374:	f7fe f8c4 	bl	800c500 <__sinit>
 800e378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e37a:	07d9      	lsls	r1, r3, #31
 800e37c:	d405      	bmi.n	800e38a <_vfiprintf_r+0x2a>
 800e37e:	89ab      	ldrh	r3, [r5, #12]
 800e380:	059a      	lsls	r2, r3, #22
 800e382:	d402      	bmi.n	800e38a <_vfiprintf_r+0x2a>
 800e384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e386:	f7fe f9e6 	bl	800c756 <__retarget_lock_acquire_recursive>
 800e38a:	89ab      	ldrh	r3, [r5, #12]
 800e38c:	071b      	lsls	r3, r3, #28
 800e38e:	d501      	bpl.n	800e394 <_vfiprintf_r+0x34>
 800e390:	692b      	ldr	r3, [r5, #16]
 800e392:	b99b      	cbnz	r3, 800e3bc <_vfiprintf_r+0x5c>
 800e394:	4629      	mov	r1, r5
 800e396:	4630      	mov	r0, r6
 800e398:	f000 f93a 	bl	800e610 <__swsetup_r>
 800e39c:	b170      	cbz	r0, 800e3bc <_vfiprintf_r+0x5c>
 800e39e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3a0:	07dc      	lsls	r4, r3, #31
 800e3a2:	d504      	bpl.n	800e3ae <_vfiprintf_r+0x4e>
 800e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a8:	b01d      	add	sp, #116	; 0x74
 800e3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ae:	89ab      	ldrh	r3, [r5, #12]
 800e3b0:	0598      	lsls	r0, r3, #22
 800e3b2:	d4f7      	bmi.n	800e3a4 <_vfiprintf_r+0x44>
 800e3b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3b6:	f7fe f9cf 	bl	800c758 <__retarget_lock_release_recursive>
 800e3ba:	e7f3      	b.n	800e3a4 <_vfiprintf_r+0x44>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	9309      	str	r3, [sp, #36]	; 0x24
 800e3c0:	2320      	movs	r3, #32
 800e3c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3ca:	2330      	movs	r3, #48	; 0x30
 800e3cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e580 <_vfiprintf_r+0x220>
 800e3d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3d4:	f04f 0901 	mov.w	r9, #1
 800e3d8:	4623      	mov	r3, r4
 800e3da:	469a      	mov	sl, r3
 800e3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3e0:	b10a      	cbz	r2, 800e3e6 <_vfiprintf_r+0x86>
 800e3e2:	2a25      	cmp	r2, #37	; 0x25
 800e3e4:	d1f9      	bne.n	800e3da <_vfiprintf_r+0x7a>
 800e3e6:	ebba 0b04 	subs.w	fp, sl, r4
 800e3ea:	d00b      	beq.n	800e404 <_vfiprintf_r+0xa4>
 800e3ec:	465b      	mov	r3, fp
 800e3ee:	4622      	mov	r2, r4
 800e3f0:	4629      	mov	r1, r5
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	f7ff ffa2 	bl	800e33c <__sfputs_r>
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	f000 80a9 	beq.w	800e550 <_vfiprintf_r+0x1f0>
 800e3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e400:	445a      	add	r2, fp
 800e402:	9209      	str	r2, [sp, #36]	; 0x24
 800e404:	f89a 3000 	ldrb.w	r3, [sl]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f000 80a1 	beq.w	800e550 <_vfiprintf_r+0x1f0>
 800e40e:	2300      	movs	r3, #0
 800e410:	f04f 32ff 	mov.w	r2, #4294967295
 800e414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e418:	f10a 0a01 	add.w	sl, sl, #1
 800e41c:	9304      	str	r3, [sp, #16]
 800e41e:	9307      	str	r3, [sp, #28]
 800e420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e424:	931a      	str	r3, [sp, #104]	; 0x68
 800e426:	4654      	mov	r4, sl
 800e428:	2205      	movs	r2, #5
 800e42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e42e:	4854      	ldr	r0, [pc, #336]	; (800e580 <_vfiprintf_r+0x220>)
 800e430:	f7f1 fece 	bl	80001d0 <memchr>
 800e434:	9a04      	ldr	r2, [sp, #16]
 800e436:	b9d8      	cbnz	r0, 800e470 <_vfiprintf_r+0x110>
 800e438:	06d1      	lsls	r1, r2, #27
 800e43a:	bf44      	itt	mi
 800e43c:	2320      	movmi	r3, #32
 800e43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e442:	0713      	lsls	r3, r2, #28
 800e444:	bf44      	itt	mi
 800e446:	232b      	movmi	r3, #43	; 0x2b
 800e448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e44c:	f89a 3000 	ldrb.w	r3, [sl]
 800e450:	2b2a      	cmp	r3, #42	; 0x2a
 800e452:	d015      	beq.n	800e480 <_vfiprintf_r+0x120>
 800e454:	9a07      	ldr	r2, [sp, #28]
 800e456:	4654      	mov	r4, sl
 800e458:	2000      	movs	r0, #0
 800e45a:	f04f 0c0a 	mov.w	ip, #10
 800e45e:	4621      	mov	r1, r4
 800e460:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e464:	3b30      	subs	r3, #48	; 0x30
 800e466:	2b09      	cmp	r3, #9
 800e468:	d94d      	bls.n	800e506 <_vfiprintf_r+0x1a6>
 800e46a:	b1b0      	cbz	r0, 800e49a <_vfiprintf_r+0x13a>
 800e46c:	9207      	str	r2, [sp, #28]
 800e46e:	e014      	b.n	800e49a <_vfiprintf_r+0x13a>
 800e470:	eba0 0308 	sub.w	r3, r0, r8
 800e474:	fa09 f303 	lsl.w	r3, r9, r3
 800e478:	4313      	orrs	r3, r2
 800e47a:	9304      	str	r3, [sp, #16]
 800e47c:	46a2      	mov	sl, r4
 800e47e:	e7d2      	b.n	800e426 <_vfiprintf_r+0xc6>
 800e480:	9b03      	ldr	r3, [sp, #12]
 800e482:	1d19      	adds	r1, r3, #4
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	9103      	str	r1, [sp, #12]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	bfbb      	ittet	lt
 800e48c:	425b      	neglt	r3, r3
 800e48e:	f042 0202 	orrlt.w	r2, r2, #2
 800e492:	9307      	strge	r3, [sp, #28]
 800e494:	9307      	strlt	r3, [sp, #28]
 800e496:	bfb8      	it	lt
 800e498:	9204      	strlt	r2, [sp, #16]
 800e49a:	7823      	ldrb	r3, [r4, #0]
 800e49c:	2b2e      	cmp	r3, #46	; 0x2e
 800e49e:	d10c      	bne.n	800e4ba <_vfiprintf_r+0x15a>
 800e4a0:	7863      	ldrb	r3, [r4, #1]
 800e4a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e4a4:	d134      	bne.n	800e510 <_vfiprintf_r+0x1b0>
 800e4a6:	9b03      	ldr	r3, [sp, #12]
 800e4a8:	1d1a      	adds	r2, r3, #4
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	9203      	str	r2, [sp, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	bfb8      	it	lt
 800e4b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4b6:	3402      	adds	r4, #2
 800e4b8:	9305      	str	r3, [sp, #20]
 800e4ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e590 <_vfiprintf_r+0x230>
 800e4be:	7821      	ldrb	r1, [r4, #0]
 800e4c0:	2203      	movs	r2, #3
 800e4c2:	4650      	mov	r0, sl
 800e4c4:	f7f1 fe84 	bl	80001d0 <memchr>
 800e4c8:	b138      	cbz	r0, 800e4da <_vfiprintf_r+0x17a>
 800e4ca:	9b04      	ldr	r3, [sp, #16]
 800e4cc:	eba0 000a 	sub.w	r0, r0, sl
 800e4d0:	2240      	movs	r2, #64	; 0x40
 800e4d2:	4082      	lsls	r2, r0
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	3401      	adds	r4, #1
 800e4d8:	9304      	str	r3, [sp, #16]
 800e4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4de:	4829      	ldr	r0, [pc, #164]	; (800e584 <_vfiprintf_r+0x224>)
 800e4e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4e4:	2206      	movs	r2, #6
 800e4e6:	f7f1 fe73 	bl	80001d0 <memchr>
 800e4ea:	2800      	cmp	r0, #0
 800e4ec:	d03f      	beq.n	800e56e <_vfiprintf_r+0x20e>
 800e4ee:	4b26      	ldr	r3, [pc, #152]	; (800e588 <_vfiprintf_r+0x228>)
 800e4f0:	bb1b      	cbnz	r3, 800e53a <_vfiprintf_r+0x1da>
 800e4f2:	9b03      	ldr	r3, [sp, #12]
 800e4f4:	3307      	adds	r3, #7
 800e4f6:	f023 0307 	bic.w	r3, r3, #7
 800e4fa:	3308      	adds	r3, #8
 800e4fc:	9303      	str	r3, [sp, #12]
 800e4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e500:	443b      	add	r3, r7
 800e502:	9309      	str	r3, [sp, #36]	; 0x24
 800e504:	e768      	b.n	800e3d8 <_vfiprintf_r+0x78>
 800e506:	fb0c 3202 	mla	r2, ip, r2, r3
 800e50a:	460c      	mov	r4, r1
 800e50c:	2001      	movs	r0, #1
 800e50e:	e7a6      	b.n	800e45e <_vfiprintf_r+0xfe>
 800e510:	2300      	movs	r3, #0
 800e512:	3401      	adds	r4, #1
 800e514:	9305      	str	r3, [sp, #20]
 800e516:	4619      	mov	r1, r3
 800e518:	f04f 0c0a 	mov.w	ip, #10
 800e51c:	4620      	mov	r0, r4
 800e51e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e522:	3a30      	subs	r2, #48	; 0x30
 800e524:	2a09      	cmp	r2, #9
 800e526:	d903      	bls.n	800e530 <_vfiprintf_r+0x1d0>
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d0c6      	beq.n	800e4ba <_vfiprintf_r+0x15a>
 800e52c:	9105      	str	r1, [sp, #20]
 800e52e:	e7c4      	b.n	800e4ba <_vfiprintf_r+0x15a>
 800e530:	fb0c 2101 	mla	r1, ip, r1, r2
 800e534:	4604      	mov	r4, r0
 800e536:	2301      	movs	r3, #1
 800e538:	e7f0      	b.n	800e51c <_vfiprintf_r+0x1bc>
 800e53a:	ab03      	add	r3, sp, #12
 800e53c:	9300      	str	r3, [sp, #0]
 800e53e:	462a      	mov	r2, r5
 800e540:	4b12      	ldr	r3, [pc, #72]	; (800e58c <_vfiprintf_r+0x22c>)
 800e542:	a904      	add	r1, sp, #16
 800e544:	4630      	mov	r0, r6
 800e546:	f7fd fb89 	bl	800bc5c <_printf_float>
 800e54a:	4607      	mov	r7, r0
 800e54c:	1c78      	adds	r0, r7, #1
 800e54e:	d1d6      	bne.n	800e4fe <_vfiprintf_r+0x19e>
 800e550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e552:	07d9      	lsls	r1, r3, #31
 800e554:	d405      	bmi.n	800e562 <_vfiprintf_r+0x202>
 800e556:	89ab      	ldrh	r3, [r5, #12]
 800e558:	059a      	lsls	r2, r3, #22
 800e55a:	d402      	bmi.n	800e562 <_vfiprintf_r+0x202>
 800e55c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e55e:	f7fe f8fb 	bl	800c758 <__retarget_lock_release_recursive>
 800e562:	89ab      	ldrh	r3, [r5, #12]
 800e564:	065b      	lsls	r3, r3, #25
 800e566:	f53f af1d 	bmi.w	800e3a4 <_vfiprintf_r+0x44>
 800e56a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e56c:	e71c      	b.n	800e3a8 <_vfiprintf_r+0x48>
 800e56e:	ab03      	add	r3, sp, #12
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	462a      	mov	r2, r5
 800e574:	4b05      	ldr	r3, [pc, #20]	; (800e58c <_vfiprintf_r+0x22c>)
 800e576:	a904      	add	r1, sp, #16
 800e578:	4630      	mov	r0, r6
 800e57a:	f7fd fe13 	bl	800c1a4 <_printf_i>
 800e57e:	e7e4      	b.n	800e54a <_vfiprintf_r+0x1ea>
 800e580:	0800eb4c 	.word	0x0800eb4c
 800e584:	0800eb56 	.word	0x0800eb56
 800e588:	0800bc5d 	.word	0x0800bc5d
 800e58c:	0800e33d 	.word	0x0800e33d
 800e590:	0800eb52 	.word	0x0800eb52

0800e594 <__swbuf_r>:
 800e594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e596:	460e      	mov	r6, r1
 800e598:	4614      	mov	r4, r2
 800e59a:	4605      	mov	r5, r0
 800e59c:	b118      	cbz	r0, 800e5a6 <__swbuf_r+0x12>
 800e59e:	6a03      	ldr	r3, [r0, #32]
 800e5a0:	b90b      	cbnz	r3, 800e5a6 <__swbuf_r+0x12>
 800e5a2:	f7fd ffad 	bl	800c500 <__sinit>
 800e5a6:	69a3      	ldr	r3, [r4, #24]
 800e5a8:	60a3      	str	r3, [r4, #8]
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	071a      	lsls	r2, r3, #28
 800e5ae:	d525      	bpl.n	800e5fc <__swbuf_r+0x68>
 800e5b0:	6923      	ldr	r3, [r4, #16]
 800e5b2:	b31b      	cbz	r3, 800e5fc <__swbuf_r+0x68>
 800e5b4:	6823      	ldr	r3, [r4, #0]
 800e5b6:	6922      	ldr	r2, [r4, #16]
 800e5b8:	1a98      	subs	r0, r3, r2
 800e5ba:	6963      	ldr	r3, [r4, #20]
 800e5bc:	b2f6      	uxtb	r6, r6
 800e5be:	4283      	cmp	r3, r0
 800e5c0:	4637      	mov	r7, r6
 800e5c2:	dc04      	bgt.n	800e5ce <__swbuf_r+0x3a>
 800e5c4:	4621      	mov	r1, r4
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	f7ff fd9e 	bl	800e108 <_fflush_r>
 800e5cc:	b9e0      	cbnz	r0, 800e608 <__swbuf_r+0x74>
 800e5ce:	68a3      	ldr	r3, [r4, #8]
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	60a3      	str	r3, [r4, #8]
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	1c5a      	adds	r2, r3, #1
 800e5d8:	6022      	str	r2, [r4, #0]
 800e5da:	701e      	strb	r6, [r3, #0]
 800e5dc:	6962      	ldr	r2, [r4, #20]
 800e5de:	1c43      	adds	r3, r0, #1
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d004      	beq.n	800e5ee <__swbuf_r+0x5a>
 800e5e4:	89a3      	ldrh	r3, [r4, #12]
 800e5e6:	07db      	lsls	r3, r3, #31
 800e5e8:	d506      	bpl.n	800e5f8 <__swbuf_r+0x64>
 800e5ea:	2e0a      	cmp	r6, #10
 800e5ec:	d104      	bne.n	800e5f8 <__swbuf_r+0x64>
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	4628      	mov	r0, r5
 800e5f2:	f7ff fd89 	bl	800e108 <_fflush_r>
 800e5f6:	b938      	cbnz	r0, 800e608 <__swbuf_r+0x74>
 800e5f8:	4638      	mov	r0, r7
 800e5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5fc:	4621      	mov	r1, r4
 800e5fe:	4628      	mov	r0, r5
 800e600:	f000 f806 	bl	800e610 <__swsetup_r>
 800e604:	2800      	cmp	r0, #0
 800e606:	d0d5      	beq.n	800e5b4 <__swbuf_r+0x20>
 800e608:	f04f 37ff 	mov.w	r7, #4294967295
 800e60c:	e7f4      	b.n	800e5f8 <__swbuf_r+0x64>
	...

0800e610 <__swsetup_r>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	4b2a      	ldr	r3, [pc, #168]	; (800e6bc <__swsetup_r+0xac>)
 800e614:	4605      	mov	r5, r0
 800e616:	6818      	ldr	r0, [r3, #0]
 800e618:	460c      	mov	r4, r1
 800e61a:	b118      	cbz	r0, 800e624 <__swsetup_r+0x14>
 800e61c:	6a03      	ldr	r3, [r0, #32]
 800e61e:	b90b      	cbnz	r3, 800e624 <__swsetup_r+0x14>
 800e620:	f7fd ff6e 	bl	800c500 <__sinit>
 800e624:	89a3      	ldrh	r3, [r4, #12]
 800e626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e62a:	0718      	lsls	r0, r3, #28
 800e62c:	d422      	bmi.n	800e674 <__swsetup_r+0x64>
 800e62e:	06d9      	lsls	r1, r3, #27
 800e630:	d407      	bmi.n	800e642 <__swsetup_r+0x32>
 800e632:	2309      	movs	r3, #9
 800e634:	602b      	str	r3, [r5, #0]
 800e636:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e63a:	81a3      	strh	r3, [r4, #12]
 800e63c:	f04f 30ff 	mov.w	r0, #4294967295
 800e640:	e034      	b.n	800e6ac <__swsetup_r+0x9c>
 800e642:	0758      	lsls	r0, r3, #29
 800e644:	d512      	bpl.n	800e66c <__swsetup_r+0x5c>
 800e646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e648:	b141      	cbz	r1, 800e65c <__swsetup_r+0x4c>
 800e64a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e64e:	4299      	cmp	r1, r3
 800e650:	d002      	beq.n	800e658 <__swsetup_r+0x48>
 800e652:	4628      	mov	r0, r5
 800e654:	f7fe fefe 	bl	800d454 <_free_r>
 800e658:	2300      	movs	r3, #0
 800e65a:	6363      	str	r3, [r4, #52]	; 0x34
 800e65c:	89a3      	ldrh	r3, [r4, #12]
 800e65e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e662:	81a3      	strh	r3, [r4, #12]
 800e664:	2300      	movs	r3, #0
 800e666:	6063      	str	r3, [r4, #4]
 800e668:	6923      	ldr	r3, [r4, #16]
 800e66a:	6023      	str	r3, [r4, #0]
 800e66c:	89a3      	ldrh	r3, [r4, #12]
 800e66e:	f043 0308 	orr.w	r3, r3, #8
 800e672:	81a3      	strh	r3, [r4, #12]
 800e674:	6923      	ldr	r3, [r4, #16]
 800e676:	b94b      	cbnz	r3, 800e68c <__swsetup_r+0x7c>
 800e678:	89a3      	ldrh	r3, [r4, #12]
 800e67a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e67e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e682:	d003      	beq.n	800e68c <__swsetup_r+0x7c>
 800e684:	4621      	mov	r1, r4
 800e686:	4628      	mov	r0, r5
 800e688:	f000 f884 	bl	800e794 <__smakebuf_r>
 800e68c:	89a0      	ldrh	r0, [r4, #12]
 800e68e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e692:	f010 0301 	ands.w	r3, r0, #1
 800e696:	d00a      	beq.n	800e6ae <__swsetup_r+0x9e>
 800e698:	2300      	movs	r3, #0
 800e69a:	60a3      	str	r3, [r4, #8]
 800e69c:	6963      	ldr	r3, [r4, #20]
 800e69e:	425b      	negs	r3, r3
 800e6a0:	61a3      	str	r3, [r4, #24]
 800e6a2:	6923      	ldr	r3, [r4, #16]
 800e6a4:	b943      	cbnz	r3, 800e6b8 <__swsetup_r+0xa8>
 800e6a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6aa:	d1c4      	bne.n	800e636 <__swsetup_r+0x26>
 800e6ac:	bd38      	pop	{r3, r4, r5, pc}
 800e6ae:	0781      	lsls	r1, r0, #30
 800e6b0:	bf58      	it	pl
 800e6b2:	6963      	ldrpl	r3, [r4, #20]
 800e6b4:	60a3      	str	r3, [r4, #8]
 800e6b6:	e7f4      	b.n	800e6a2 <__swsetup_r+0x92>
 800e6b8:	2000      	movs	r0, #0
 800e6ba:	e7f7      	b.n	800e6ac <__swsetup_r+0x9c>
 800e6bc:	200001d4 	.word	0x200001d4

0800e6c0 <_raise_r>:
 800e6c0:	291f      	cmp	r1, #31
 800e6c2:	b538      	push	{r3, r4, r5, lr}
 800e6c4:	4604      	mov	r4, r0
 800e6c6:	460d      	mov	r5, r1
 800e6c8:	d904      	bls.n	800e6d4 <_raise_r+0x14>
 800e6ca:	2316      	movs	r3, #22
 800e6cc:	6003      	str	r3, [r0, #0]
 800e6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d2:	bd38      	pop	{r3, r4, r5, pc}
 800e6d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e6d6:	b112      	cbz	r2, 800e6de <_raise_r+0x1e>
 800e6d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6dc:	b94b      	cbnz	r3, 800e6f2 <_raise_r+0x32>
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f000 f830 	bl	800e744 <_getpid_r>
 800e6e4:	462a      	mov	r2, r5
 800e6e6:	4601      	mov	r1, r0
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6ee:	f000 b817 	b.w	800e720 <_kill_r>
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d00a      	beq.n	800e70c <_raise_r+0x4c>
 800e6f6:	1c59      	adds	r1, r3, #1
 800e6f8:	d103      	bne.n	800e702 <_raise_r+0x42>
 800e6fa:	2316      	movs	r3, #22
 800e6fc:	6003      	str	r3, [r0, #0]
 800e6fe:	2001      	movs	r0, #1
 800e700:	e7e7      	b.n	800e6d2 <_raise_r+0x12>
 800e702:	2400      	movs	r4, #0
 800e704:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e708:	4628      	mov	r0, r5
 800e70a:	4798      	blx	r3
 800e70c:	2000      	movs	r0, #0
 800e70e:	e7e0      	b.n	800e6d2 <_raise_r+0x12>

0800e710 <raise>:
 800e710:	4b02      	ldr	r3, [pc, #8]	; (800e71c <raise+0xc>)
 800e712:	4601      	mov	r1, r0
 800e714:	6818      	ldr	r0, [r3, #0]
 800e716:	f7ff bfd3 	b.w	800e6c0 <_raise_r>
 800e71a:	bf00      	nop
 800e71c:	200001d4 	.word	0x200001d4

0800e720 <_kill_r>:
 800e720:	b538      	push	{r3, r4, r5, lr}
 800e722:	4d07      	ldr	r5, [pc, #28]	; (800e740 <_kill_r+0x20>)
 800e724:	2300      	movs	r3, #0
 800e726:	4604      	mov	r4, r0
 800e728:	4608      	mov	r0, r1
 800e72a:	4611      	mov	r1, r2
 800e72c:	602b      	str	r3, [r5, #0]
 800e72e:	f7f2 ff33 	bl	8001598 <_kill>
 800e732:	1c43      	adds	r3, r0, #1
 800e734:	d102      	bne.n	800e73c <_kill_r+0x1c>
 800e736:	682b      	ldr	r3, [r5, #0]
 800e738:	b103      	cbz	r3, 800e73c <_kill_r+0x1c>
 800e73a:	6023      	str	r3, [r4, #0]
 800e73c:	bd38      	pop	{r3, r4, r5, pc}
 800e73e:	bf00      	nop
 800e740:	200017b8 	.word	0x200017b8

0800e744 <_getpid_r>:
 800e744:	f7f2 bf20 	b.w	8001588 <_getpid>

0800e748 <__swhatbuf_r>:
 800e748:	b570      	push	{r4, r5, r6, lr}
 800e74a:	460c      	mov	r4, r1
 800e74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e750:	2900      	cmp	r1, #0
 800e752:	b096      	sub	sp, #88	; 0x58
 800e754:	4615      	mov	r5, r2
 800e756:	461e      	mov	r6, r3
 800e758:	da0d      	bge.n	800e776 <__swhatbuf_r+0x2e>
 800e75a:	89a3      	ldrh	r3, [r4, #12]
 800e75c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e760:	f04f 0100 	mov.w	r1, #0
 800e764:	bf0c      	ite	eq
 800e766:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e76a:	2340      	movne	r3, #64	; 0x40
 800e76c:	2000      	movs	r0, #0
 800e76e:	6031      	str	r1, [r6, #0]
 800e770:	602b      	str	r3, [r5, #0]
 800e772:	b016      	add	sp, #88	; 0x58
 800e774:	bd70      	pop	{r4, r5, r6, pc}
 800e776:	466a      	mov	r2, sp
 800e778:	f000 f848 	bl	800e80c <_fstat_r>
 800e77c:	2800      	cmp	r0, #0
 800e77e:	dbec      	blt.n	800e75a <__swhatbuf_r+0x12>
 800e780:	9901      	ldr	r1, [sp, #4]
 800e782:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e786:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e78a:	4259      	negs	r1, r3
 800e78c:	4159      	adcs	r1, r3
 800e78e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e792:	e7eb      	b.n	800e76c <__swhatbuf_r+0x24>

0800e794 <__smakebuf_r>:
 800e794:	898b      	ldrh	r3, [r1, #12]
 800e796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e798:	079d      	lsls	r5, r3, #30
 800e79a:	4606      	mov	r6, r0
 800e79c:	460c      	mov	r4, r1
 800e79e:	d507      	bpl.n	800e7b0 <__smakebuf_r+0x1c>
 800e7a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e7a4:	6023      	str	r3, [r4, #0]
 800e7a6:	6123      	str	r3, [r4, #16]
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	6163      	str	r3, [r4, #20]
 800e7ac:	b002      	add	sp, #8
 800e7ae:	bd70      	pop	{r4, r5, r6, pc}
 800e7b0:	ab01      	add	r3, sp, #4
 800e7b2:	466a      	mov	r2, sp
 800e7b4:	f7ff ffc8 	bl	800e748 <__swhatbuf_r>
 800e7b8:	9900      	ldr	r1, [sp, #0]
 800e7ba:	4605      	mov	r5, r0
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f7fe febd 	bl	800d53c <_malloc_r>
 800e7c2:	b948      	cbnz	r0, 800e7d8 <__smakebuf_r+0x44>
 800e7c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c8:	059a      	lsls	r2, r3, #22
 800e7ca:	d4ef      	bmi.n	800e7ac <__smakebuf_r+0x18>
 800e7cc:	f023 0303 	bic.w	r3, r3, #3
 800e7d0:	f043 0302 	orr.w	r3, r3, #2
 800e7d4:	81a3      	strh	r3, [r4, #12]
 800e7d6:	e7e3      	b.n	800e7a0 <__smakebuf_r+0xc>
 800e7d8:	89a3      	ldrh	r3, [r4, #12]
 800e7da:	6020      	str	r0, [r4, #0]
 800e7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7e0:	81a3      	strh	r3, [r4, #12]
 800e7e2:	9b00      	ldr	r3, [sp, #0]
 800e7e4:	6163      	str	r3, [r4, #20]
 800e7e6:	9b01      	ldr	r3, [sp, #4]
 800e7e8:	6120      	str	r0, [r4, #16]
 800e7ea:	b15b      	cbz	r3, 800e804 <__smakebuf_r+0x70>
 800e7ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	f000 f81d 	bl	800e830 <_isatty_r>
 800e7f6:	b128      	cbz	r0, 800e804 <__smakebuf_r+0x70>
 800e7f8:	89a3      	ldrh	r3, [r4, #12]
 800e7fa:	f023 0303 	bic.w	r3, r3, #3
 800e7fe:	f043 0301 	orr.w	r3, r3, #1
 800e802:	81a3      	strh	r3, [r4, #12]
 800e804:	89a3      	ldrh	r3, [r4, #12]
 800e806:	431d      	orrs	r5, r3
 800e808:	81a5      	strh	r5, [r4, #12]
 800e80a:	e7cf      	b.n	800e7ac <__smakebuf_r+0x18>

0800e80c <_fstat_r>:
 800e80c:	b538      	push	{r3, r4, r5, lr}
 800e80e:	4d07      	ldr	r5, [pc, #28]	; (800e82c <_fstat_r+0x20>)
 800e810:	2300      	movs	r3, #0
 800e812:	4604      	mov	r4, r0
 800e814:	4608      	mov	r0, r1
 800e816:	4611      	mov	r1, r2
 800e818:	602b      	str	r3, [r5, #0]
 800e81a:	f7f2 ff1c 	bl	8001656 <_fstat>
 800e81e:	1c43      	adds	r3, r0, #1
 800e820:	d102      	bne.n	800e828 <_fstat_r+0x1c>
 800e822:	682b      	ldr	r3, [r5, #0]
 800e824:	b103      	cbz	r3, 800e828 <_fstat_r+0x1c>
 800e826:	6023      	str	r3, [r4, #0]
 800e828:	bd38      	pop	{r3, r4, r5, pc}
 800e82a:	bf00      	nop
 800e82c:	200017b8 	.word	0x200017b8

0800e830 <_isatty_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4d06      	ldr	r5, [pc, #24]	; (800e84c <_isatty_r+0x1c>)
 800e834:	2300      	movs	r3, #0
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	602b      	str	r3, [r5, #0]
 800e83c:	f7f2 ff1b 	bl	8001676 <_isatty>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d102      	bne.n	800e84a <_isatty_r+0x1a>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	b103      	cbz	r3, 800e84a <_isatty_r+0x1a>
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	bd38      	pop	{r3, r4, r5, pc}
 800e84c:	200017b8 	.word	0x200017b8

0800e850 <_init>:
 800e850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e852:	bf00      	nop
 800e854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e856:	bc08      	pop	{r3}
 800e858:	469e      	mov	lr, r3
 800e85a:	4770      	bx	lr

0800e85c <_fini>:
 800e85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e85e:	bf00      	nop
 800e860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e862:	bc08      	pop	{r3}
 800e864:	469e      	mov	lr, r3
 800e866:	4770      	bx	lr
